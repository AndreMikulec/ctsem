/*
    ctsem is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ctsem is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ctsem.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.17.0

#include <stan/model/model_header.hpp>

namespace model_ctsm_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_ctsm");
    reader.add_event(1785, 1785, "end", "model_ctsm");
    return reader;
}

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
covsqrt2corsqrt(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& mat,
                    const int& invert, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 5;
        validate_non_negative_index("o", "rows(mat)", rows(mat));
        validate_non_negative_index("o", "cols(mat)", cols(mat));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  o(static_cast<Eigen::VectorXd::Index>(rows(mat)),static_cast<Eigen::VectorXd::Index>(cols(mat)));
        (void) o;  // dummy to suppress unused var warning

        stan::math::initialize(o, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(o,DUMMY_VAR__);
        current_statement_begin__ = 6;
        validate_non_negative_index("s", "rows(mat)", rows(mat));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  s(static_cast<Eigen::VectorXd::Index>(rows(mat)));
        (void) s;  // dummy to suppress unused var warning

        stan::math::initialize(s, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(s,DUMMY_VAR__);


        current_statement_begin__ = 7;
        stan::math::assign(o, mat);
        current_statement_begin__ = 9;
        for (int i = 1; i <= rows(o); ++i) {

            current_statement_begin__ = 10;
            for (int j = std::min((i + 1),rows(mat)); j <= rows(mat); ++j) {

                current_statement_begin__ = 11;
                stan::math::assign(get_base1_lhs(o,j,i,"o",1), ((inv_logit(get_base1(o,j,i,"o",1)) * 2) - 1));
                current_statement_begin__ = 12;
                stan::math::assign(get_base1_lhs(o,i,j,"o",1), get_base1(o,j,i,"o",1));
            }
            current_statement_begin__ = 14;
            stan::math::assign(get_base1_lhs(o,i,i,"o",1), 1);
        }
        current_statement_begin__ = 17;
        if (as_bool(logical_eq(invert,1))) {
            current_statement_begin__ = 17;
            stan::math::assign(o, inverse(o));
        }
        current_statement_begin__ = 19;
        for (int i = 1; i <= rows(o); ++i) {

            current_statement_begin__ = 20;
            stan::math::assign(get_base1_lhs(s,i,"s",1), inv_sqrt(multiply(stan::model::rvalue(o, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "o"),stan::model::rvalue(o, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "o"))));
            current_statement_begin__ = 21;
            if (as_bool(is_inf(get_base1(s,i,"s",1)))) {
                current_statement_begin__ = 21;
                stan::math::assign(get_base1_lhs(s,i,"s",1), 0);
            }
        }
        current_statement_begin__ = 23;
        stan::math::assign(o, diag_pre_multiply(s,o));
        current_statement_begin__ = 24;
        return stan::math::promote_scalar<fun_return_scalar_t__>(o);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct covsqrt2corsqrt_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& mat,
                    const int& invert, std::ostream* pstream__) const {
        return covsqrt2corsqrt(mat, invert, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
cholspd(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 28;
        validate_non_negative_index("l", "rows(a)", rows(a));
        validate_non_negative_index("l", "rows(a)", rows(a));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  l(static_cast<Eigen::VectorXd::Index>(rows(a)),static_cast<Eigen::VectorXd::Index>(rows(a)));
        (void) l;  // dummy to suppress unused var warning

        stan::math::initialize(l, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(l,DUMMY_VAR__);


        current_statement_begin__ = 29;
        for (int j = 1; j <= cols(a); ++j) {

            current_statement_begin__ = 30;
            for (int i = j; i <= rows(a); ++i) {

                current_statement_begin__ = 31;
                if (as_bool(logical_neq(i,j))) {

                    current_statement_begin__ = 32;
                    stan::math::assign(get_base1_lhs(l,i,j,"l",1), ((get_base1(a,i,j,"a",1) + get_base1(a,j,i,"a",1)) / 2));
                    current_statement_begin__ = 33;
                    stan::math::assign(get_base1_lhs(l,j,i,"l",1), get_base1(l,i,j,"l",1));
                }
                current_statement_begin__ = 35;
                if (as_bool(logical_eq(j,i))) {

                    current_statement_begin__ = 36;
                    stan::math::assign(get_base1_lhs(l,j,j,"l",1), (get_base1(a,j,j,"a",1) + 0.001));
                    current_statement_begin__ = 37;
                    if (as_bool(logical_lte(get_base1(l,j,j,"l",1),0.001))) {
                        current_statement_begin__ = 37;
                        stan::math::assign(get_base1_lhs(l,j,j,"l",1), 0.001);
                    }
                    current_statement_begin__ = 38;
                    if (as_bool(logical_gt(get_base1(l,j,j,"l",1),10000000000.0))) {
                        current_statement_begin__ = 38;
                        stan::math::assign(get_base1_lhs(l,j,j,"l",1), -(99999));
                    }
                }
            }
        }
        current_statement_begin__ = 42;
        return stan::math::promote_scalar<fun_return_scalar_t__>(cholesky_decompose(l));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct cholspd_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& a, std::ostream* pstream__) const {
        return cholspd(a, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,Eigen::Dynamic>
discreteDIFFUSIONcalc(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& DR,
                          const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& DI,
                          const T2__& dt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 46;
        validate_non_negative_index("DRDI", "(rows(DR) + rows(DI))", (rows(DR) + rows(DI)));
        validate_non_negative_index("DRDI", "(rows(DR) + rows(DI))", (rows(DR) + rows(DI)));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  DRDI(static_cast<Eigen::VectorXd::Index>((rows(DR) + rows(DI))),static_cast<Eigen::VectorXd::Index>((rows(DR) + rows(DI))));
        (void) DRDI;  // dummy to suppress unused var warning

        stan::math::initialize(DRDI, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(DRDI,DUMMY_VAR__);
        current_statement_begin__ = 47;
        validate_non_negative_index("out", "rows(DR)", rows(DR));
        validate_non_negative_index("out", "rows(DR)", rows(DR));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  out(static_cast<Eigen::VectorXd::Index>(rows(DR)),static_cast<Eigen::VectorXd::Index>(rows(DR)));
        (void) out;  // dummy to suppress unused var warning

        stan::math::initialize(out, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(out,DUMMY_VAR__);
        current_statement_begin__ = 48;
        int d(0);
        (void) d;  // dummy to suppress unused var warning

        stan::math::fill(d, std::numeric_limits<int>::min());


        current_statement_begin__ = 50;
        stan::math::assign(d, rows(DR));
        current_statement_begin__ = 51;
        stan::model::assign(DRDI, 
                    stan::model::cons_list(stan::model::index_min_max(1, d), stan::model::cons_list(stan::model::index_min_max(1, d), stan::model::nil_index_list())), 
                    minus(DR), 
                    "assigning variable DRDI");
        current_statement_begin__ = 52;
        stan::model::assign(DRDI, 
                    stan::model::cons_list(stan::model::index_min_max(1, d), stan::model::cons_list(stan::model::index_min_max((d + 1), (d * 2)), stan::model::nil_index_list())), 
                    DI, 
                    "assigning variable DRDI");
        current_statement_begin__ = 53;
        stan::model::assign(DRDI, 
                    stan::model::cons_list(stan::model::index_min_max((d + 1), (d * 2)), stan::model::cons_list(stan::model::index_min_max((d + 1), (d * 2)), stan::model::nil_index_list())), 
                    transpose(DR), 
                    "assigning variable DRDI");
        current_statement_begin__ = 54;
        stan::model::assign(DRDI, 
                    stan::model::cons_list(stan::model::index_min_max((d + 1), (d * 2)), stan::model::cons_list(stan::model::index_min_max(1, d), stan::model::nil_index_list())), 
                    rep_matrix(0,d,d), 
                    "assigning variable DRDI");
        current_statement_begin__ = 55;
        stan::math::assign(DRDI, matrix_exp(multiply(DRDI,dt)));
        current_statement_begin__ = 56;
        stan::math::assign(out, multiply(transpose(stan::model::rvalue(DRDI, stan::model::cons_list(stan::model::index_min_max((d + 1), (d * 2)), stan::model::cons_list(stan::model::index_min_max((d + 1), (d * 2)), stan::model::nil_index_list())), "DRDI")),stan::model::rvalue(DRDI, stan::model::cons_list(stan::model::index_min_max(1, d), stan::model::cons_list(stan::model::index_min_max((d + 1), (d * 2)), stan::model::nil_index_list())), "DRDI")));
        current_statement_begin__ = 57;
        return stan::math::promote_scalar<fun_return_scalar_t__>(out);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct discreteDIFFUSIONcalc_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& DR,
                          const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& DI,
                          const T2__& dt, std::ostream* pstream__) const {
        return discreteDIFFUSIONcalc(DR, DI, dt, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
matrix_diagexp(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& in, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 62;
        validate_non_negative_index("out", "rows(in)", rows(in));
        validate_non_negative_index("out", "rows(in)", rows(in));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  out(static_cast<Eigen::VectorXd::Index>(rows(in)),static_cast<Eigen::VectorXd::Index>(rows(in)));
        (void) out;  // dummy to suppress unused var warning

        stan::math::initialize(out, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(out,DUMMY_VAR__);


        current_statement_begin__ = 63;
        for (int i = 1; i <= rows(in); ++i) {

            current_statement_begin__ = 64;
            for (int j = 1; j <= rows(in); ++j) {

                current_statement_begin__ = 65;
                if (as_bool(logical_eq(i,j))) {
                    current_statement_begin__ = 65;
                    stan::math::assign(get_base1_lhs(out,i,i,"out",1), exp(get_base1(in,i,i,"in",1)));
                }
                current_statement_begin__ = 66;
                if (as_bool(logical_neq(i,j))) {
                    current_statement_begin__ = 66;
                    stan::math::assign(get_base1_lhs(out,i,j,"out",1), 0);
                }
            }
        }
        current_statement_begin__ = 69;
        return stan::math::promote_scalar<fun_return_scalar_t__>(out);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct matrix_diagexp_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& in, std::ostream* pstream__) const {
        return matrix_diagexp(in, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
sdcovsqrt2cov(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& mat,
                  const int& msqrt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 76;
        validate_non_negative_index("out", "rows(mat)", rows(mat));
        validate_non_negative_index("out", "rows(mat)", rows(mat));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  out(static_cast<Eigen::VectorXd::Index>(rows(mat)),static_cast<Eigen::VectorXd::Index>(rows(mat)));
        (void) out;  // dummy to suppress unused var warning

        stan::math::initialize(out, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(out,DUMMY_VAR__);


        current_statement_begin__ = 78;
        if (as_bool(logical_eq(msqrt,1))) {

            current_statement_begin__ = 79;
            for (int k = 1; k <= cols(mat); ++k) {

                current_statement_begin__ = 80;
                for (int j = 1; j <= rows(mat); ++j) {

                    current_statement_begin__ = 81;
                    if (as_bool(logical_gt(j,k))) {
                        current_statement_begin__ = 81;
                        stan::math::assign(get_base1_lhs(out,j,k,"out",1), get_base1(mat,j,k,"mat",1));
                    }
                    current_statement_begin__ = 82;
                    if (as_bool(logical_gt(k,j))) {
                        current_statement_begin__ = 82;
                        stan::math::assign(get_base1_lhs(out,j,k,"out",1), get_base1(mat,k,j,"mat",1));
                    }
                    current_statement_begin__ = 83;
                    if (as_bool(logical_eq(k,j))) {
                        current_statement_begin__ = 83;
                        stan::math::assign(get_base1_lhs(out,j,k,"out",1), get_base1(mat,j,k,"mat",1));
                    }
                }
            }
        }
        current_statement_begin__ = 88;
        if (as_bool(logical_eq(msqrt,0))) {

            current_statement_begin__ = 89;
            stan::math::assign(out, covsqrt2corsqrt(mat,0, pstream__));
            current_statement_begin__ = 90;
            stan::math::assign(out, diag_pre_multiply(diagonal(mat),out));
        }
        current_statement_begin__ = 93;
        if (as_bool(logical_eq(msqrt,0))) {
            current_statement_begin__ = 93;
            stan::math::assign(out, tcrossprod(out));
        }
        current_statement_begin__ = 94;
        return stan::math::promote_scalar<fun_return_scalar_t__>(out);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct sdcovsqrt2cov_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& mat,
                  const int& msqrt, std::ostream* pstream__) const {
        return sdcovsqrt2cov(mat, msqrt, pstream__);
    }
};

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,Eigen::Dynamic>
kron_prod(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& mata,
              const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& matb, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 99;
        int m(0);
        (void) m;  // dummy to suppress unused var warning

        stan::math::fill(m, std::numeric_limits<int>::min());
        current_statement_begin__ = 100;
        int p(0);
        (void) p;  // dummy to suppress unused var warning

        stan::math::fill(p, std::numeric_limits<int>::min());
        current_statement_begin__ = 101;
        int n(0);
        (void) n;  // dummy to suppress unused var warning

        stan::math::fill(n, std::numeric_limits<int>::min());
        current_statement_begin__ = 102;
        int q(0);
        (void) q;  // dummy to suppress unused var warning

        stan::math::fill(q, std::numeric_limits<int>::min());
        current_statement_begin__ = 103;
        validate_non_negative_index("C", "(rows(mata) * rows(matb))", (rows(mata) * rows(matb)));
        validate_non_negative_index("C", "(cols(mata) * cols(matb))", (cols(mata) * cols(matb)));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  C(static_cast<Eigen::VectorXd::Index>((rows(mata) * rows(matb))),static_cast<Eigen::VectorXd::Index>((cols(mata) * cols(matb))));
        (void) C;  // dummy to suppress unused var warning

        stan::math::initialize(C, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(C,DUMMY_VAR__);


        current_statement_begin__ = 104;
        stan::math::assign(m, rows(mata));
        current_statement_begin__ = 105;
        stan::math::assign(p, rows(matb));
        current_statement_begin__ = 106;
        stan::math::assign(n, cols(mata));
        current_statement_begin__ = 107;
        stan::math::assign(q, cols(matb));
        current_statement_begin__ = 108;
        for (int k = 1; k <= p; ++k) {

            current_statement_begin__ = 109;
            for (int l = 1; l <= q; ++l) {

                current_statement_begin__ = 110;
                for (int i = 1; i <= m; ++i) {

                    current_statement_begin__ = 111;
                    for (int j = 1; j <= n; ++j) {

                        current_statement_begin__ = 112;
                        stan::math::assign(get_base1_lhs(C,((p * (i - 1)) + k),((q * (j - 1)) + l),"C",1), (get_base1(mata,i,j,"mata",1) * get_base1(matb,k,l,"matb",1)));
                    }
                }
            }
        }
        current_statement_begin__ = 117;
        return stan::math::promote_scalar<fun_return_scalar_t__>(C);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct kron_prod_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& mata,
              const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& matb, std::ostream* pstream__) const {
        return kron_prod(mata, matb, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
cov_of_matrix(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& mat, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 121;
        validate_non_negative_index("means", "cols(mat)", cols(mat));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  means(static_cast<Eigen::VectorXd::Index>(cols(mat)));
        (void) means;  // dummy to suppress unused var warning

        stan::math::initialize(means, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(means,DUMMY_VAR__);
        current_statement_begin__ = 122;
        validate_non_negative_index("centered", "rows(mat)", rows(mat));
        validate_non_negative_index("centered", "cols(mat)", cols(mat));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  centered(static_cast<Eigen::VectorXd::Index>(rows(mat)),static_cast<Eigen::VectorXd::Index>(cols(mat)));
        (void) centered;  // dummy to suppress unused var warning

        stan::math::initialize(centered, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(centered,DUMMY_VAR__);
        current_statement_begin__ = 123;
        validate_non_negative_index("covm", "cols(mat)", cols(mat));
        validate_non_negative_index("covm", "cols(mat)", cols(mat));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  covm(static_cast<Eigen::VectorXd::Index>(cols(mat)),static_cast<Eigen::VectorXd::Index>(cols(mat)));
        (void) covm;  // dummy to suppress unused var warning

        stan::math::initialize(covm, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(covm,DUMMY_VAR__);


        current_statement_begin__ = 124;
        for (int coli = 1; coli <= cols(mat); ++coli) {

            current_statement_begin__ = 125;
            stan::math::assign(get_base1_lhs(means,coli,"means",1), mean(stan::model::rvalue(mat, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(coli), stan::model::nil_index_list())), "mat")));
            current_statement_begin__ = 126;
            for (int rowi = 1; rowi <= rows(mat); ++rowi) {

                current_statement_begin__ = 127;
                stan::math::assign(get_base1_lhs(centered,rowi,coli,"centered",1), (get_base1(mat,rowi,coli,"mat",1) - get_base1(means,coli,"means",1)));
            }
        }
        current_statement_begin__ = 130;
        stan::math::assign(covm, divide(crossprod(centered),(rows(mat) - 1)));
        current_statement_begin__ = 131;
        for (int j = 1; j <= rows(covm); ++j) {

            current_statement_begin__ = 132;
            stan::math::assign(get_base1_lhs(covm,j,j,"covm",1), (get_base1(covm,j,j,"covm",1) + 1e-008));
        }
        current_statement_begin__ = 134;
        return stan::math::promote_scalar<fun_return_scalar_t__>(covm);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct cov_of_matrix_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& mat, std::ostream* pstream__) const {
        return cov_of_matrix(mat, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
colMeans(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& mat, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 138;
        validate_non_negative_index("out", "cols(mat)", cols(mat));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  out(static_cast<Eigen::VectorXd::Index>(cols(mat)));
        (void) out;  // dummy to suppress unused var warning

        stan::math::initialize(out, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(out,DUMMY_VAR__);


        current_statement_begin__ = 139;
        for (int i = 1; i <= cols(mat); ++i) {

            current_statement_begin__ = 140;
            stan::math::assign(get_base1_lhs(out,i,"out",1), mean(stan::model::rvalue(mat, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "mat")));
        }
        current_statement_begin__ = 142;
        return stan::math::promote_scalar<fun_return_scalar_t__>(out);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct colMeans_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& mat, std::ostream* pstream__) const {
        return colMeans(mat, pstream__);
    }
};

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,Eigen::Dynamic>
crosscov(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& a,
             const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& b, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 146;
        validate_non_negative_index("da", "rows(a)", rows(a));
        validate_non_negative_index("da", "cols(a)", cols(a));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  da(static_cast<Eigen::VectorXd::Index>(rows(a)),static_cast<Eigen::VectorXd::Index>(cols(a)));
        (void) da;  // dummy to suppress unused var warning

        stan::math::initialize(da, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(da,DUMMY_VAR__);
        current_statement_begin__ = 147;
        validate_non_negative_index("db", "rows(b)", rows(b));
        validate_non_negative_index("db", "cols(b)", cols(b));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  db(static_cast<Eigen::VectorXd::Index>(rows(b)),static_cast<Eigen::VectorXd::Index>(cols(b)));
        (void) db;  // dummy to suppress unused var warning

        stan::math::initialize(db, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(db,DUMMY_VAR__);
        current_statement_begin__ = 148;
        validate_non_negative_index("out", "cols(a)", cols(a));
        validate_non_negative_index("out", "cols(b)", cols(b));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  out(static_cast<Eigen::VectorXd::Index>(cols(a)),static_cast<Eigen::VectorXd::Index>(cols(b)));
        (void) out;  // dummy to suppress unused var warning

        stan::math::initialize(out, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(out,DUMMY_VAR__);


        current_statement_begin__ = 150;
        stan::math::assign(da, subtract(a,rep_matrix(transpose(colMeans(a, pstream__)),rows(a))));
        current_statement_begin__ = 151;
        stan::math::assign(db, subtract(b,rep_matrix(transpose(colMeans(b, pstream__)),rows(b))));
        current_statement_begin__ = 152;
        stan::math::assign(out, elt_divide(multiply(transpose(da),db),(rows(a) - 1.0)));
        current_statement_begin__ = 153;
        return stan::math::promote_scalar<fun_return_scalar_t__>(out);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct crosscov_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& a,
             const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& b, std::ostream* pstream__) const {
        return crosscov(a, b, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
chol(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 157;
        validate_non_negative_index("l", "rows(a)", rows(a));
        validate_non_negative_index("l", "rows(a)", rows(a));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  l(static_cast<Eigen::VectorXd::Index>(rows(a)),static_cast<Eigen::VectorXd::Index>(rows(a)));
        (void) l;  // dummy to suppress unused var warning

        stan::math::initialize(l, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(l,DUMMY_VAR__);


        current_statement_begin__ = 158;
        for (int j = 1; j <= cols(a); ++j) {

            current_statement_begin__ = 159;
            for (int i = 1; i <= rows(a); ++i) {

                current_statement_begin__ = 160;
                if (as_bool(logical_eq(j,i))) {

                    current_statement_begin__ = 161;
                    if (as_bool(logical_eq(j,1))) {

                        current_statement_begin__ = 162;
                        if (as_bool(logical_lte(get_base1(a,j,j,"a",1),0))) {

                            current_statement_begin__ = 163;
                            stan::math::assign(get_base1_lhs(l,j,j,"l",1), 1e-008);
                            current_statement_begin__ = 164;
                            if (pstream__) {
                                stan_print(pstream__,"Negative variance ");
                                stan_print(pstream__,get_base1(a,j,j,"a",1));
                                stan_print(pstream__," set to 1e-8 for Cholesky decomp");
                                *pstream__ << std::endl;
                            }
                        }
                        current_statement_begin__ = 166;
                        if (as_bool(logical_gt(get_base1(a,j,j,"a",1),0))) {
                            current_statement_begin__ = 166;
                            stan::math::assign(get_base1_lhs(l,j,j,"l",1), sqrt(get_base1(a,j,j,"a",1)));
                        }
                    }
                    current_statement_begin__ = 168;
                    if (as_bool(logical_gt(j,1))) {
                        current_statement_begin__ = 168;
                        stan::math::assign(get_base1_lhs(l,j,j,"l",1), sqrt((get_base1(a,j,j,"a",1) - dot_self(stan::model::rvalue(l, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_min_max(1, (j - 1)), stan::model::nil_index_list())), "l")))));
                    }
                }
                current_statement_begin__ = 170;
                if (as_bool(logical_gt(i,j))) {
                    current_statement_begin__ = 170;
                    stan::math::assign(get_base1_lhs(l,i,j,"l",1), ((get_base1(a,i,j,"a",1) - dot_product(stan::model::rvalue(l, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_min_max(1, (j - 1)), stan::model::nil_index_list())), "l"),stan::model::rvalue(l, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_min_max(1, (j - 1)), stan::model::nil_index_list())), "l"))) / get_base1(l,j,j,"l",1)));
                }
                current_statement_begin__ = 171;
                if (as_bool(logical_gt(j,i))) {
                    current_statement_begin__ = 171;
                    stan::math::assign(get_base1_lhs(l,i,j,"l",1), 0);
                }
            }
        }
        current_statement_begin__ = 174;
        return stan::math::promote_scalar<fun_return_scalar_t__>(l);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct chol_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& a, std::ostream* pstream__) const {
        return chol(a, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
makesym(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& mat, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 178;
        validate_non_negative_index("out", "rows(mat)", rows(mat));
        validate_non_negative_index("out", "cols(mat)", cols(mat));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  out(static_cast<Eigen::VectorXd::Index>(rows(mat)),static_cast<Eigen::VectorXd::Index>(cols(mat)));
        (void) out;  // dummy to suppress unused var warning

        stan::math::initialize(out, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(out,DUMMY_VAR__);


        current_statement_begin__ = 180;
        for (int coli = 1; coli <= cols(mat); ++coli) {

            current_statement_begin__ = 181;
            for (int rowi = coli; rowi <= rows(mat); ++rowi) {

                current_statement_begin__ = 182;
                if (as_bool(logical_gt(rowi,coli))) {

                    current_statement_begin__ = 183;
                    stan::math::assign(get_base1_lhs(out,rowi,coli,"out",1), get_base1(mat,rowi,coli,"mat",1));
                    current_statement_begin__ = 184;
                    stan::math::assign(get_base1_lhs(out,coli,rowi,"out",1), get_base1(mat,rowi,coli,"mat",1));
                }
                current_statement_begin__ = 186;
                if (as_bool(logical_eq(rowi,coli))) {
                    current_statement_begin__ = 186;
                    stan::math::assign(get_base1_lhs(out,rowi,coli,"out",1), (get_base1(mat,rowi,coli,"mat",1) + 1.0000000000000001e-005));
                }
            }
        }
        current_statement_begin__ = 189;
        return stan::math::promote_scalar<fun_return_scalar_t__>(out);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct makesym_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& mat, std::ostream* pstream__) const {
        return makesym(mat, pstream__);
    }
};

template <typename T0__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__>::type
tform(const T0__& param,
          const int& transform,
          const T2__& multiplier,
          const T3__& meanscale,
          const T4__& offset, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 193;
        fun_scalar_t__ out;
        (void) out;  // dummy to suppress unused var warning

        stan::math::initialize(out, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(out,DUMMY_VAR__);


        current_statement_begin__ = 195;
        if (as_bool(logical_eq(transform,0))) {
            current_statement_begin__ = 195;
            stan::math::assign(out, (((param * meanscale) * multiplier) + offset));
        }
        current_statement_begin__ = 197;
        if (as_bool(logical_eq(transform,1))) {
            current_statement_begin__ = 197;
            stan::math::assign(out, ((log((1 + exp((param * meanscale)))) * multiplier) + offset));
        }
        current_statement_begin__ = 199;
        if (as_bool(logical_eq(transform,2))) {
            current_statement_begin__ = 199;
            stan::math::assign(out, ((exp((param * meanscale)) * multiplier) + offset));
        }
        current_statement_begin__ = 201;
        if (as_bool(logical_eq(transform,3))) {
            current_statement_begin__ = 201;
            stan::math::assign(out, ((inv_logit((param * meanscale)) * multiplier) + offset));
        }
        current_statement_begin__ = 203;
        if (as_bool(logical_eq(transform,4))) {
            current_statement_begin__ = 203;
            stan::math::assign(out, ((pow((param * meanscale),3) * multiplier) + offset));
        }
        current_statement_begin__ = 207;
        return stan::math::promote_scalar<fun_return_scalar_t__>(out);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct tform_functor__ {
    template <typename T0__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__>::type
    operator()(const T0__& param,
          const int& transform,
          const T2__& multiplier,
          const T3__& meanscale,
          const T4__& offset, std::ostream* pstream__) const {
        return tform(param, transform, multiplier, meanscale, offset, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
cov2cors(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& M, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 211;
        validate_non_negative_index("o", "rows(M)", rows(M));
        validate_non_negative_index("o", "cols(M)", cols(M));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  o(static_cast<Eigen::VectorXd::Index>(rows(M)),static_cast<Eigen::VectorXd::Index>(cols(M)));
        (void) o;  // dummy to suppress unused var warning

        stan::math::initialize(o, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(o,DUMMY_VAR__);
        current_statement_begin__ = 212;
        validate_non_negative_index("isd", "rows(M)", rows(M));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  isd(static_cast<Eigen::VectorXd::Index>(rows(M)));
        (void) isd;  // dummy to suppress unused var warning

        stan::math::initialize(isd, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(isd,DUMMY_VAR__);


        current_statement_begin__ = 214;
        stan::math::assign(isd, inv_sqrt(diagonal(M)));
        current_statement_begin__ = 215;
        stan::math::assign(o, quad_form_diag(M,isd));
        current_statement_begin__ = 216;
        return stan::math::promote_scalar<fun_return_scalar_t__>(o);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct cov2cors_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& M, std::ostream* pstream__) const {
        return cov2cors(M, pstream__);
    }
};

#include <meta_header.hpp>
 class model_ctsm : public prob_grad {
private:
    int ndatapoints;
    int nmanifest;
    int nlatent;
    int nsubjects;
    int ntipred;
    int ntdpred;
    matrix_d tipredsdata;
    int nmissingtipreds;
    int ntipredeffects;
    vector<vector_d> Y;
    int nopriors;
    int lineardynamics;
    vector<vector_d> tdpreds;
    vector<double> dT;
    vector<double> dTsmall;
    int driftdiagonly;
    int binomial;
    vector<int> integrationsteps;
    vector<int> driftindex;
    vector<int> diffusionindex;
    vector<int> cintindex;
    vector<int> subject;
    int nparams;
    vector<int> T0check;
    int continuoustime;
    int nindvarying;
    int nindvaryingoffdiagonals;
    vector<int> indvaryingindex;
    vector_d sdscale;
    int nt0varstationary;
    int nt0meansstationary;
    vector<vector<int> > t0varstationary;
    vector<vector<int> > t0meansstationary;
    vector<int> nobs_y;
    vector<vector<int> > whichobs_y;
    int ndiffusion;
    vector<int> derrind;
    vector<int> manifesttype;
    vector<int> nbinary_y;
    vector<vector<int> > whichbinary_y;
    vector<int> ncont_y;
    vector<vector<int> > whichcont_y;
    int ukfpop;
    int ukf;
    int intoverstates;
    int ngenerations;
    int verbose;
    vector<int> T0MEANSsubindex;
    vector<int> LAMBDAsubindex;
    vector<int> DRIFTsubindex;
    vector<int> DIFFUSIONsubindex;
    vector<int> MANIFESTVARsubindex;
    vector<int> MANIFESTMEANSsubindex;
    vector<int> CINTsubindex;
    vector<int> T0VARsubindex;
    vector<int> TDPREDEFFECTsubindex;
    vector<int> PARSsubindex;
    vector<int> asymCINTsubindex;
    vector<int> asymDIFFUSIONsubindex;
    int T0MEANSsetup_rowcount;
    int LAMBDAsetup_rowcount;
    int DRIFTsetup_rowcount;
    int DIFFUSIONsetup_rowcount;
    int MANIFESTVARsetup_rowcount;
    int MANIFESTMEANSsetup_rowcount;
    int CINTsetup_rowcount;
    int T0VARsetup_rowcount;
    int TDPREDEFFECTsetup_rowcount;
    int PARSsetup_rowcount;
    vector<vector<int> > T0MEANSsetup;
    vector<vector<int> > LAMBDAsetup;
    vector<vector<int> > DRIFTsetup;
    vector<vector<int> > DIFFUSIONsetup;
    vector<vector<int> > MANIFESTVARsetup;
    vector<vector<int> > MANIFESTMEANSsetup;
    vector<vector<int> > CINTsetup;
    vector<vector<int> > T0VARsetup;
    vector<vector<int> > TDPREDEFFECTsetup;
    vector<vector<int> > PARSsetup;
    matrix_d T0MEANSvalues;
    matrix_d LAMBDAvalues;
    matrix_d DRIFTvalues;
    matrix_d DIFFUSIONvalues;
    matrix_d MANIFESTVARvalues;
    matrix_d MANIFESTMEANSvalues;
    matrix_d CINTvalues;
    matrix_d T0VARvalues;
    matrix_d TDPREDEFFECTvalues;
    matrix_d PARSvalues;
    vector<vector<int> > TIPREDEFFECTsetup;
    int nmatrixslots;
    vector<vector<int> > popsetup;
    vector<vector<double> > popvalues;
    matrix_d IIlatent;
    matrix_d IIlatent2;
    int nlatentpop;
public:
    model_ctsm(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_ctsm(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_ctsm_namespace::model_ctsm";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 222;
            context__.validate_dims("data initialization", "ndatapoints", "int", context__.to_vec());
            ndatapoints = int(0);
            vals_i__ = context__.vals_i("ndatapoints");
            pos__ = 0;
            ndatapoints = vals_i__[pos__++];
            current_statement_begin__ = 223;
            context__.validate_dims("data initialization", "nmanifest", "int", context__.to_vec());
            nmanifest = int(0);
            vals_i__ = context__.vals_i("nmanifest");
            pos__ = 0;
            nmanifest = vals_i__[pos__++];
            current_statement_begin__ = 224;
            context__.validate_dims("data initialization", "nlatent", "int", context__.to_vec());
            nlatent = int(0);
            vals_i__ = context__.vals_i("nlatent");
            pos__ = 0;
            nlatent = vals_i__[pos__++];
            current_statement_begin__ = 225;
            context__.validate_dims("data initialization", "nsubjects", "int", context__.to_vec());
            nsubjects = int(0);
            vals_i__ = context__.vals_i("nsubjects");
            pos__ = 0;
            nsubjects = vals_i__[pos__++];
            current_statement_begin__ = 226;
            context__.validate_dims("data initialization", "ntipred", "int", context__.to_vec());
            ntipred = int(0);
            vals_i__ = context__.vals_i("ntipred");
            pos__ = 0;
            ntipred = vals_i__[pos__++];
            current_statement_begin__ = 227;
            context__.validate_dims("data initialization", "ntdpred", "int", context__.to_vec());
            ntdpred = int(0);
            vals_i__ = context__.vals_i("ntdpred");
            pos__ = 0;
            ntdpred = vals_i__[pos__++];
            current_statement_begin__ = 229;
            validate_non_negative_index("tipredsdata", "(ntipred ? nsubjects : 0 )", (ntipred ? nsubjects : 0 ));
            validate_non_negative_index("tipredsdata", "(ntipred ? ntipred : 0 )", (ntipred ? ntipred : 0 ));
            context__.validate_dims("data initialization", "tipredsdata", "matrix_d", context__.to_vec((ntipred ? nsubjects : 0 ),(ntipred ? ntipred : 0 )));
            validate_non_negative_index("tipredsdata", "(ntipred ? nsubjects : 0 )", (ntipred ? nsubjects : 0 ));
            validate_non_negative_index("tipredsdata", "(ntipred ? ntipred : 0 )", (ntipred ? ntipred : 0 ));
            tipredsdata = matrix_d(static_cast<Eigen::VectorXd::Index>((ntipred ? nsubjects : 0 )),static_cast<Eigen::VectorXd::Index>((ntipred ? ntipred : 0 )));
            vals_r__ = context__.vals_r("tipredsdata");
            pos__ = 0;
            size_t tipredsdata_m_mat_lim__ = (ntipred ? nsubjects : 0 );
            size_t tipredsdata_n_mat_lim__ = (ntipred ? ntipred : 0 );
            for (size_t n_mat__ = 0; n_mat__ < tipredsdata_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < tipredsdata_m_mat_lim__; ++m_mat__) {
                    tipredsdata(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 230;
            context__.validate_dims("data initialization", "nmissingtipreds", "int", context__.to_vec());
            nmissingtipreds = int(0);
            vals_i__ = context__.vals_i("nmissingtipreds");
            pos__ = 0;
            nmissingtipreds = vals_i__[pos__++];
            current_statement_begin__ = 231;
            context__.validate_dims("data initialization", "ntipredeffects", "int", context__.to_vec());
            ntipredeffects = int(0);
            vals_i__ = context__.vals_i("ntipredeffects");
            pos__ = 0;
            ntipredeffects = vals_i__[pos__++];
            current_statement_begin__ = 233;
            validate_non_negative_index("Y", "ndatapoints", ndatapoints);
            validate_non_negative_index("Y", "nmanifest", nmanifest);
            context__.validate_dims("data initialization", "Y", "vector_d", context__.to_vec(ndatapoints,nmanifest));
            validate_non_negative_index("Y", "ndatapoints", ndatapoints);
            validate_non_negative_index("Y", "nmanifest", nmanifest);
            Y = std::vector<vector_d>(ndatapoints,vector_d(static_cast<Eigen::VectorXd::Index>(nmanifest)));
            vals_r__ = context__.vals_r("Y");
            pos__ = 0;
            size_t Y_i_vec_lim__ = nmanifest;
            for (size_t i_vec__ = 0; i_vec__ < Y_i_vec_lim__; ++i_vec__) {
                size_t Y_limit_0__ = ndatapoints;
                for (size_t i_0__ = 0; i_0__ < Y_limit_0__; ++i_0__) {
                    Y[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 234;
            context__.validate_dims("data initialization", "nopriors", "int", context__.to_vec());
            nopriors = int(0);
            vals_i__ = context__.vals_i("nopriors");
            pos__ = 0;
            nopriors = vals_i__[pos__++];
            current_statement_begin__ = 235;
            context__.validate_dims("data initialization", "lineardynamics", "int", context__.to_vec());
            lineardynamics = int(0);
            vals_i__ = context__.vals_i("lineardynamics");
            pos__ = 0;
            lineardynamics = vals_i__[pos__++];
            current_statement_begin__ = 236;
            validate_non_negative_index("tdpreds", "(ntdpred ? ndatapoints : 0 )", (ntdpred ? ndatapoints : 0 ));
            validate_non_negative_index("tdpreds", "ntdpred", ntdpred);
            context__.validate_dims("data initialization", "tdpreds", "vector_d", context__.to_vec((ntdpred ? ndatapoints : 0 ),ntdpred));
            validate_non_negative_index("tdpreds", "(ntdpred ? ndatapoints : 0 )", (ntdpred ? ndatapoints : 0 ));
            validate_non_negative_index("tdpreds", "ntdpred", ntdpred);
            tdpreds = std::vector<vector_d>((ntdpred ? ndatapoints : 0 ),vector_d(static_cast<Eigen::VectorXd::Index>(ntdpred)));
            vals_r__ = context__.vals_r("tdpreds");
            pos__ = 0;
            size_t tdpreds_i_vec_lim__ = ntdpred;
            for (size_t i_vec__ = 0; i_vec__ < tdpreds_i_vec_lim__; ++i_vec__) {
                size_t tdpreds_limit_0__ = (ntdpred ? ndatapoints : 0 );
                for (size_t i_0__ = 0; i_0__ < tdpreds_limit_0__; ++i_0__) {
                    tdpreds[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 238;
            validate_non_negative_index("dT", "ndatapoints", ndatapoints);
            context__.validate_dims("data initialization", "dT", "double", context__.to_vec(ndatapoints));
            validate_non_negative_index("dT", "ndatapoints", ndatapoints);
            dT = std::vector<double>(ndatapoints,double(0));
            vals_r__ = context__.vals_r("dT");
            pos__ = 0;
            size_t dT_limit_0__ = ndatapoints;
            for (size_t i_0__ = 0; i_0__ < dT_limit_0__; ++i_0__) {
                dT[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 239;
            validate_non_negative_index("dTsmall", "ndatapoints", ndatapoints);
            context__.validate_dims("data initialization", "dTsmall", "double", context__.to_vec(ndatapoints));
            validate_non_negative_index("dTsmall", "ndatapoints", ndatapoints);
            dTsmall = std::vector<double>(ndatapoints,double(0));
            vals_r__ = context__.vals_r("dTsmall");
            pos__ = 0;
            size_t dTsmall_limit_0__ = ndatapoints;
            for (size_t i_0__ = 0; i_0__ < dTsmall_limit_0__; ++i_0__) {
                dTsmall[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 240;
            context__.validate_dims("data initialization", "driftdiagonly", "int", context__.to_vec());
            driftdiagonly = int(0);
            vals_i__ = context__.vals_i("driftdiagonly");
            pos__ = 0;
            driftdiagonly = vals_i__[pos__++];
            current_statement_begin__ = 241;
            context__.validate_dims("data initialization", "binomial", "int", context__.to_vec());
            binomial = int(0);
            vals_i__ = context__.vals_i("binomial");
            pos__ = 0;
            binomial = vals_i__[pos__++];
            current_statement_begin__ = 242;
            validate_non_negative_index("integrationsteps", "ndatapoints", ndatapoints);
            context__.validate_dims("data initialization", "integrationsteps", "int", context__.to_vec(ndatapoints));
            validate_non_negative_index("integrationsteps", "ndatapoints", ndatapoints);
            integrationsteps = std::vector<int>(ndatapoints,int(0));
            vals_i__ = context__.vals_i("integrationsteps");
            pos__ = 0;
            size_t integrationsteps_limit_0__ = ndatapoints;
            for (size_t i_0__ = 0; i_0__ < integrationsteps_limit_0__; ++i_0__) {
                integrationsteps[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 243;
            validate_non_negative_index("driftindex", "ndatapoints", ndatapoints);
            context__.validate_dims("data initialization", "driftindex", "int", context__.to_vec(ndatapoints));
            validate_non_negative_index("driftindex", "ndatapoints", ndatapoints);
            driftindex = std::vector<int>(ndatapoints,int(0));
            vals_i__ = context__.vals_i("driftindex");
            pos__ = 0;
            size_t driftindex_limit_0__ = ndatapoints;
            for (size_t i_0__ = 0; i_0__ < driftindex_limit_0__; ++i_0__) {
                driftindex[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 244;
            validate_non_negative_index("diffusionindex", "ndatapoints", ndatapoints);
            context__.validate_dims("data initialization", "diffusionindex", "int", context__.to_vec(ndatapoints));
            validate_non_negative_index("diffusionindex", "ndatapoints", ndatapoints);
            diffusionindex = std::vector<int>(ndatapoints,int(0));
            vals_i__ = context__.vals_i("diffusionindex");
            pos__ = 0;
            size_t diffusionindex_limit_0__ = ndatapoints;
            for (size_t i_0__ = 0; i_0__ < diffusionindex_limit_0__; ++i_0__) {
                diffusionindex[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 245;
            validate_non_negative_index("cintindex", "ndatapoints", ndatapoints);
            context__.validate_dims("data initialization", "cintindex", "int", context__.to_vec(ndatapoints));
            validate_non_negative_index("cintindex", "ndatapoints", ndatapoints);
            cintindex = std::vector<int>(ndatapoints,int(0));
            vals_i__ = context__.vals_i("cintindex");
            pos__ = 0;
            size_t cintindex_limit_0__ = ndatapoints;
            for (size_t i_0__ = 0; i_0__ < cintindex_limit_0__; ++i_0__) {
                cintindex[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 246;
            validate_non_negative_index("subject", "ndatapoints", ndatapoints);
            context__.validate_dims("data initialization", "subject", "int", context__.to_vec(ndatapoints));
            validate_non_negative_index("subject", "ndatapoints", ndatapoints);
            subject = std::vector<int>(ndatapoints,int(0));
            vals_i__ = context__.vals_i("subject");
            pos__ = 0;
            size_t subject_limit_0__ = ndatapoints;
            for (size_t i_0__ = 0; i_0__ < subject_limit_0__; ++i_0__) {
                subject[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 247;
            context__.validate_dims("data initialization", "nparams", "int", context__.to_vec());
            nparams = int(0);
            vals_i__ = context__.vals_i("nparams");
            pos__ = 0;
            nparams = vals_i__[pos__++];
            current_statement_begin__ = 248;
            validate_non_negative_index("T0check", "ndatapoints", ndatapoints);
            context__.validate_dims("data initialization", "T0check", "int", context__.to_vec(ndatapoints));
            validate_non_negative_index("T0check", "ndatapoints", ndatapoints);
            T0check = std::vector<int>(ndatapoints,int(0));
            vals_i__ = context__.vals_i("T0check");
            pos__ = 0;
            size_t T0check_limit_0__ = ndatapoints;
            for (size_t i_0__ = 0; i_0__ < T0check_limit_0__; ++i_0__) {
                T0check[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 249;
            context__.validate_dims("data initialization", "continuoustime", "int", context__.to_vec());
            continuoustime = int(0);
            vals_i__ = context__.vals_i("continuoustime");
            pos__ = 0;
            continuoustime = vals_i__[pos__++];
            current_statement_begin__ = 250;
            context__.validate_dims("data initialization", "nindvarying", "int", context__.to_vec());
            nindvarying = int(0);
            vals_i__ = context__.vals_i("nindvarying");
            pos__ = 0;
            nindvarying = vals_i__[pos__++];
            current_statement_begin__ = 251;
            context__.validate_dims("data initialization", "nindvaryingoffdiagonals", "int", context__.to_vec());
            nindvaryingoffdiagonals = int(0);
            vals_i__ = context__.vals_i("nindvaryingoffdiagonals");
            pos__ = 0;
            nindvaryingoffdiagonals = vals_i__[pos__++];
            current_statement_begin__ = 252;
            validate_non_negative_index("indvaryingindex", "nindvarying", nindvarying);
            context__.validate_dims("data initialization", "indvaryingindex", "int", context__.to_vec(nindvarying));
            validate_non_negative_index("indvaryingindex", "nindvarying", nindvarying);
            indvaryingindex = std::vector<int>(nindvarying,int(0));
            vals_i__ = context__.vals_i("indvaryingindex");
            pos__ = 0;
            size_t indvaryingindex_limit_0__ = nindvarying;
            for (size_t i_0__ = 0; i_0__ < indvaryingindex_limit_0__; ++i_0__) {
                indvaryingindex[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 253;
            validate_non_negative_index("sdscale", "nindvarying", nindvarying);
            context__.validate_dims("data initialization", "sdscale", "vector_d", context__.to_vec(nindvarying));
            validate_non_negative_index("sdscale", "nindvarying", nindvarying);
            sdscale = vector_d(static_cast<Eigen::VectorXd::Index>(nindvarying));
            vals_r__ = context__.vals_r("sdscale");
            pos__ = 0;
            size_t sdscale_i_vec_lim__ = nindvarying;
            for (size_t i_vec__ = 0; i_vec__ < sdscale_i_vec_lim__; ++i_vec__) {
                sdscale[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 255;
            context__.validate_dims("data initialization", "nt0varstationary", "int", context__.to_vec());
            nt0varstationary = int(0);
            vals_i__ = context__.vals_i("nt0varstationary");
            pos__ = 0;
            nt0varstationary = vals_i__[pos__++];
            current_statement_begin__ = 256;
            context__.validate_dims("data initialization", "nt0meansstationary", "int", context__.to_vec());
            nt0meansstationary = int(0);
            vals_i__ = context__.vals_i("nt0meansstationary");
            pos__ = 0;
            nt0meansstationary = vals_i__[pos__++];
            current_statement_begin__ = 257;
            validate_non_negative_index("t0varstationary", "nt0varstationary", nt0varstationary);
            validate_non_negative_index("t0varstationary", "2", 2);
            context__.validate_dims("data initialization", "t0varstationary", "int", context__.to_vec(nt0varstationary,2));
            validate_non_negative_index("t0varstationary", "nt0varstationary", nt0varstationary);
            validate_non_negative_index("t0varstationary", "2", 2);
            t0varstationary = std::vector<std::vector<int> >(nt0varstationary,std::vector<int>(2,int(0)));
            vals_i__ = context__.vals_i("t0varstationary");
            pos__ = 0;
            size_t t0varstationary_limit_1__ = 2;
            for (size_t i_1__ = 0; i_1__ < t0varstationary_limit_1__; ++i_1__) {
                size_t t0varstationary_limit_0__ = nt0varstationary;
                for (size_t i_0__ = 0; i_0__ < t0varstationary_limit_0__; ++i_0__) {
                    t0varstationary[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 258;
            validate_non_negative_index("t0meansstationary", "nt0meansstationary", nt0meansstationary);
            validate_non_negative_index("t0meansstationary", "2", 2);
            context__.validate_dims("data initialization", "t0meansstationary", "int", context__.to_vec(nt0meansstationary,2));
            validate_non_negative_index("t0meansstationary", "nt0meansstationary", nt0meansstationary);
            validate_non_negative_index("t0meansstationary", "2", 2);
            t0meansstationary = std::vector<std::vector<int> >(nt0meansstationary,std::vector<int>(2,int(0)));
            vals_i__ = context__.vals_i("t0meansstationary");
            pos__ = 0;
            size_t t0meansstationary_limit_1__ = 2;
            for (size_t i_1__ = 0; i_1__ < t0meansstationary_limit_1__; ++i_1__) {
                size_t t0meansstationary_limit_0__ = nt0meansstationary;
                for (size_t i_0__ = 0; i_0__ < t0meansstationary_limit_0__; ++i_0__) {
                    t0meansstationary[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 260;
            validate_non_negative_index("nobs_y", "ndatapoints", ndatapoints);
            context__.validate_dims("data initialization", "nobs_y", "int", context__.to_vec(ndatapoints));
            validate_non_negative_index("nobs_y", "ndatapoints", ndatapoints);
            nobs_y = std::vector<int>(ndatapoints,int(0));
            vals_i__ = context__.vals_i("nobs_y");
            pos__ = 0;
            size_t nobs_y_limit_0__ = ndatapoints;
            for (size_t i_0__ = 0; i_0__ < nobs_y_limit_0__; ++i_0__) {
                nobs_y[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 261;
            validate_non_negative_index("whichobs_y", "ndatapoints", ndatapoints);
            validate_non_negative_index("whichobs_y", "nmanifest", nmanifest);
            context__.validate_dims("data initialization", "whichobs_y", "int", context__.to_vec(ndatapoints,nmanifest));
            validate_non_negative_index("whichobs_y", "ndatapoints", ndatapoints);
            validate_non_negative_index("whichobs_y", "nmanifest", nmanifest);
            whichobs_y = std::vector<std::vector<int> >(ndatapoints,std::vector<int>(nmanifest,int(0)));
            vals_i__ = context__.vals_i("whichobs_y");
            pos__ = 0;
            size_t whichobs_y_limit_1__ = nmanifest;
            for (size_t i_1__ = 0; i_1__ < whichobs_y_limit_1__; ++i_1__) {
                size_t whichobs_y_limit_0__ = ndatapoints;
                for (size_t i_0__ = 0; i_0__ < whichobs_y_limit_0__; ++i_0__) {
                    whichobs_y[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 262;
            context__.validate_dims("data initialization", "ndiffusion", "int", context__.to_vec());
            ndiffusion = int(0);
            vals_i__ = context__.vals_i("ndiffusion");
            pos__ = 0;
            ndiffusion = vals_i__[pos__++];
            current_statement_begin__ = 263;
            validate_non_negative_index("derrind", "ndiffusion", ndiffusion);
            context__.validate_dims("data initialization", "derrind", "int", context__.to_vec(ndiffusion));
            validate_non_negative_index("derrind", "ndiffusion", ndiffusion);
            derrind = std::vector<int>(ndiffusion,int(0));
            vals_i__ = context__.vals_i("derrind");
            pos__ = 0;
            size_t derrind_limit_0__ = ndiffusion;
            for (size_t i_0__ = 0; i_0__ < derrind_limit_0__; ++i_0__) {
                derrind[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 265;
            validate_non_negative_index("manifesttype", "nmanifest", nmanifest);
            context__.validate_dims("data initialization", "manifesttype", "int", context__.to_vec(nmanifest));
            validate_non_negative_index("manifesttype", "nmanifest", nmanifest);
            manifesttype = std::vector<int>(nmanifest,int(0));
            vals_i__ = context__.vals_i("manifesttype");
            pos__ = 0;
            size_t manifesttype_limit_0__ = nmanifest;
            for (size_t i_0__ = 0; i_0__ < manifesttype_limit_0__; ++i_0__) {
                manifesttype[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 266;
            validate_non_negative_index("nbinary_y", "ndatapoints", ndatapoints);
            context__.validate_dims("data initialization", "nbinary_y", "int", context__.to_vec(ndatapoints));
            validate_non_negative_index("nbinary_y", "ndatapoints", ndatapoints);
            nbinary_y = std::vector<int>(ndatapoints,int(0));
            vals_i__ = context__.vals_i("nbinary_y");
            pos__ = 0;
            size_t nbinary_y_limit_0__ = ndatapoints;
            for (size_t i_0__ = 0; i_0__ < nbinary_y_limit_0__; ++i_0__) {
                nbinary_y[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 267;
            validate_non_negative_index("whichbinary_y", "ndatapoints", ndatapoints);
            validate_non_negative_index("whichbinary_y", "nmanifest", nmanifest);
            context__.validate_dims("data initialization", "whichbinary_y", "int", context__.to_vec(ndatapoints,nmanifest));
            validate_non_negative_index("whichbinary_y", "ndatapoints", ndatapoints);
            validate_non_negative_index("whichbinary_y", "nmanifest", nmanifest);
            whichbinary_y = std::vector<std::vector<int> >(ndatapoints,std::vector<int>(nmanifest,int(0)));
            vals_i__ = context__.vals_i("whichbinary_y");
            pos__ = 0;
            size_t whichbinary_y_limit_1__ = nmanifest;
            for (size_t i_1__ = 0; i_1__ < whichbinary_y_limit_1__; ++i_1__) {
                size_t whichbinary_y_limit_0__ = ndatapoints;
                for (size_t i_0__ = 0; i_0__ < whichbinary_y_limit_0__; ++i_0__) {
                    whichbinary_y[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 268;
            validate_non_negative_index("ncont_y", "ndatapoints", ndatapoints);
            context__.validate_dims("data initialization", "ncont_y", "int", context__.to_vec(ndatapoints));
            validate_non_negative_index("ncont_y", "ndatapoints", ndatapoints);
            ncont_y = std::vector<int>(ndatapoints,int(0));
            vals_i__ = context__.vals_i("ncont_y");
            pos__ = 0;
            size_t ncont_y_limit_0__ = ndatapoints;
            for (size_t i_0__ = 0; i_0__ < ncont_y_limit_0__; ++i_0__) {
                ncont_y[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 269;
            validate_non_negative_index("whichcont_y", "ndatapoints", ndatapoints);
            validate_non_negative_index("whichcont_y", "nmanifest", nmanifest);
            context__.validate_dims("data initialization", "whichcont_y", "int", context__.to_vec(ndatapoints,nmanifest));
            validate_non_negative_index("whichcont_y", "ndatapoints", ndatapoints);
            validate_non_negative_index("whichcont_y", "nmanifest", nmanifest);
            whichcont_y = std::vector<std::vector<int> >(ndatapoints,std::vector<int>(nmanifest,int(0)));
            vals_i__ = context__.vals_i("whichcont_y");
            pos__ = 0;
            size_t whichcont_y_limit_1__ = nmanifest;
            for (size_t i_1__ = 0; i_1__ < whichcont_y_limit_1__; ++i_1__) {
                size_t whichcont_y_limit_0__ = ndatapoints;
                for (size_t i_0__ = 0; i_0__ < whichcont_y_limit_0__; ++i_0__) {
                    whichcont_y[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 271;
            context__.validate_dims("data initialization", "ukfpop", "int", context__.to_vec());
            ukfpop = int(0);
            vals_i__ = context__.vals_i("ukfpop");
            pos__ = 0;
            ukfpop = vals_i__[pos__++];
            current_statement_begin__ = 272;
            context__.validate_dims("data initialization", "ukf", "int", context__.to_vec());
            ukf = int(0);
            vals_i__ = context__.vals_i("ukf");
            pos__ = 0;
            ukf = vals_i__[pos__++];
            current_statement_begin__ = 273;
            context__.validate_dims("data initialization", "intoverstates", "int", context__.to_vec());
            intoverstates = int(0);
            vals_i__ = context__.vals_i("intoverstates");
            pos__ = 0;
            intoverstates = vals_i__[pos__++];
            current_statement_begin__ = 274;
            context__.validate_dims("data initialization", "ngenerations", "int", context__.to_vec());
            ngenerations = int(0);
            vals_i__ = context__.vals_i("ngenerations");
            pos__ = 0;
            ngenerations = vals_i__[pos__++];
            current_statement_begin__ = 275;
            context__.validate_dims("data initialization", "verbose", "int", context__.to_vec());
            verbose = int(0);
            vals_i__ = context__.vals_i("verbose");
            pos__ = 0;
            verbose = vals_i__[pos__++];
            current_statement_begin__ = 277;
            validate_non_negative_index("T0MEANSsubindex", "nsubjects", nsubjects);
            context__.validate_dims("data initialization", "T0MEANSsubindex", "int", context__.to_vec(nsubjects));
            validate_non_negative_index("T0MEANSsubindex", "nsubjects", nsubjects);
            T0MEANSsubindex = std::vector<int>(nsubjects,int(0));
            vals_i__ = context__.vals_i("T0MEANSsubindex");
            pos__ = 0;
            size_t T0MEANSsubindex_limit_0__ = nsubjects;
            for (size_t i_0__ = 0; i_0__ < T0MEANSsubindex_limit_0__; ++i_0__) {
                T0MEANSsubindex[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 278;
            validate_non_negative_index("LAMBDAsubindex", "nsubjects", nsubjects);
            context__.validate_dims("data initialization", "LAMBDAsubindex", "int", context__.to_vec(nsubjects));
            validate_non_negative_index("LAMBDAsubindex", "nsubjects", nsubjects);
            LAMBDAsubindex = std::vector<int>(nsubjects,int(0));
            vals_i__ = context__.vals_i("LAMBDAsubindex");
            pos__ = 0;
            size_t LAMBDAsubindex_limit_0__ = nsubjects;
            for (size_t i_0__ = 0; i_0__ < LAMBDAsubindex_limit_0__; ++i_0__) {
                LAMBDAsubindex[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 279;
            validate_non_negative_index("DRIFTsubindex", "nsubjects", nsubjects);
            context__.validate_dims("data initialization", "DRIFTsubindex", "int", context__.to_vec(nsubjects));
            validate_non_negative_index("DRIFTsubindex", "nsubjects", nsubjects);
            DRIFTsubindex = std::vector<int>(nsubjects,int(0));
            vals_i__ = context__.vals_i("DRIFTsubindex");
            pos__ = 0;
            size_t DRIFTsubindex_limit_0__ = nsubjects;
            for (size_t i_0__ = 0; i_0__ < DRIFTsubindex_limit_0__; ++i_0__) {
                DRIFTsubindex[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 280;
            validate_non_negative_index("DIFFUSIONsubindex", "nsubjects", nsubjects);
            context__.validate_dims("data initialization", "DIFFUSIONsubindex", "int", context__.to_vec(nsubjects));
            validate_non_negative_index("DIFFUSIONsubindex", "nsubjects", nsubjects);
            DIFFUSIONsubindex = std::vector<int>(nsubjects,int(0));
            vals_i__ = context__.vals_i("DIFFUSIONsubindex");
            pos__ = 0;
            size_t DIFFUSIONsubindex_limit_0__ = nsubjects;
            for (size_t i_0__ = 0; i_0__ < DIFFUSIONsubindex_limit_0__; ++i_0__) {
                DIFFUSIONsubindex[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 281;
            validate_non_negative_index("MANIFESTVARsubindex", "nsubjects", nsubjects);
            context__.validate_dims("data initialization", "MANIFESTVARsubindex", "int", context__.to_vec(nsubjects));
            validate_non_negative_index("MANIFESTVARsubindex", "nsubjects", nsubjects);
            MANIFESTVARsubindex = std::vector<int>(nsubjects,int(0));
            vals_i__ = context__.vals_i("MANIFESTVARsubindex");
            pos__ = 0;
            size_t MANIFESTVARsubindex_limit_0__ = nsubjects;
            for (size_t i_0__ = 0; i_0__ < MANIFESTVARsubindex_limit_0__; ++i_0__) {
                MANIFESTVARsubindex[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 282;
            validate_non_negative_index("MANIFESTMEANSsubindex", "nsubjects", nsubjects);
            context__.validate_dims("data initialization", "MANIFESTMEANSsubindex", "int", context__.to_vec(nsubjects));
            validate_non_negative_index("MANIFESTMEANSsubindex", "nsubjects", nsubjects);
            MANIFESTMEANSsubindex = std::vector<int>(nsubjects,int(0));
            vals_i__ = context__.vals_i("MANIFESTMEANSsubindex");
            pos__ = 0;
            size_t MANIFESTMEANSsubindex_limit_0__ = nsubjects;
            for (size_t i_0__ = 0; i_0__ < MANIFESTMEANSsubindex_limit_0__; ++i_0__) {
                MANIFESTMEANSsubindex[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 283;
            validate_non_negative_index("CINTsubindex", "nsubjects", nsubjects);
            context__.validate_dims("data initialization", "CINTsubindex", "int", context__.to_vec(nsubjects));
            validate_non_negative_index("CINTsubindex", "nsubjects", nsubjects);
            CINTsubindex = std::vector<int>(nsubjects,int(0));
            vals_i__ = context__.vals_i("CINTsubindex");
            pos__ = 0;
            size_t CINTsubindex_limit_0__ = nsubjects;
            for (size_t i_0__ = 0; i_0__ < CINTsubindex_limit_0__; ++i_0__) {
                CINTsubindex[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 284;
            validate_non_negative_index("T0VARsubindex", "nsubjects", nsubjects);
            context__.validate_dims("data initialization", "T0VARsubindex", "int", context__.to_vec(nsubjects));
            validate_non_negative_index("T0VARsubindex", "nsubjects", nsubjects);
            T0VARsubindex = std::vector<int>(nsubjects,int(0));
            vals_i__ = context__.vals_i("T0VARsubindex");
            pos__ = 0;
            size_t T0VARsubindex_limit_0__ = nsubjects;
            for (size_t i_0__ = 0; i_0__ < T0VARsubindex_limit_0__; ++i_0__) {
                T0VARsubindex[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 285;
            validate_non_negative_index("TDPREDEFFECTsubindex", "nsubjects", nsubjects);
            context__.validate_dims("data initialization", "TDPREDEFFECTsubindex", "int", context__.to_vec(nsubjects));
            validate_non_negative_index("TDPREDEFFECTsubindex", "nsubjects", nsubjects);
            TDPREDEFFECTsubindex = std::vector<int>(nsubjects,int(0));
            vals_i__ = context__.vals_i("TDPREDEFFECTsubindex");
            pos__ = 0;
            size_t TDPREDEFFECTsubindex_limit_0__ = nsubjects;
            for (size_t i_0__ = 0; i_0__ < TDPREDEFFECTsubindex_limit_0__; ++i_0__) {
                TDPREDEFFECTsubindex[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 286;
            validate_non_negative_index("PARSsubindex", "nsubjects", nsubjects);
            context__.validate_dims("data initialization", "PARSsubindex", "int", context__.to_vec(nsubjects));
            validate_non_negative_index("PARSsubindex", "nsubjects", nsubjects);
            PARSsubindex = std::vector<int>(nsubjects,int(0));
            vals_i__ = context__.vals_i("PARSsubindex");
            pos__ = 0;
            size_t PARSsubindex_limit_0__ = nsubjects;
            for (size_t i_0__ = 0; i_0__ < PARSsubindex_limit_0__; ++i_0__) {
                PARSsubindex[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 287;
            validate_non_negative_index("asymCINTsubindex", "nsubjects", nsubjects);
            context__.validate_dims("data initialization", "asymCINTsubindex", "int", context__.to_vec(nsubjects));
            validate_non_negative_index("asymCINTsubindex", "nsubjects", nsubjects);
            asymCINTsubindex = std::vector<int>(nsubjects,int(0));
            vals_i__ = context__.vals_i("asymCINTsubindex");
            pos__ = 0;
            size_t asymCINTsubindex_limit_0__ = nsubjects;
            for (size_t i_0__ = 0; i_0__ < asymCINTsubindex_limit_0__; ++i_0__) {
                asymCINTsubindex[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 288;
            validate_non_negative_index("asymDIFFUSIONsubindex", "nsubjects", nsubjects);
            context__.validate_dims("data initialization", "asymDIFFUSIONsubindex", "int", context__.to_vec(nsubjects));
            validate_non_negative_index("asymDIFFUSIONsubindex", "nsubjects", nsubjects);
            asymDIFFUSIONsubindex = std::vector<int>(nsubjects,int(0));
            vals_i__ = context__.vals_i("asymDIFFUSIONsubindex");
            pos__ = 0;
            size_t asymDIFFUSIONsubindex_limit_0__ = nsubjects;
            for (size_t i_0__ = 0; i_0__ < asymDIFFUSIONsubindex_limit_0__; ++i_0__) {
                asymDIFFUSIONsubindex[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 289;
            context__.validate_dims("data initialization", "T0MEANSsetup_rowcount", "int", context__.to_vec());
            T0MEANSsetup_rowcount = int(0);
            vals_i__ = context__.vals_i("T0MEANSsetup_rowcount");
            pos__ = 0;
            T0MEANSsetup_rowcount = vals_i__[pos__++];
            current_statement_begin__ = 290;
            context__.validate_dims("data initialization", "LAMBDAsetup_rowcount", "int", context__.to_vec());
            LAMBDAsetup_rowcount = int(0);
            vals_i__ = context__.vals_i("LAMBDAsetup_rowcount");
            pos__ = 0;
            LAMBDAsetup_rowcount = vals_i__[pos__++];
            current_statement_begin__ = 291;
            context__.validate_dims("data initialization", "DRIFTsetup_rowcount", "int", context__.to_vec());
            DRIFTsetup_rowcount = int(0);
            vals_i__ = context__.vals_i("DRIFTsetup_rowcount");
            pos__ = 0;
            DRIFTsetup_rowcount = vals_i__[pos__++];
            current_statement_begin__ = 292;
            context__.validate_dims("data initialization", "DIFFUSIONsetup_rowcount", "int", context__.to_vec());
            DIFFUSIONsetup_rowcount = int(0);
            vals_i__ = context__.vals_i("DIFFUSIONsetup_rowcount");
            pos__ = 0;
            DIFFUSIONsetup_rowcount = vals_i__[pos__++];
            current_statement_begin__ = 293;
            context__.validate_dims("data initialization", "MANIFESTVARsetup_rowcount", "int", context__.to_vec());
            MANIFESTVARsetup_rowcount = int(0);
            vals_i__ = context__.vals_i("MANIFESTVARsetup_rowcount");
            pos__ = 0;
            MANIFESTVARsetup_rowcount = vals_i__[pos__++];
            current_statement_begin__ = 294;
            context__.validate_dims("data initialization", "MANIFESTMEANSsetup_rowcount", "int", context__.to_vec());
            MANIFESTMEANSsetup_rowcount = int(0);
            vals_i__ = context__.vals_i("MANIFESTMEANSsetup_rowcount");
            pos__ = 0;
            MANIFESTMEANSsetup_rowcount = vals_i__[pos__++];
            current_statement_begin__ = 295;
            context__.validate_dims("data initialization", "CINTsetup_rowcount", "int", context__.to_vec());
            CINTsetup_rowcount = int(0);
            vals_i__ = context__.vals_i("CINTsetup_rowcount");
            pos__ = 0;
            CINTsetup_rowcount = vals_i__[pos__++];
            current_statement_begin__ = 296;
            context__.validate_dims("data initialization", "T0VARsetup_rowcount", "int", context__.to_vec());
            T0VARsetup_rowcount = int(0);
            vals_i__ = context__.vals_i("T0VARsetup_rowcount");
            pos__ = 0;
            T0VARsetup_rowcount = vals_i__[pos__++];
            current_statement_begin__ = 297;
            context__.validate_dims("data initialization", "TDPREDEFFECTsetup_rowcount", "int", context__.to_vec());
            TDPREDEFFECTsetup_rowcount = int(0);
            vals_i__ = context__.vals_i("TDPREDEFFECTsetup_rowcount");
            pos__ = 0;
            TDPREDEFFECTsetup_rowcount = vals_i__[pos__++];
            current_statement_begin__ = 298;
            context__.validate_dims("data initialization", "PARSsetup_rowcount", "int", context__.to_vec());
            PARSsetup_rowcount = int(0);
            vals_i__ = context__.vals_i("PARSsetup_rowcount");
            pos__ = 0;
            PARSsetup_rowcount = vals_i__[pos__++];
            current_statement_begin__ = 299;
            validate_non_negative_index("T0MEANSsetup", "T0MEANSsetup_rowcount", T0MEANSsetup_rowcount);
            validate_non_negative_index("T0MEANSsetup", "5", 5);
            context__.validate_dims("data initialization", "T0MEANSsetup", "int", context__.to_vec(T0MEANSsetup_rowcount,5));
            validate_non_negative_index("T0MEANSsetup", "T0MEANSsetup_rowcount", T0MEANSsetup_rowcount);
            validate_non_negative_index("T0MEANSsetup", "5", 5);
            T0MEANSsetup = std::vector<std::vector<int> >(T0MEANSsetup_rowcount,std::vector<int>(5,int(0)));
            vals_i__ = context__.vals_i("T0MEANSsetup");
            pos__ = 0;
            size_t T0MEANSsetup_limit_1__ = 5;
            for (size_t i_1__ = 0; i_1__ < T0MEANSsetup_limit_1__; ++i_1__) {
                size_t T0MEANSsetup_limit_0__ = T0MEANSsetup_rowcount;
                for (size_t i_0__ = 0; i_0__ < T0MEANSsetup_limit_0__; ++i_0__) {
                    T0MEANSsetup[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 300;
            validate_non_negative_index("LAMBDAsetup", "LAMBDAsetup_rowcount", LAMBDAsetup_rowcount);
            validate_non_negative_index("LAMBDAsetup", "5", 5);
            context__.validate_dims("data initialization", "LAMBDAsetup", "int", context__.to_vec(LAMBDAsetup_rowcount,5));
            validate_non_negative_index("LAMBDAsetup", "LAMBDAsetup_rowcount", LAMBDAsetup_rowcount);
            validate_non_negative_index("LAMBDAsetup", "5", 5);
            LAMBDAsetup = std::vector<std::vector<int> >(LAMBDAsetup_rowcount,std::vector<int>(5,int(0)));
            vals_i__ = context__.vals_i("LAMBDAsetup");
            pos__ = 0;
            size_t LAMBDAsetup_limit_1__ = 5;
            for (size_t i_1__ = 0; i_1__ < LAMBDAsetup_limit_1__; ++i_1__) {
                size_t LAMBDAsetup_limit_0__ = LAMBDAsetup_rowcount;
                for (size_t i_0__ = 0; i_0__ < LAMBDAsetup_limit_0__; ++i_0__) {
                    LAMBDAsetup[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 301;
            validate_non_negative_index("DRIFTsetup", "DRIFTsetup_rowcount", DRIFTsetup_rowcount);
            validate_non_negative_index("DRIFTsetup", "5", 5);
            context__.validate_dims("data initialization", "DRIFTsetup", "int", context__.to_vec(DRIFTsetup_rowcount,5));
            validate_non_negative_index("DRIFTsetup", "DRIFTsetup_rowcount", DRIFTsetup_rowcount);
            validate_non_negative_index("DRIFTsetup", "5", 5);
            DRIFTsetup = std::vector<std::vector<int> >(DRIFTsetup_rowcount,std::vector<int>(5,int(0)));
            vals_i__ = context__.vals_i("DRIFTsetup");
            pos__ = 0;
            size_t DRIFTsetup_limit_1__ = 5;
            for (size_t i_1__ = 0; i_1__ < DRIFTsetup_limit_1__; ++i_1__) {
                size_t DRIFTsetup_limit_0__ = DRIFTsetup_rowcount;
                for (size_t i_0__ = 0; i_0__ < DRIFTsetup_limit_0__; ++i_0__) {
                    DRIFTsetup[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 302;
            validate_non_negative_index("DIFFUSIONsetup", "DIFFUSIONsetup_rowcount", DIFFUSIONsetup_rowcount);
            validate_non_negative_index("DIFFUSIONsetup", "5", 5);
            context__.validate_dims("data initialization", "DIFFUSIONsetup", "int", context__.to_vec(DIFFUSIONsetup_rowcount,5));
            validate_non_negative_index("DIFFUSIONsetup", "DIFFUSIONsetup_rowcount", DIFFUSIONsetup_rowcount);
            validate_non_negative_index("DIFFUSIONsetup", "5", 5);
            DIFFUSIONsetup = std::vector<std::vector<int> >(DIFFUSIONsetup_rowcount,std::vector<int>(5,int(0)));
            vals_i__ = context__.vals_i("DIFFUSIONsetup");
            pos__ = 0;
            size_t DIFFUSIONsetup_limit_1__ = 5;
            for (size_t i_1__ = 0; i_1__ < DIFFUSIONsetup_limit_1__; ++i_1__) {
                size_t DIFFUSIONsetup_limit_0__ = DIFFUSIONsetup_rowcount;
                for (size_t i_0__ = 0; i_0__ < DIFFUSIONsetup_limit_0__; ++i_0__) {
                    DIFFUSIONsetup[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 303;
            validate_non_negative_index("MANIFESTVARsetup", "MANIFESTVARsetup_rowcount", MANIFESTVARsetup_rowcount);
            validate_non_negative_index("MANIFESTVARsetup", "5", 5);
            context__.validate_dims("data initialization", "MANIFESTVARsetup", "int", context__.to_vec(MANIFESTVARsetup_rowcount,5));
            validate_non_negative_index("MANIFESTVARsetup", "MANIFESTVARsetup_rowcount", MANIFESTVARsetup_rowcount);
            validate_non_negative_index("MANIFESTVARsetup", "5", 5);
            MANIFESTVARsetup = std::vector<std::vector<int> >(MANIFESTVARsetup_rowcount,std::vector<int>(5,int(0)));
            vals_i__ = context__.vals_i("MANIFESTVARsetup");
            pos__ = 0;
            size_t MANIFESTVARsetup_limit_1__ = 5;
            for (size_t i_1__ = 0; i_1__ < MANIFESTVARsetup_limit_1__; ++i_1__) {
                size_t MANIFESTVARsetup_limit_0__ = MANIFESTVARsetup_rowcount;
                for (size_t i_0__ = 0; i_0__ < MANIFESTVARsetup_limit_0__; ++i_0__) {
                    MANIFESTVARsetup[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 304;
            validate_non_negative_index("MANIFESTMEANSsetup", "MANIFESTMEANSsetup_rowcount", MANIFESTMEANSsetup_rowcount);
            validate_non_negative_index("MANIFESTMEANSsetup", "5", 5);
            context__.validate_dims("data initialization", "MANIFESTMEANSsetup", "int", context__.to_vec(MANIFESTMEANSsetup_rowcount,5));
            validate_non_negative_index("MANIFESTMEANSsetup", "MANIFESTMEANSsetup_rowcount", MANIFESTMEANSsetup_rowcount);
            validate_non_negative_index("MANIFESTMEANSsetup", "5", 5);
            MANIFESTMEANSsetup = std::vector<std::vector<int> >(MANIFESTMEANSsetup_rowcount,std::vector<int>(5,int(0)));
            vals_i__ = context__.vals_i("MANIFESTMEANSsetup");
            pos__ = 0;
            size_t MANIFESTMEANSsetup_limit_1__ = 5;
            for (size_t i_1__ = 0; i_1__ < MANIFESTMEANSsetup_limit_1__; ++i_1__) {
                size_t MANIFESTMEANSsetup_limit_0__ = MANIFESTMEANSsetup_rowcount;
                for (size_t i_0__ = 0; i_0__ < MANIFESTMEANSsetup_limit_0__; ++i_0__) {
                    MANIFESTMEANSsetup[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 305;
            validate_non_negative_index("CINTsetup", "CINTsetup_rowcount", CINTsetup_rowcount);
            validate_non_negative_index("CINTsetup", "5", 5);
            context__.validate_dims("data initialization", "CINTsetup", "int", context__.to_vec(CINTsetup_rowcount,5));
            validate_non_negative_index("CINTsetup", "CINTsetup_rowcount", CINTsetup_rowcount);
            validate_non_negative_index("CINTsetup", "5", 5);
            CINTsetup = std::vector<std::vector<int> >(CINTsetup_rowcount,std::vector<int>(5,int(0)));
            vals_i__ = context__.vals_i("CINTsetup");
            pos__ = 0;
            size_t CINTsetup_limit_1__ = 5;
            for (size_t i_1__ = 0; i_1__ < CINTsetup_limit_1__; ++i_1__) {
                size_t CINTsetup_limit_0__ = CINTsetup_rowcount;
                for (size_t i_0__ = 0; i_0__ < CINTsetup_limit_0__; ++i_0__) {
                    CINTsetup[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 306;
            validate_non_negative_index("T0VARsetup", "T0VARsetup_rowcount", T0VARsetup_rowcount);
            validate_non_negative_index("T0VARsetup", "5", 5);
            context__.validate_dims("data initialization", "T0VARsetup", "int", context__.to_vec(T0VARsetup_rowcount,5));
            validate_non_negative_index("T0VARsetup", "T0VARsetup_rowcount", T0VARsetup_rowcount);
            validate_non_negative_index("T0VARsetup", "5", 5);
            T0VARsetup = std::vector<std::vector<int> >(T0VARsetup_rowcount,std::vector<int>(5,int(0)));
            vals_i__ = context__.vals_i("T0VARsetup");
            pos__ = 0;
            size_t T0VARsetup_limit_1__ = 5;
            for (size_t i_1__ = 0; i_1__ < T0VARsetup_limit_1__; ++i_1__) {
                size_t T0VARsetup_limit_0__ = T0VARsetup_rowcount;
                for (size_t i_0__ = 0; i_0__ < T0VARsetup_limit_0__; ++i_0__) {
                    T0VARsetup[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 307;
            validate_non_negative_index("TDPREDEFFECTsetup", "TDPREDEFFECTsetup_rowcount", TDPREDEFFECTsetup_rowcount);
            validate_non_negative_index("TDPREDEFFECTsetup", "5", 5);
            context__.validate_dims("data initialization", "TDPREDEFFECTsetup", "int", context__.to_vec(TDPREDEFFECTsetup_rowcount,5));
            validate_non_negative_index("TDPREDEFFECTsetup", "TDPREDEFFECTsetup_rowcount", TDPREDEFFECTsetup_rowcount);
            validate_non_negative_index("TDPREDEFFECTsetup", "5", 5);
            TDPREDEFFECTsetup = std::vector<std::vector<int> >(TDPREDEFFECTsetup_rowcount,std::vector<int>(5,int(0)));
            vals_i__ = context__.vals_i("TDPREDEFFECTsetup");
            pos__ = 0;
            size_t TDPREDEFFECTsetup_limit_1__ = 5;
            for (size_t i_1__ = 0; i_1__ < TDPREDEFFECTsetup_limit_1__; ++i_1__) {
                size_t TDPREDEFFECTsetup_limit_0__ = TDPREDEFFECTsetup_rowcount;
                for (size_t i_0__ = 0; i_0__ < TDPREDEFFECTsetup_limit_0__; ++i_0__) {
                    TDPREDEFFECTsetup[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 308;
            validate_non_negative_index("PARSsetup", "PARSsetup_rowcount", PARSsetup_rowcount);
            validate_non_negative_index("PARSsetup", "5", 5);
            context__.validate_dims("data initialization", "PARSsetup", "int", context__.to_vec(PARSsetup_rowcount,5));
            validate_non_negative_index("PARSsetup", "PARSsetup_rowcount", PARSsetup_rowcount);
            validate_non_negative_index("PARSsetup", "5", 5);
            PARSsetup = std::vector<std::vector<int> >(PARSsetup_rowcount,std::vector<int>(5,int(0)));
            vals_i__ = context__.vals_i("PARSsetup");
            pos__ = 0;
            size_t PARSsetup_limit_1__ = 5;
            for (size_t i_1__ = 0; i_1__ < PARSsetup_limit_1__; ++i_1__) {
                size_t PARSsetup_limit_0__ = PARSsetup_rowcount;
                for (size_t i_0__ = 0; i_0__ < PARSsetup_limit_0__; ++i_0__) {
                    PARSsetup[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 309;
            validate_non_negative_index("T0MEANSvalues", "T0MEANSsetup_rowcount", T0MEANSsetup_rowcount);
            validate_non_negative_index("T0MEANSvalues", "5", 5);
            context__.validate_dims("data initialization", "T0MEANSvalues", "matrix_d", context__.to_vec(T0MEANSsetup_rowcount,5));
            validate_non_negative_index("T0MEANSvalues", "T0MEANSsetup_rowcount", T0MEANSsetup_rowcount);
            validate_non_negative_index("T0MEANSvalues", "5", 5);
            T0MEANSvalues = matrix_d(static_cast<Eigen::VectorXd::Index>(T0MEANSsetup_rowcount),static_cast<Eigen::VectorXd::Index>(5));
            vals_r__ = context__.vals_r("T0MEANSvalues");
            pos__ = 0;
            size_t T0MEANSvalues_m_mat_lim__ = T0MEANSsetup_rowcount;
            size_t T0MEANSvalues_n_mat_lim__ = 5;
            for (size_t n_mat__ = 0; n_mat__ < T0MEANSvalues_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < T0MEANSvalues_m_mat_lim__; ++m_mat__) {
                    T0MEANSvalues(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 310;
            validate_non_negative_index("LAMBDAvalues", "LAMBDAsetup_rowcount", LAMBDAsetup_rowcount);
            validate_non_negative_index("LAMBDAvalues", "5", 5);
            context__.validate_dims("data initialization", "LAMBDAvalues", "matrix_d", context__.to_vec(LAMBDAsetup_rowcount,5));
            validate_non_negative_index("LAMBDAvalues", "LAMBDAsetup_rowcount", LAMBDAsetup_rowcount);
            validate_non_negative_index("LAMBDAvalues", "5", 5);
            LAMBDAvalues = matrix_d(static_cast<Eigen::VectorXd::Index>(LAMBDAsetup_rowcount),static_cast<Eigen::VectorXd::Index>(5));
            vals_r__ = context__.vals_r("LAMBDAvalues");
            pos__ = 0;
            size_t LAMBDAvalues_m_mat_lim__ = LAMBDAsetup_rowcount;
            size_t LAMBDAvalues_n_mat_lim__ = 5;
            for (size_t n_mat__ = 0; n_mat__ < LAMBDAvalues_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < LAMBDAvalues_m_mat_lim__; ++m_mat__) {
                    LAMBDAvalues(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 311;
            validate_non_negative_index("DRIFTvalues", "DRIFTsetup_rowcount", DRIFTsetup_rowcount);
            validate_non_negative_index("DRIFTvalues", "5", 5);
            context__.validate_dims("data initialization", "DRIFTvalues", "matrix_d", context__.to_vec(DRIFTsetup_rowcount,5));
            validate_non_negative_index("DRIFTvalues", "DRIFTsetup_rowcount", DRIFTsetup_rowcount);
            validate_non_negative_index("DRIFTvalues", "5", 5);
            DRIFTvalues = matrix_d(static_cast<Eigen::VectorXd::Index>(DRIFTsetup_rowcount),static_cast<Eigen::VectorXd::Index>(5));
            vals_r__ = context__.vals_r("DRIFTvalues");
            pos__ = 0;
            size_t DRIFTvalues_m_mat_lim__ = DRIFTsetup_rowcount;
            size_t DRIFTvalues_n_mat_lim__ = 5;
            for (size_t n_mat__ = 0; n_mat__ < DRIFTvalues_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < DRIFTvalues_m_mat_lim__; ++m_mat__) {
                    DRIFTvalues(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 312;
            validate_non_negative_index("DIFFUSIONvalues", "DIFFUSIONsetup_rowcount", DIFFUSIONsetup_rowcount);
            validate_non_negative_index("DIFFUSIONvalues", "5", 5);
            context__.validate_dims("data initialization", "DIFFUSIONvalues", "matrix_d", context__.to_vec(DIFFUSIONsetup_rowcount,5));
            validate_non_negative_index("DIFFUSIONvalues", "DIFFUSIONsetup_rowcount", DIFFUSIONsetup_rowcount);
            validate_non_negative_index("DIFFUSIONvalues", "5", 5);
            DIFFUSIONvalues = matrix_d(static_cast<Eigen::VectorXd::Index>(DIFFUSIONsetup_rowcount),static_cast<Eigen::VectorXd::Index>(5));
            vals_r__ = context__.vals_r("DIFFUSIONvalues");
            pos__ = 0;
            size_t DIFFUSIONvalues_m_mat_lim__ = DIFFUSIONsetup_rowcount;
            size_t DIFFUSIONvalues_n_mat_lim__ = 5;
            for (size_t n_mat__ = 0; n_mat__ < DIFFUSIONvalues_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < DIFFUSIONvalues_m_mat_lim__; ++m_mat__) {
                    DIFFUSIONvalues(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 313;
            validate_non_negative_index("MANIFESTVARvalues", "MANIFESTVARsetup_rowcount", MANIFESTVARsetup_rowcount);
            validate_non_negative_index("MANIFESTVARvalues", "5", 5);
            context__.validate_dims("data initialization", "MANIFESTVARvalues", "matrix_d", context__.to_vec(MANIFESTVARsetup_rowcount,5));
            validate_non_negative_index("MANIFESTVARvalues", "MANIFESTVARsetup_rowcount", MANIFESTVARsetup_rowcount);
            validate_non_negative_index("MANIFESTVARvalues", "5", 5);
            MANIFESTVARvalues = matrix_d(static_cast<Eigen::VectorXd::Index>(MANIFESTVARsetup_rowcount),static_cast<Eigen::VectorXd::Index>(5));
            vals_r__ = context__.vals_r("MANIFESTVARvalues");
            pos__ = 0;
            size_t MANIFESTVARvalues_m_mat_lim__ = MANIFESTVARsetup_rowcount;
            size_t MANIFESTVARvalues_n_mat_lim__ = 5;
            for (size_t n_mat__ = 0; n_mat__ < MANIFESTVARvalues_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < MANIFESTVARvalues_m_mat_lim__; ++m_mat__) {
                    MANIFESTVARvalues(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 314;
            validate_non_negative_index("MANIFESTMEANSvalues", "MANIFESTMEANSsetup_rowcount", MANIFESTMEANSsetup_rowcount);
            validate_non_negative_index("MANIFESTMEANSvalues", "5", 5);
            context__.validate_dims("data initialization", "MANIFESTMEANSvalues", "matrix_d", context__.to_vec(MANIFESTMEANSsetup_rowcount,5));
            validate_non_negative_index("MANIFESTMEANSvalues", "MANIFESTMEANSsetup_rowcount", MANIFESTMEANSsetup_rowcount);
            validate_non_negative_index("MANIFESTMEANSvalues", "5", 5);
            MANIFESTMEANSvalues = matrix_d(static_cast<Eigen::VectorXd::Index>(MANIFESTMEANSsetup_rowcount),static_cast<Eigen::VectorXd::Index>(5));
            vals_r__ = context__.vals_r("MANIFESTMEANSvalues");
            pos__ = 0;
            size_t MANIFESTMEANSvalues_m_mat_lim__ = MANIFESTMEANSsetup_rowcount;
            size_t MANIFESTMEANSvalues_n_mat_lim__ = 5;
            for (size_t n_mat__ = 0; n_mat__ < MANIFESTMEANSvalues_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < MANIFESTMEANSvalues_m_mat_lim__; ++m_mat__) {
                    MANIFESTMEANSvalues(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 315;
            validate_non_negative_index("CINTvalues", "CINTsetup_rowcount", CINTsetup_rowcount);
            validate_non_negative_index("CINTvalues", "5", 5);
            context__.validate_dims("data initialization", "CINTvalues", "matrix_d", context__.to_vec(CINTsetup_rowcount,5));
            validate_non_negative_index("CINTvalues", "CINTsetup_rowcount", CINTsetup_rowcount);
            validate_non_negative_index("CINTvalues", "5", 5);
            CINTvalues = matrix_d(static_cast<Eigen::VectorXd::Index>(CINTsetup_rowcount),static_cast<Eigen::VectorXd::Index>(5));
            vals_r__ = context__.vals_r("CINTvalues");
            pos__ = 0;
            size_t CINTvalues_m_mat_lim__ = CINTsetup_rowcount;
            size_t CINTvalues_n_mat_lim__ = 5;
            for (size_t n_mat__ = 0; n_mat__ < CINTvalues_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < CINTvalues_m_mat_lim__; ++m_mat__) {
                    CINTvalues(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 316;
            validate_non_negative_index("T0VARvalues", "T0VARsetup_rowcount", T0VARsetup_rowcount);
            validate_non_negative_index("T0VARvalues", "5", 5);
            context__.validate_dims("data initialization", "T0VARvalues", "matrix_d", context__.to_vec(T0VARsetup_rowcount,5));
            validate_non_negative_index("T0VARvalues", "T0VARsetup_rowcount", T0VARsetup_rowcount);
            validate_non_negative_index("T0VARvalues", "5", 5);
            T0VARvalues = matrix_d(static_cast<Eigen::VectorXd::Index>(T0VARsetup_rowcount),static_cast<Eigen::VectorXd::Index>(5));
            vals_r__ = context__.vals_r("T0VARvalues");
            pos__ = 0;
            size_t T0VARvalues_m_mat_lim__ = T0VARsetup_rowcount;
            size_t T0VARvalues_n_mat_lim__ = 5;
            for (size_t n_mat__ = 0; n_mat__ < T0VARvalues_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < T0VARvalues_m_mat_lim__; ++m_mat__) {
                    T0VARvalues(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 317;
            validate_non_negative_index("TDPREDEFFECTvalues", "TDPREDEFFECTsetup_rowcount", TDPREDEFFECTsetup_rowcount);
            validate_non_negative_index("TDPREDEFFECTvalues", "5", 5);
            context__.validate_dims("data initialization", "TDPREDEFFECTvalues", "matrix_d", context__.to_vec(TDPREDEFFECTsetup_rowcount,5));
            validate_non_negative_index("TDPREDEFFECTvalues", "TDPREDEFFECTsetup_rowcount", TDPREDEFFECTsetup_rowcount);
            validate_non_negative_index("TDPREDEFFECTvalues", "5", 5);
            TDPREDEFFECTvalues = matrix_d(static_cast<Eigen::VectorXd::Index>(TDPREDEFFECTsetup_rowcount),static_cast<Eigen::VectorXd::Index>(5));
            vals_r__ = context__.vals_r("TDPREDEFFECTvalues");
            pos__ = 0;
            size_t TDPREDEFFECTvalues_m_mat_lim__ = TDPREDEFFECTsetup_rowcount;
            size_t TDPREDEFFECTvalues_n_mat_lim__ = 5;
            for (size_t n_mat__ = 0; n_mat__ < TDPREDEFFECTvalues_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < TDPREDEFFECTvalues_m_mat_lim__; ++m_mat__) {
                    TDPREDEFFECTvalues(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 318;
            validate_non_negative_index("PARSvalues", "PARSsetup_rowcount", PARSsetup_rowcount);
            validate_non_negative_index("PARSvalues", "5", 5);
            context__.validate_dims("data initialization", "PARSvalues", "matrix_d", context__.to_vec(PARSsetup_rowcount,5));
            validate_non_negative_index("PARSvalues", "PARSsetup_rowcount", PARSsetup_rowcount);
            validate_non_negative_index("PARSvalues", "5", 5);
            PARSvalues = matrix_d(static_cast<Eigen::VectorXd::Index>(PARSsetup_rowcount),static_cast<Eigen::VectorXd::Index>(5));
            vals_r__ = context__.vals_r("PARSvalues");
            pos__ = 0;
            size_t PARSvalues_m_mat_lim__ = PARSsetup_rowcount;
            size_t PARSvalues_n_mat_lim__ = 5;
            for (size_t n_mat__ = 0; n_mat__ < PARSvalues_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < PARSvalues_m_mat_lim__; ++m_mat__) {
                    PARSvalues(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 319;
            validate_non_negative_index("TIPREDEFFECTsetup", "nparams", nparams);
            validate_non_negative_index("TIPREDEFFECTsetup", "ntipred", ntipred);
            context__.validate_dims("data initialization", "TIPREDEFFECTsetup", "int", context__.to_vec(nparams,ntipred));
            validate_non_negative_index("TIPREDEFFECTsetup", "nparams", nparams);
            validate_non_negative_index("TIPREDEFFECTsetup", "ntipred", ntipred);
            TIPREDEFFECTsetup = std::vector<std::vector<int> >(nparams,std::vector<int>(ntipred,int(0)));
            vals_i__ = context__.vals_i("TIPREDEFFECTsetup");
            pos__ = 0;
            size_t TIPREDEFFECTsetup_limit_1__ = ntipred;
            for (size_t i_1__ = 0; i_1__ < TIPREDEFFECTsetup_limit_1__; ++i_1__) {
                size_t TIPREDEFFECTsetup_limit_0__ = nparams;
                for (size_t i_0__ = 0; i_0__ < TIPREDEFFECTsetup_limit_0__; ++i_0__) {
                    TIPREDEFFECTsetup[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 320;
            context__.validate_dims("data initialization", "nmatrixslots", "int", context__.to_vec());
            nmatrixslots = int(0);
            vals_i__ = context__.vals_i("nmatrixslots");
            pos__ = 0;
            nmatrixslots = vals_i__[pos__++];
            current_statement_begin__ = 321;
            validate_non_negative_index("popsetup", "nmatrixslots", nmatrixslots);
            validate_non_negative_index("popsetup", "5", 5);
            context__.validate_dims("data initialization", "popsetup", "int", context__.to_vec(nmatrixslots,5));
            validate_non_negative_index("popsetup", "nmatrixslots", nmatrixslots);
            validate_non_negative_index("popsetup", "5", 5);
            popsetup = std::vector<std::vector<int> >(nmatrixslots,std::vector<int>(5,int(0)));
            vals_i__ = context__.vals_i("popsetup");
            pos__ = 0;
            size_t popsetup_limit_1__ = 5;
            for (size_t i_1__ = 0; i_1__ < popsetup_limit_1__; ++i_1__) {
                size_t popsetup_limit_0__ = nmatrixslots;
                for (size_t i_0__ = 0; i_0__ < popsetup_limit_0__; ++i_0__) {
                    popsetup[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 322;
            validate_non_negative_index("popvalues", "nmatrixslots", nmatrixslots);
            validate_non_negative_index("popvalues", "5", 5);
            context__.validate_dims("data initialization", "popvalues", "double", context__.to_vec(nmatrixslots,5));
            validate_non_negative_index("popvalues", "nmatrixslots", nmatrixslots);
            validate_non_negative_index("popvalues", "5", 5);
            popvalues = std::vector<std::vector<double> >(nmatrixslots,std::vector<double>(5,double(0)));
            vals_r__ = context__.vals_r("popvalues");
            pos__ = 0;
            size_t popvalues_limit_1__ = 5;
            for (size_t i_1__ = 0; i_1__ < popvalues_limit_1__; ++i_1__) {
                size_t popvalues_limit_0__ = nmatrixslots;
                for (size_t i_0__ = 0; i_0__ < popvalues_limit_0__; ++i_0__) {
                    popvalues[i_0__][i_1__] = vals_r__[pos__++];
                }
            }

            // validate, data variables
            current_statement_begin__ = 222;
            check_greater_or_equal(function__,"ndatapoints",ndatapoints,0);
            current_statement_begin__ = 223;
            check_greater_or_equal(function__,"nmanifest",nmanifest,1);
            current_statement_begin__ = 224;
            check_greater_or_equal(function__,"nlatent",nlatent,1);
            current_statement_begin__ = 225;
            check_greater_or_equal(function__,"nsubjects",nsubjects,1);
            current_statement_begin__ = 226;
            check_greater_or_equal(function__,"ntipred",ntipred,0);
            current_statement_begin__ = 227;
            check_greater_or_equal(function__,"ntdpred",ntdpred,0);
            current_statement_begin__ = 229;
            current_statement_begin__ = 230;
            current_statement_begin__ = 231;
            current_statement_begin__ = 233;
            current_statement_begin__ = 234;
            current_statement_begin__ = 235;
            current_statement_begin__ = 236;
            current_statement_begin__ = 238;
            current_statement_begin__ = 239;
            current_statement_begin__ = 240;
            current_statement_begin__ = 241;
            current_statement_begin__ = 242;
            current_statement_begin__ = 243;
            current_statement_begin__ = 244;
            current_statement_begin__ = 245;
            current_statement_begin__ = 246;
            current_statement_begin__ = 247;
            check_greater_or_equal(function__,"nparams",nparams,0);
            current_statement_begin__ = 248;
            current_statement_begin__ = 249;
            current_statement_begin__ = 250;
            current_statement_begin__ = 251;
            current_statement_begin__ = 252;
            current_statement_begin__ = 253;
            current_statement_begin__ = 255;
            current_statement_begin__ = 256;
            current_statement_begin__ = 257;
            current_statement_begin__ = 258;
            current_statement_begin__ = 260;
            for (int k0__ = 0; k0__ < ndatapoints; ++k0__) {
                check_greater_or_equal(function__,"nobs_y[k0__]",nobs_y[k0__],0);
                check_less_or_equal(function__,"nobs_y[k0__]",nobs_y[k0__],nmanifest);
            }
            current_statement_begin__ = 261;
            for (int k0__ = 0; k0__ < ndatapoints; ++k0__) {
                for (int k1__ = 0; k1__ < nmanifest; ++k1__) {
                    check_greater_or_equal(function__,"whichobs_y[k0__][k1__]",whichobs_y[k0__][k1__],0);
                    check_less_or_equal(function__,"whichobs_y[k0__][k1__]",whichobs_y[k0__][k1__],nmanifest);
                }
            }
            current_statement_begin__ = 262;
            check_greater_or_equal(function__,"ndiffusion",ndiffusion,0);
            check_less_or_equal(function__,"ndiffusion",ndiffusion,nlatent);
            current_statement_begin__ = 263;
            for (int k0__ = 0; k0__ < ndiffusion; ++k0__) {
                check_greater_or_equal(function__,"derrind[k0__]",derrind[k0__],0);
                check_less_or_equal(function__,"derrind[k0__]",derrind[k0__],nlatent);
            }
            current_statement_begin__ = 265;
            current_statement_begin__ = 266;
            for (int k0__ = 0; k0__ < ndatapoints; ++k0__) {
                check_greater_or_equal(function__,"nbinary_y[k0__]",nbinary_y[k0__],0);
                check_less_or_equal(function__,"nbinary_y[k0__]",nbinary_y[k0__],nmanifest);
            }
            current_statement_begin__ = 267;
            for (int k0__ = 0; k0__ < ndatapoints; ++k0__) {
                for (int k1__ = 0; k1__ < nmanifest; ++k1__) {
                    check_greater_or_equal(function__,"whichbinary_y[k0__][k1__]",whichbinary_y[k0__][k1__],0);
                    check_less_or_equal(function__,"whichbinary_y[k0__][k1__]",whichbinary_y[k0__][k1__],nmanifest);
                }
            }
            current_statement_begin__ = 268;
            for (int k0__ = 0; k0__ < ndatapoints; ++k0__) {
                check_greater_or_equal(function__,"ncont_y[k0__]",ncont_y[k0__],0);
                check_less_or_equal(function__,"ncont_y[k0__]",ncont_y[k0__],nmanifest);
            }
            current_statement_begin__ = 269;
            for (int k0__ = 0; k0__ < ndatapoints; ++k0__) {
                for (int k1__ = 0; k1__ < nmanifest; ++k1__) {
                    check_greater_or_equal(function__,"whichcont_y[k0__][k1__]",whichcont_y[k0__][k1__],0);
                    check_less_or_equal(function__,"whichcont_y[k0__][k1__]",whichcont_y[k0__][k1__],nmanifest);
                }
            }
            current_statement_begin__ = 271;
            current_statement_begin__ = 272;
            current_statement_begin__ = 273;
            current_statement_begin__ = 274;
            current_statement_begin__ = 275;
            current_statement_begin__ = 277;
            current_statement_begin__ = 278;
            current_statement_begin__ = 279;
            current_statement_begin__ = 280;
            current_statement_begin__ = 281;
            current_statement_begin__ = 282;
            current_statement_begin__ = 283;
            current_statement_begin__ = 284;
            current_statement_begin__ = 285;
            current_statement_begin__ = 286;
            current_statement_begin__ = 287;
            current_statement_begin__ = 288;
            current_statement_begin__ = 289;
            current_statement_begin__ = 290;
            current_statement_begin__ = 291;
            current_statement_begin__ = 292;
            current_statement_begin__ = 293;
            current_statement_begin__ = 294;
            current_statement_begin__ = 295;
            current_statement_begin__ = 296;
            current_statement_begin__ = 297;
            current_statement_begin__ = 298;
            current_statement_begin__ = 299;
            current_statement_begin__ = 300;
            current_statement_begin__ = 301;
            current_statement_begin__ = 302;
            current_statement_begin__ = 303;
            current_statement_begin__ = 304;
            current_statement_begin__ = 305;
            current_statement_begin__ = 306;
            current_statement_begin__ = 307;
            current_statement_begin__ = 308;
            current_statement_begin__ = 309;
            current_statement_begin__ = 310;
            current_statement_begin__ = 311;
            current_statement_begin__ = 312;
            current_statement_begin__ = 313;
            current_statement_begin__ = 314;
            current_statement_begin__ = 315;
            current_statement_begin__ = 316;
            current_statement_begin__ = 317;
            current_statement_begin__ = 318;
            current_statement_begin__ = 319;
            current_statement_begin__ = 320;
            current_statement_begin__ = 321;
            current_statement_begin__ = 322;
            // initialize data variables
            current_statement_begin__ = 326;
            validate_non_negative_index("IIlatent", "nlatent", nlatent);
            validate_non_negative_index("IIlatent", "nlatent", nlatent);
            IIlatent = matrix_d(static_cast<Eigen::VectorXd::Index>(nlatent),static_cast<Eigen::VectorXd::Index>(nlatent));
            stan::math::fill(IIlatent,DUMMY_VAR__);
            current_statement_begin__ = 327;
            validate_non_negative_index("IIlatent2", "(nlatent * nlatent)", (nlatent * nlatent));
            validate_non_negative_index("IIlatent2", "(nlatent * nlatent)", (nlatent * nlatent));
            IIlatent2 = matrix_d(static_cast<Eigen::VectorXd::Index>((nlatent * nlatent)),static_cast<Eigen::VectorXd::Index>((nlatent * nlatent)));
            stan::math::fill(IIlatent2,DUMMY_VAR__);
            current_statement_begin__ = 328;
            nlatentpop = int(0);
            stan::math::fill(nlatentpop, std::numeric_limits<int>::min());

            current_statement_begin__ = 330;
            stan::math::assign(nlatentpop, (ukfpop ? (nlatent + nindvarying) : nlatent ));
            current_statement_begin__ = 331;
            stan::math::assign(IIlatent, diag_matrix(rep_vector(1,nlatent)));
            current_statement_begin__ = 332;
            stan::math::assign(IIlatent2, diag_matrix(rep_vector(1,(nlatent * nlatent))));

            // validate transformed data
            current_statement_begin__ = 326;
            current_statement_begin__ = 327;
            current_statement_begin__ = 328;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 336;
            validate_non_negative_index("rawpopmeans", "nparams", nparams);
            num_params_r__ += nparams;
            current_statement_begin__ = 338;
            validate_non_negative_index("rawpopsdbase", "nindvarying", nindvarying);
            num_params_r__ += nindvarying;
            current_statement_begin__ = 339;
            validate_non_negative_index("sqrtpcov", "nindvaryingoffdiagonals", nindvaryingoffdiagonals);
            num_params_r__ += nindvaryingoffdiagonals;
            current_statement_begin__ = 340;
            validate_non_negative_index("baseindparams", "(ukfpop ? 0 : (nindvarying * nsubjects) )", (ukfpop ? 0 : (nindvarying * nsubjects) ));
            num_params_r__ += (ukfpop ? 0 : (nindvarying * nsubjects) );
            current_statement_begin__ = 342;
            validate_non_negative_index("tipredeffectparams", "ntipredeffects", ntipredeffects);
            num_params_r__ += ntipredeffects;
            current_statement_begin__ = 343;
            validate_non_negative_index("tipredsimputed", "nmissingtipreds", nmissingtipreds);
            num_params_r__ += nmissingtipreds;
            current_statement_begin__ = 345;
            validate_non_negative_index("etaupdbasestates", "(intoverstates ? 0 : (nlatent * ndatapoints) )", (intoverstates ? 0 : (nlatent * ndatapoints) ));
            num_params_r__ += (intoverstates ? 0 : (nlatent * ndatapoints) );
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_ctsm() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("rawpopmeans")))
            throw std::runtime_error("variable rawpopmeans missing");
        vals_r__ = context__.vals_r("rawpopmeans");
        pos__ = 0U;
        validate_non_negative_index("rawpopmeans", "nparams", nparams);
        context__.validate_dims("initialization", "rawpopmeans", "vector_d", context__.to_vec(nparams));
        vector_d rawpopmeans(static_cast<Eigen::VectorXd::Index>(nparams));
        for (int j1__ = 0U; j1__ < nparams; ++j1__)
            rawpopmeans(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(rawpopmeans);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable rawpopmeans: ") + e.what());
        }

        if (!(context__.contains_r("rawpopsdbase")))
            throw std::runtime_error("variable rawpopsdbase missing");
        vals_r__ = context__.vals_r("rawpopsdbase");
        pos__ = 0U;
        validate_non_negative_index("rawpopsdbase", "nindvarying", nindvarying);
        context__.validate_dims("initialization", "rawpopsdbase", "vector_d", context__.to_vec(nindvarying));
        vector_d rawpopsdbase(static_cast<Eigen::VectorXd::Index>(nindvarying));
        for (int j1__ = 0U; j1__ < nindvarying; ++j1__)
            rawpopsdbase(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(rawpopsdbase);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable rawpopsdbase: ") + e.what());
        }

        if (!(context__.contains_r("sqrtpcov")))
            throw std::runtime_error("variable sqrtpcov missing");
        vals_r__ = context__.vals_r("sqrtpcov");
        pos__ = 0U;
        validate_non_negative_index("sqrtpcov", "nindvaryingoffdiagonals", nindvaryingoffdiagonals);
        context__.validate_dims("initialization", "sqrtpcov", "vector_d", context__.to_vec(nindvaryingoffdiagonals));
        vector_d sqrtpcov(static_cast<Eigen::VectorXd::Index>(nindvaryingoffdiagonals));
        for (int j1__ = 0U; j1__ < nindvaryingoffdiagonals; ++j1__)
            sqrtpcov(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(sqrtpcov);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sqrtpcov: ") + e.what());
        }

        if (!(context__.contains_r("baseindparams")))
            throw std::runtime_error("variable baseindparams missing");
        vals_r__ = context__.vals_r("baseindparams");
        pos__ = 0U;
        validate_non_negative_index("baseindparams", "(ukfpop ? 0 : (nindvarying * nsubjects) )", (ukfpop ? 0 : (nindvarying * nsubjects) ));
        context__.validate_dims("initialization", "baseindparams", "vector_d", context__.to_vec((ukfpop ? 0 : (nindvarying * nsubjects) )));
        vector_d baseindparams(static_cast<Eigen::VectorXd::Index>((ukfpop ? 0 : (nindvarying * nsubjects) )));
        for (int j1__ = 0U; j1__ < (ukfpop ? 0 : (nindvarying * nsubjects) ); ++j1__)
            baseindparams(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(baseindparams);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable baseindparams: ") + e.what());
        }

        if (!(context__.contains_r("tipredeffectparams")))
            throw std::runtime_error("variable tipredeffectparams missing");
        vals_r__ = context__.vals_r("tipredeffectparams");
        pos__ = 0U;
        validate_non_negative_index("tipredeffectparams", "ntipredeffects", ntipredeffects);
        context__.validate_dims("initialization", "tipredeffectparams", "vector_d", context__.to_vec(ntipredeffects));
        vector_d tipredeffectparams(static_cast<Eigen::VectorXd::Index>(ntipredeffects));
        for (int j1__ = 0U; j1__ < ntipredeffects; ++j1__)
            tipredeffectparams(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(tipredeffectparams);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tipredeffectparams: ") + e.what());
        }

        if (!(context__.contains_r("tipredsimputed")))
            throw std::runtime_error("variable tipredsimputed missing");
        vals_r__ = context__.vals_r("tipredsimputed");
        pos__ = 0U;
        validate_non_negative_index("tipredsimputed", "nmissingtipreds", nmissingtipreds);
        context__.validate_dims("initialization", "tipredsimputed", "vector_d", context__.to_vec(nmissingtipreds));
        vector_d tipredsimputed(static_cast<Eigen::VectorXd::Index>(nmissingtipreds));
        for (int j1__ = 0U; j1__ < nmissingtipreds; ++j1__)
            tipredsimputed(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(tipredsimputed);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tipredsimputed: ") + e.what());
        }

        if (!(context__.contains_r("etaupdbasestates")))
            throw std::runtime_error("variable etaupdbasestates missing");
        vals_r__ = context__.vals_r("etaupdbasestates");
        pos__ = 0U;
        validate_non_negative_index("etaupdbasestates", "(intoverstates ? 0 : (nlatent * ndatapoints) )", (intoverstates ? 0 : (nlatent * ndatapoints) ));
        context__.validate_dims("initialization", "etaupdbasestates", "vector_d", context__.to_vec((intoverstates ? 0 : (nlatent * ndatapoints) )));
        vector_d etaupdbasestates(static_cast<Eigen::VectorXd::Index>((intoverstates ? 0 : (nlatent * ndatapoints) )));
        for (int j1__ = 0U; j1__ < (intoverstates ? 0 : (nlatent * ndatapoints) ); ++j1__)
            etaupdbasestates(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(etaupdbasestates);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable etaupdbasestates: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<T__> in__(params_r__,params_i__);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  rawpopmeans;
            (void) rawpopmeans;  // dummy to suppress unused var warning
            if (jacobian__)
                rawpopmeans = in__.vector_constrain(nparams,lp__);
            else
                rawpopmeans = in__.vector_constrain(nparams);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  rawpopsdbase;
            (void) rawpopsdbase;  // dummy to suppress unused var warning
            if (jacobian__)
                rawpopsdbase = in__.vector_constrain(nindvarying,lp__);
            else
                rawpopsdbase = in__.vector_constrain(nindvarying);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  sqrtpcov;
            (void) sqrtpcov;  // dummy to suppress unused var warning
            if (jacobian__)
                sqrtpcov = in__.vector_constrain(nindvaryingoffdiagonals,lp__);
            else
                sqrtpcov = in__.vector_constrain(nindvaryingoffdiagonals);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  baseindparams;
            (void) baseindparams;  // dummy to suppress unused var warning
            if (jacobian__)
                baseindparams = in__.vector_constrain((ukfpop ? 0 : (nindvarying * nsubjects) ),lp__);
            else
                baseindparams = in__.vector_constrain((ukfpop ? 0 : (nindvarying * nsubjects) ));

            Eigen::Matrix<T__,Eigen::Dynamic,1>  tipredeffectparams;
            (void) tipredeffectparams;  // dummy to suppress unused var warning
            if (jacobian__)
                tipredeffectparams = in__.vector_constrain(ntipredeffects,lp__);
            else
                tipredeffectparams = in__.vector_constrain(ntipredeffects);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  tipredsimputed;
            (void) tipredsimputed;  // dummy to suppress unused var warning
            if (jacobian__)
                tipredsimputed = in__.vector_constrain(nmissingtipreds,lp__);
            else
                tipredsimputed = in__.vector_constrain(nmissingtipreds);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  etaupdbasestates;
            (void) etaupdbasestates;  // dummy to suppress unused var warning
            if (jacobian__)
                etaupdbasestates = in__.vector_constrain((intoverstates ? 0 : (nlatent * ndatapoints) ),lp__);
            else
                etaupdbasestates = in__.vector_constrain((intoverstates ? 0 : (nlatent * ndatapoints) ));


            // transformed parameters
            current_statement_begin__ = 351;
            validate_non_negative_index("rawpopsd", "nindvarying", nindvarying);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  rawpopsd(static_cast<Eigen::VectorXd::Index>(nindvarying));
            (void) rawpopsd;  // dummy to suppress unused var warning

            stan::math::initialize(rawpopsd, DUMMY_VAR__);
            stan::math::fill(rawpopsd,DUMMY_VAR__);
            current_statement_begin__ = 353;
            validate_non_negative_index("rawpopcorrsqrt", "nindvarying", nindvarying);
            validate_non_negative_index("rawpopcorrsqrt", "nindvarying", nindvarying);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  rawpopcorrsqrt(static_cast<Eigen::VectorXd::Index>(nindvarying),static_cast<Eigen::VectorXd::Index>(nindvarying));
            (void) rawpopcorrsqrt;  // dummy to suppress unused var warning

            stan::math::initialize(rawpopcorrsqrt, DUMMY_VAR__);
            stan::math::fill(rawpopcorrsqrt,DUMMY_VAR__);
            current_statement_begin__ = 354;
            validate_non_negative_index("rawpopcovsqrt", "nindvarying", nindvarying);
            validate_non_negative_index("rawpopcovsqrt", "nindvarying", nindvarying);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  rawpopcovsqrt(static_cast<Eigen::VectorXd::Index>(nindvarying),static_cast<Eigen::VectorXd::Index>(nindvarying));
            (void) rawpopcovsqrt;  // dummy to suppress unused var warning

            stan::math::initialize(rawpopcovsqrt, DUMMY_VAR__);
            stan::math::fill(rawpopcovsqrt,DUMMY_VAR__);
            current_statement_begin__ = 357;
            validate_non_negative_index("T0MEANS", "(T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"T0MEANSsetup\")) : 0 )", (T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 ));
            validate_non_negative_index("T0MEANS", "(T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"T0MEANSsetup\")) : 0 )", (T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 ));
            validate_non_negative_index("T0MEANS", "get_base1(T0MEANSsubindex,nsubjects,\"T0MEANSsubindex\",1)", get_base1(T0MEANSsubindex,nsubjects,"T0MEANSsubindex",1));
            vector<Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> > T0MEANS(get_base1(T0MEANSsubindex,nsubjects,"T0MEANSsubindex",1), (Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>((T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 )))));
            stan::math::initialize(T0MEANS, DUMMY_VAR__);
            stan::math::fill(T0MEANS,DUMMY_VAR__);
            current_statement_begin__ = 358;
            validate_non_negative_index("LAMBDA", "(LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"LAMBDAsetup\")) : 0 )", (LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 ));
            validate_non_negative_index("LAMBDA", "(LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"LAMBDAsetup\")) : 0 )", (LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 ));
            validate_non_negative_index("LAMBDA", "get_base1(LAMBDAsubindex,nsubjects,\"LAMBDAsubindex\",1)", get_base1(LAMBDAsubindex,nsubjects,"LAMBDAsubindex",1));
            vector<Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> > LAMBDA(get_base1(LAMBDAsubindex,nsubjects,"LAMBDAsubindex",1), (Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>((LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 )))));
            stan::math::initialize(LAMBDA, DUMMY_VAR__);
            stan::math::fill(LAMBDA,DUMMY_VAR__);
            current_statement_begin__ = 359;
            validate_non_negative_index("DRIFT", "(DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"DRIFTsetup\")) : 0 )", (DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DRIFTsetup")) : 0 ));
            validate_non_negative_index("DRIFT", "(DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"DRIFTsetup\")) : 0 )", (DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DRIFTsetup")) : 0 ));
            validate_non_negative_index("DRIFT", "get_base1(DRIFTsubindex,nsubjects,\"DRIFTsubindex\",1)", get_base1(DRIFTsubindex,nsubjects,"DRIFTsubindex",1));
            vector<Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> > DRIFT(get_base1(DRIFTsubindex,nsubjects,"DRIFTsubindex",1), (Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>((DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DRIFTsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DRIFTsetup")) : 0 )))));
            stan::math::initialize(DRIFT, DUMMY_VAR__);
            stan::math::fill(DRIFT,DUMMY_VAR__);
            current_statement_begin__ = 360;
            validate_non_negative_index("DIFFUSION", "(DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"DIFFUSIONsetup\")) : 0 )", (DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 ));
            validate_non_negative_index("DIFFUSION", "(DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"DIFFUSIONsetup\")) : 0 )", (DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 ));
            validate_non_negative_index("DIFFUSION", "get_base1(DIFFUSIONsubindex,nsubjects,\"DIFFUSIONsubindex\",1)", get_base1(DIFFUSIONsubindex,nsubjects,"DIFFUSIONsubindex",1));
            vector<Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> > DIFFUSION(get_base1(DIFFUSIONsubindex,nsubjects,"DIFFUSIONsubindex",1), (Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>((DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 )))));
            stan::math::initialize(DIFFUSION, DUMMY_VAR__);
            stan::math::fill(DIFFUSION,DUMMY_VAR__);
            current_statement_begin__ = 361;
            validate_non_negative_index("MANIFESTVAR", "(MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"MANIFESTVARsetup\")) : 0 )", (MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 ));
            validate_non_negative_index("MANIFESTVAR", "(MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"MANIFESTVARsetup\")) : 0 )", (MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 ));
            validate_non_negative_index("MANIFESTVAR", "get_base1(MANIFESTVARsubindex,nsubjects,\"MANIFESTVARsubindex\",1)", get_base1(MANIFESTVARsubindex,nsubjects,"MANIFESTVARsubindex",1));
            vector<Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> > MANIFESTVAR(get_base1(MANIFESTVARsubindex,nsubjects,"MANIFESTVARsubindex",1), (Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>((MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 )))));
            stan::math::initialize(MANIFESTVAR, DUMMY_VAR__);
            stan::math::fill(MANIFESTVAR,DUMMY_VAR__);
            current_statement_begin__ = 362;
            validate_non_negative_index("MANIFESTMEANS", "(MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"MANIFESTMEANSsetup\")) : 0 )", (MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 ));
            validate_non_negative_index("MANIFESTMEANS", "(MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"MANIFESTMEANSsetup\")) : 0 )", (MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 ));
            validate_non_negative_index("MANIFESTMEANS", "get_base1(MANIFESTMEANSsubindex,nsubjects,\"MANIFESTMEANSsubindex\",1)", get_base1(MANIFESTMEANSsubindex,nsubjects,"MANIFESTMEANSsubindex",1));
            vector<Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> > MANIFESTMEANS(get_base1(MANIFESTMEANSsubindex,nsubjects,"MANIFESTMEANSsubindex",1), (Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>((MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 )))));
            stan::math::initialize(MANIFESTMEANS, DUMMY_VAR__);
            stan::math::fill(MANIFESTMEANS,DUMMY_VAR__);
            current_statement_begin__ = 363;
            validate_non_negative_index("CINT", "(CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"CINTsetup\")) : 0 )", (CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "CINTsetup")) : 0 ));
            validate_non_negative_index("CINT", "(CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"CINTsetup\")) : 0 )", (CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "CINTsetup")) : 0 ));
            validate_non_negative_index("CINT", "get_base1(CINTsubindex,nsubjects,\"CINTsubindex\",1)", get_base1(CINTsubindex,nsubjects,"CINTsubindex",1));
            vector<Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> > CINT(get_base1(CINTsubindex,nsubjects,"CINTsubindex",1), (Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>((CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "CINTsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "CINTsetup")) : 0 )))));
            stan::math::initialize(CINT, DUMMY_VAR__);
            stan::math::fill(CINT,DUMMY_VAR__);
            current_statement_begin__ = 364;
            validate_non_negative_index("T0VAR", "(T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"T0VARsetup\")) : 0 )", (T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0VARsetup")) : 0 ));
            validate_non_negative_index("T0VAR", "(T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"T0VARsetup\")) : 0 )", (T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0VARsetup")) : 0 ));
            validate_non_negative_index("T0VAR", "get_base1(T0VARsubindex,nsubjects,\"T0VARsubindex\",1)", get_base1(T0VARsubindex,nsubjects,"T0VARsubindex",1));
            vector<Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> > T0VAR(get_base1(T0VARsubindex,nsubjects,"T0VARsubindex",1), (Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>((T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0VARsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0VARsetup")) : 0 )))));
            stan::math::initialize(T0VAR, DUMMY_VAR__);
            stan::math::fill(T0VAR,DUMMY_VAR__);
            current_statement_begin__ = 365;
            validate_non_negative_index("TDPREDEFFECT", "(TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"TDPREDEFFECTsetup\")) : 0 )", (TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 ));
            validate_non_negative_index("TDPREDEFFECT", "(TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"TDPREDEFFECTsetup\")) : 0 )", (TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 ));
            validate_non_negative_index("TDPREDEFFECT", "get_base1(TDPREDEFFECTsubindex,nsubjects,\"TDPREDEFFECTsubindex\",1)", get_base1(TDPREDEFFECTsubindex,nsubjects,"TDPREDEFFECTsubindex",1));
            vector<Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> > TDPREDEFFECT(get_base1(TDPREDEFFECTsubindex,nsubjects,"TDPREDEFFECTsubindex",1), (Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>((TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 )))));
            stan::math::initialize(TDPREDEFFECT, DUMMY_VAR__);
            stan::math::fill(TDPREDEFFECT,DUMMY_VAR__);
            current_statement_begin__ = 366;
            validate_non_negative_index("PARS", "(PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"PARSsetup\")) : 0 )", (PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "PARSsetup")) : 0 ));
            validate_non_negative_index("PARS", "(PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"PARSsetup\")) : 0 )", (PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "PARSsetup")) : 0 ));
            validate_non_negative_index("PARS", "get_base1(PARSsubindex,nsubjects,\"PARSsubindex\",1)", get_base1(PARSsubindex,nsubjects,"PARSsubindex",1));
            vector<Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> > PARS(get_base1(PARSsubindex,nsubjects,"PARSsubindex",1), (Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>((PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "PARSsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "PARSsetup")) : 0 )))));
            stan::math::initialize(PARS, DUMMY_VAR__);
            stan::math::fill(PARS,DUMMY_VAR__);
            current_statement_begin__ = 368;
            validate_non_negative_index("asymDIFFUSION", "nlatent", nlatent);
            validate_non_negative_index("asymDIFFUSION", "nlatent", nlatent);
            validate_non_negative_index("asymDIFFUSION", "get_base1(asymDIFFUSIONsubindex,nsubjects,\"asymDIFFUSIONsubindex\",1)", get_base1(asymDIFFUSIONsubindex,nsubjects,"asymDIFFUSIONsubindex",1));
            vector<Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> > asymDIFFUSION(get_base1(asymDIFFUSIONsubindex,nsubjects,"asymDIFFUSIONsubindex",1), (Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nlatent),static_cast<Eigen::VectorXd::Index>(nlatent))));
            stan::math::initialize(asymDIFFUSION, DUMMY_VAR__);
            stan::math::fill(asymDIFFUSION,DUMMY_VAR__);
            current_statement_begin__ = 369;
            validate_non_negative_index("asymCINT", "(nt0meansstationary ? nlatent : 0 )", (nt0meansstationary ? nlatent : 0 ));
            validate_non_negative_index("asymCINT", "get_base1(asymCINTsubindex,nsubjects,\"asymCINTsubindex\",1)", get_base1(asymCINTsubindex,nsubjects,"asymCINTsubindex",1));
            vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > asymCINT(get_base1(asymCINTsubindex,nsubjects,"asymCINTsubindex",1), (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>((nt0meansstationary ? nlatent : 0 )))));
            stan::math::initialize(asymCINT, DUMMY_VAR__);
            stan::math::fill(asymCINT,DUMMY_VAR__);
            current_statement_begin__ = 371;
            validate_non_negative_index("tipreds", "(ntipred ? nsubjects : 0 )", (ntipred ? nsubjects : 0 ));
            validate_non_negative_index("tipreds", "(ntipred ? ntipred : 0 )", (ntipred ? ntipred : 0 ));
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  tipreds(static_cast<Eigen::VectorXd::Index>((ntipred ? nsubjects : 0 )),static_cast<Eigen::VectorXd::Index>((ntipred ? ntipred : 0 )));
            (void) tipreds;  // dummy to suppress unused var warning

            stan::math::initialize(tipreds, DUMMY_VAR__);
            stan::math::fill(tipreds,DUMMY_VAR__);
            current_statement_begin__ = 372;
            validate_non_negative_index("TIPREDEFFECT", "nparams", nparams);
            validate_non_negative_index("TIPREDEFFECT", "ntipred", ntipred);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  TIPREDEFFECT(static_cast<Eigen::VectorXd::Index>(nparams),static_cast<Eigen::VectorXd::Index>(ntipred));
            (void) TIPREDEFFECT;  // dummy to suppress unused var warning

            stan::math::initialize(TIPREDEFFECT, DUMMY_VAR__);
            stan::math::fill(TIPREDEFFECT,DUMMY_VAR__);


            current_statement_begin__ = 374;
            if (as_bool(logical_gt(ntipred,0))) {

                {
                current_statement_begin__ = 376;
                int counter(0);
                (void) counter;  // dummy to suppress unused var warning

                stan::math::fill(counter, std::numeric_limits<int>::min());


                current_statement_begin__ = 377;
                stan::math::assign(counter, 0);
                current_statement_begin__ = 378;
                for (int coli = 1; coli <= cols(tipreds); ++coli) {

                    current_statement_begin__ = 379;
                    for (int rowi = 1; rowi <= rows(tipreds); ++rowi) {

                        current_statement_begin__ = 380;
                        if (as_bool(logical_eq(get_base1(tipredsdata,rowi,coli,"tipredsdata",1),99999))) {

                            current_statement_begin__ = 381;
                            stan::math::assign(counter, (counter + 1));
                            current_statement_begin__ = 382;
                            stan::math::assign(get_base1_lhs(tipreds,rowi,coli,"tipreds",1), get_base1(tipredsimputed,counter,"tipredsimputed",1));
                        } else {
                            current_statement_begin__ = 383;
                            stan::math::assign(get_base1_lhs(tipreds,rowi,coli,"tipreds",1), get_base1(tipredsdata,rowi,coli,"tipredsdata",1));
                        }
                    }
                }
                }
                current_statement_begin__ = 387;
                for (int ci = 1; ci <= ntipred; ++ci) {

                    current_statement_begin__ = 388;
                    for (int ri = 1; ri <= nparams; ++ri) {

                        current_statement_begin__ = 389;
                        if (as_bool(logical_gt(get_base1(get_base1(TIPREDEFFECTsetup,ri,"TIPREDEFFECTsetup",1),ci,"TIPREDEFFECTsetup",2),0))) {

                            current_statement_begin__ = 390;
                            stan::math::assign(get_base1_lhs(TIPREDEFFECT,ri,ci,"TIPREDEFFECT",1), get_base1(tipredeffectparams,get_base1(get_base1(TIPREDEFFECTsetup,ri,"TIPREDEFFECTsetup",1),ci,"TIPREDEFFECTsetup",2),"tipredeffectparams",1));
                        } else {

                            current_statement_begin__ = 392;
                            stan::math::assign(get_base1_lhs(TIPREDEFFECT,ri,ci,"TIPREDEFFECT",1), 0);
                        }
                    }
                }
            }
            current_statement_begin__ = 398;
            if (as_bool(logical_gt(nindvarying,0))) {
                {
                current_statement_begin__ = 399;
                int counter(0);
                (void) counter;  // dummy to suppress unused var warning

                stan::math::fill(counter, std::numeric_limits<int>::min());


                current_statement_begin__ = 400;
                stan::math::assign(rawpopsd, elt_multiply(exp(subtract(multiply(rawpopsdbase,2),2)),sdscale));
                current_statement_begin__ = 401;
                stan::math::assign(counter, 0);
                current_statement_begin__ = 402;
                for (int j = 1; j <= nindvarying; ++j) {

                    current_statement_begin__ = 403;
                    stan::math::assign(get_base1_lhs(rawpopcovsqrt,j,j,"rawpopcovsqrt",1), 1);
                    current_statement_begin__ = 404;
                    for (int i = 1; i <= nindvarying; ++i) {

                        current_statement_begin__ = 405;
                        if (as_bool(logical_gt(i,j))) {

                            current_statement_begin__ = 406;
                            stan::math::assign(counter, (counter + 1));
                            current_statement_begin__ = 407;
                            stan::math::assign(get_base1_lhs(rawpopcovsqrt,i,j,"rawpopcovsqrt",1), get_base1(sqrtpcov,counter,"sqrtpcov",1));
                            current_statement_begin__ = 408;
                            stan::math::assign(get_base1_lhs(rawpopcovsqrt,j,i,"rawpopcovsqrt",1), get_base1(sqrtpcov,counter,"sqrtpcov",1));
                        }
                    }
                }
                current_statement_begin__ = 412;
                stan::math::assign(rawpopcorrsqrt, covsqrt2corsqrt(rawpopcovsqrt,0, pstream__));
                current_statement_begin__ = 414;
                stan::math::assign(rawpopcovsqrt, diag_pre_multiply(rawpopsd,rawpopcorrsqrt));
                }
            }
            {
            current_statement_begin__ = 418;
            validate_non_negative_index("rawindparams", "nparams", nparams);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  rawindparams(static_cast<Eigen::VectorXd::Index>(nparams));
            (void) rawindparams;  // dummy to suppress unused var warning

            stan::math::initialize(rawindparams, DUMMY_VAR__);
            stan::math::fill(rawindparams,DUMMY_VAR__);
            current_statement_begin__ = 419;
            validate_non_negative_index("tipredaddition", "nparams", nparams);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  tipredaddition(static_cast<Eigen::VectorXd::Index>(nparams));
            (void) tipredaddition;  // dummy to suppress unused var warning

            stan::math::initialize(tipredaddition, DUMMY_VAR__);
            stan::math::fill(tipredaddition,DUMMY_VAR__);
            current_statement_begin__ = 420;
            validate_non_negative_index("indvaraddition", "nparams", nparams);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  indvaraddition(static_cast<Eigen::VectorXd::Index>(nparams));
            (void) indvaraddition;  // dummy to suppress unused var warning

            stan::math::initialize(indvaraddition, DUMMY_VAR__);
            stan::math::fill(indvaraddition,DUMMY_VAR__);


            current_statement_begin__ = 421;
            stan::math::assign(rawindparams, rawpopmeans);
            current_statement_begin__ = 422;
            stan::math::assign(tipredaddition, rep_vector(0,nparams));
            current_statement_begin__ = 423;
            stan::math::assign(indvaraddition, rep_vector(0,nparams));
            current_statement_begin__ = 425;
            for (int si = 1; si <= nsubjects; ++si) {

                current_statement_begin__ = 428;
                if (as_bool((primitive_value(logical_gt(nindvarying,0)) && primitive_value(logical_eq(ukfpop,0))))) {
                    current_statement_begin__ = 428;
                    stan::model::assign(indvaraddition, 
                                stan::model::cons_list(stan::model::index_multi(indvaryingindex), stan::model::nil_index_list()), 
                                multiply(rawpopcovsqrt,stan::model::rvalue(baseindparams, stan::model::cons_list(stan::model::index_min_max((1 + ((si - 1) * nindvarying)), (si * nindvarying)), stan::model::nil_index_list()), "baseindparams")), 
                                "assigning variable indvaraddition");
                }
                current_statement_begin__ = 430;
                if (as_bool(logical_gt(ntipred,0))) {
                    current_statement_begin__ = 430;
                    stan::math::assign(tipredaddition, multiply(TIPREDEFFECT,transpose(get_base1(tipreds,si,"tipreds",1))));
                }
                current_statement_begin__ = 432;
                stan::math::assign(rawindparams, add(add(rawpopmeans,tipredaddition),indvaraddition));
                current_statement_begin__ = 434;
                if (as_bool(logical_lte(si,get_base1(T0MEANSsubindex,nsubjects,"T0MEANSsubindex",1)))) {

                    current_statement_begin__ = 435;
                    for (int ri = 1; ri <= size(T0MEANSsetup); ++ri) {

                        current_statement_begin__ = 436;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(T0MEANS,si,"T0MEANS",1),get_base1(get_base1(T0MEANSsetup,ri,"T0MEANSsetup",1),1,"T0MEANSsetup",2),get_base1(get_base1(T0MEANSsetup,ri,"T0MEANSsetup",1),2,"T0MEANSsetup",2),"T0MEANS",2), (get_base1(get_base1(T0MEANSsetup,ri,"T0MEANSsetup",1),3,"T0MEANSsetup",2) ? stan::math::promote_scalar<T__>(tform(get_base1(rawindparams,get_base1(get_base1(T0MEANSsetup,ri,"T0MEANSsetup",1),3,"T0MEANSsetup",2),"rawindparams",1),get_base1(get_base1(T0MEANSsetup,ri,"T0MEANSsetup",1),4,"T0MEANSsetup",2),get_base1(T0MEANSvalues,ri,2,"T0MEANSvalues",1),get_base1(T0MEANSvalues,ri,3,"T0MEANSvalues",1),get_base1(T0MEANSvalues,ri,4,"T0MEANSvalues",1), pstream__)) : stan::math::promote_scalar<T__>(get_base1(T0MEANSvalues,ri,1,"T0MEANSvalues",1)) ));
                    }
                }
                current_statement_begin__ = 441;
                if (as_bool(logical_lte(si,get_base1(LAMBDAsubindex,nsubjects,"LAMBDAsubindex",1)))) {

                    current_statement_begin__ = 442;
                    for (int ri = 1; ri <= size(LAMBDAsetup); ++ri) {

                        current_statement_begin__ = 443;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(LAMBDA,si,"LAMBDA",1),get_base1(get_base1(LAMBDAsetup,ri,"LAMBDAsetup",1),1,"LAMBDAsetup",2),get_base1(get_base1(LAMBDAsetup,ri,"LAMBDAsetup",1),2,"LAMBDAsetup",2),"LAMBDA",2), (get_base1(get_base1(LAMBDAsetup,ri,"LAMBDAsetup",1),3,"LAMBDAsetup",2) ? stan::math::promote_scalar<T__>(tform(get_base1(rawindparams,get_base1(get_base1(LAMBDAsetup,ri,"LAMBDAsetup",1),3,"LAMBDAsetup",2),"rawindparams",1),get_base1(get_base1(LAMBDAsetup,ri,"LAMBDAsetup",1),4,"LAMBDAsetup",2),get_base1(LAMBDAvalues,ri,2,"LAMBDAvalues",1),get_base1(LAMBDAvalues,ri,3,"LAMBDAvalues",1),get_base1(LAMBDAvalues,ri,4,"LAMBDAvalues",1), pstream__)) : stan::math::promote_scalar<T__>(get_base1(LAMBDAvalues,ri,1,"LAMBDAvalues",1)) ));
                    }
                }
                current_statement_begin__ = 448;
                if (as_bool(logical_lte(si,get_base1(DRIFTsubindex,nsubjects,"DRIFTsubindex",1)))) {

                    current_statement_begin__ = 449;
                    for (int ri = 1; ri <= size(DRIFTsetup); ++ri) {

                        current_statement_begin__ = 450;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(DRIFT,si,"DRIFT",1),get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),1,"DRIFTsetup",2),get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),2,"DRIFTsetup",2),"DRIFT",2), (get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),3,"DRIFTsetup",2) ? stan::math::promote_scalar<T__>(tform(get_base1(rawindparams,get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),3,"DRIFTsetup",2),"rawindparams",1),get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),4,"DRIFTsetup",2),get_base1(DRIFTvalues,ri,2,"DRIFTvalues",1),get_base1(DRIFTvalues,ri,3,"DRIFTvalues",1),get_base1(DRIFTvalues,ri,4,"DRIFTvalues",1), pstream__)) : stan::math::promote_scalar<T__>(get_base1(DRIFTvalues,ri,1,"DRIFTvalues",1)) ));
                    }
                }
                current_statement_begin__ = 455;
                if (as_bool(logical_lte(si,get_base1(DIFFUSIONsubindex,nsubjects,"DIFFUSIONsubindex",1)))) {

                    current_statement_begin__ = 456;
                    for (int ri = 1; ri <= size(DIFFUSIONsetup); ++ri) {

                        current_statement_begin__ = 457;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(DIFFUSION,si,"DIFFUSION",1),get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),1,"DIFFUSIONsetup",2),get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),2,"DIFFUSIONsetup",2),"DIFFUSION",2), (get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),3,"DIFFUSIONsetup",2) ? stan::math::promote_scalar<T__>(tform(get_base1(rawindparams,get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),3,"DIFFUSIONsetup",2),"rawindparams",1),get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),4,"DIFFUSIONsetup",2),get_base1(DIFFUSIONvalues,ri,2,"DIFFUSIONvalues",1),get_base1(DIFFUSIONvalues,ri,3,"DIFFUSIONvalues",1),get_base1(DIFFUSIONvalues,ri,4,"DIFFUSIONvalues",1), pstream__)) : stan::math::promote_scalar<T__>(get_base1(DIFFUSIONvalues,ri,1,"DIFFUSIONvalues",1)) ));
                    }
                }
                current_statement_begin__ = 462;
                if (as_bool(logical_lte(si,get_base1(MANIFESTVARsubindex,nsubjects,"MANIFESTVARsubindex",1)))) {

                    current_statement_begin__ = 463;
                    for (int ri = 1; ri <= size(MANIFESTVARsetup); ++ri) {

                        current_statement_begin__ = 464;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(MANIFESTVAR,si,"MANIFESTVAR",1),get_base1(get_base1(MANIFESTVARsetup,ri,"MANIFESTVARsetup",1),1,"MANIFESTVARsetup",2),get_base1(get_base1(MANIFESTVARsetup,ri,"MANIFESTVARsetup",1),2,"MANIFESTVARsetup",2),"MANIFESTVAR",2), (get_base1(get_base1(MANIFESTVARsetup,ri,"MANIFESTVARsetup",1),3,"MANIFESTVARsetup",2) ? stan::math::promote_scalar<T__>(tform(get_base1(rawindparams,get_base1(get_base1(MANIFESTVARsetup,ri,"MANIFESTVARsetup",1),3,"MANIFESTVARsetup",2),"rawindparams",1),get_base1(get_base1(MANIFESTVARsetup,ri,"MANIFESTVARsetup",1),4,"MANIFESTVARsetup",2),get_base1(MANIFESTVARvalues,ri,2,"MANIFESTVARvalues",1),get_base1(MANIFESTVARvalues,ri,3,"MANIFESTVARvalues",1),get_base1(MANIFESTVARvalues,ri,4,"MANIFESTVARvalues",1), pstream__)) : stan::math::promote_scalar<T__>(get_base1(MANIFESTVARvalues,ri,1,"MANIFESTVARvalues",1)) ));
                    }
                }
                current_statement_begin__ = 469;
                if (as_bool(logical_lte(si,get_base1(MANIFESTMEANSsubindex,nsubjects,"MANIFESTMEANSsubindex",1)))) {

                    current_statement_begin__ = 470;
                    for (int ri = 1; ri <= size(MANIFESTMEANSsetup); ++ri) {

                        current_statement_begin__ = 471;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(MANIFESTMEANS,si,"MANIFESTMEANS",1),get_base1(get_base1(MANIFESTMEANSsetup,ri,"MANIFESTMEANSsetup",1),1,"MANIFESTMEANSsetup",2),get_base1(get_base1(MANIFESTMEANSsetup,ri,"MANIFESTMEANSsetup",1),2,"MANIFESTMEANSsetup",2),"MANIFESTMEANS",2), (get_base1(get_base1(MANIFESTMEANSsetup,ri,"MANIFESTMEANSsetup",1),3,"MANIFESTMEANSsetup",2) ? stan::math::promote_scalar<T__>(tform(get_base1(rawindparams,get_base1(get_base1(MANIFESTMEANSsetup,ri,"MANIFESTMEANSsetup",1),3,"MANIFESTMEANSsetup",2),"rawindparams",1),get_base1(get_base1(MANIFESTMEANSsetup,ri,"MANIFESTMEANSsetup",1),4,"MANIFESTMEANSsetup",2),get_base1(MANIFESTMEANSvalues,ri,2,"MANIFESTMEANSvalues",1),get_base1(MANIFESTMEANSvalues,ri,3,"MANIFESTMEANSvalues",1),get_base1(MANIFESTMEANSvalues,ri,4,"MANIFESTMEANSvalues",1), pstream__)) : stan::math::promote_scalar<T__>(get_base1(MANIFESTMEANSvalues,ri,1,"MANIFESTMEANSvalues",1)) ));
                    }
                }
                current_statement_begin__ = 476;
                if (as_bool(logical_lte(si,get_base1(CINTsubindex,nsubjects,"CINTsubindex",1)))) {

                    current_statement_begin__ = 477;
                    for (int ri = 1; ri <= size(CINTsetup); ++ri) {

                        current_statement_begin__ = 478;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(CINT,si,"CINT",1),get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),1,"CINTsetup",2),get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),2,"CINTsetup",2),"CINT",2), (get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),3,"CINTsetup",2) ? stan::math::promote_scalar<T__>(tform(get_base1(rawindparams,get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),3,"CINTsetup",2),"rawindparams",1),get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),4,"CINTsetup",2),get_base1(CINTvalues,ri,2,"CINTvalues",1),get_base1(CINTvalues,ri,3,"CINTvalues",1),get_base1(CINTvalues,ri,4,"CINTvalues",1), pstream__)) : stan::math::promote_scalar<T__>(get_base1(CINTvalues,ri,1,"CINTvalues",1)) ));
                    }
                }
                current_statement_begin__ = 483;
                if (as_bool(logical_lte(si,get_base1(T0VARsubindex,nsubjects,"T0VARsubindex",1)))) {

                    current_statement_begin__ = 484;
                    for (int ri = 1; ri <= size(T0VARsetup); ++ri) {

                        current_statement_begin__ = 485;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(T0VAR,si,"T0VAR",1),get_base1(get_base1(T0VARsetup,ri,"T0VARsetup",1),1,"T0VARsetup",2),get_base1(get_base1(T0VARsetup,ri,"T0VARsetup",1),2,"T0VARsetup",2),"T0VAR",2), (get_base1(get_base1(T0VARsetup,ri,"T0VARsetup",1),3,"T0VARsetup",2) ? stan::math::promote_scalar<T__>(tform(get_base1(rawindparams,get_base1(get_base1(T0VARsetup,ri,"T0VARsetup",1),3,"T0VARsetup",2),"rawindparams",1),get_base1(get_base1(T0VARsetup,ri,"T0VARsetup",1),4,"T0VARsetup",2),get_base1(T0VARvalues,ri,2,"T0VARvalues",1),get_base1(T0VARvalues,ri,3,"T0VARvalues",1),get_base1(T0VARvalues,ri,4,"T0VARvalues",1), pstream__)) : stan::math::promote_scalar<T__>(get_base1(T0VARvalues,ri,1,"T0VARvalues",1)) ));
                    }
                }
                current_statement_begin__ = 490;
                if (as_bool(logical_lte(si,get_base1(TDPREDEFFECTsubindex,nsubjects,"TDPREDEFFECTsubindex",1)))) {

                    current_statement_begin__ = 491;
                    for (int ri = 1; ri <= size(TDPREDEFFECTsetup); ++ri) {

                        current_statement_begin__ = 492;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(TDPREDEFFECT,si,"TDPREDEFFECT",1),get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),1,"TDPREDEFFECTsetup",2),get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),2,"TDPREDEFFECTsetup",2),"TDPREDEFFECT",2), (get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),3,"TDPREDEFFECTsetup",2) ? stan::math::promote_scalar<T__>(tform(get_base1(rawindparams,get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),3,"TDPREDEFFECTsetup",2),"rawindparams",1),get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),4,"TDPREDEFFECTsetup",2),get_base1(TDPREDEFFECTvalues,ri,2,"TDPREDEFFECTvalues",1),get_base1(TDPREDEFFECTvalues,ri,3,"TDPREDEFFECTvalues",1),get_base1(TDPREDEFFECTvalues,ri,4,"TDPREDEFFECTvalues",1), pstream__)) : stan::math::promote_scalar<T__>(get_base1(TDPREDEFFECTvalues,ri,1,"TDPREDEFFECTvalues",1)) ));
                    }
                }
                current_statement_begin__ = 497;
                if (as_bool(logical_lte(si,get_base1(PARSsubindex,nsubjects,"PARSsubindex",1)))) {

                    current_statement_begin__ = 498;
                    for (int ri = 1; ri <= size(PARSsetup); ++ri) {

                        current_statement_begin__ = 499;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(PARS,si,"PARS",1),get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),1,"PARSsetup",2),get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),2,"PARSsetup",2),"PARS",2), (get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),3,"PARSsetup",2) ? stan::math::promote_scalar<T__>(tform(get_base1(rawindparams,get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),3,"PARSsetup",2),"rawindparams",1),get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),4,"PARSsetup",2),get_base1(PARSvalues,ri,2,"PARSvalues",1),get_base1(PARSvalues,ri,3,"PARSvalues",1),get_base1(PARSvalues,ri,4,"PARSvalues",1), pstream__)) : stan::math::promote_scalar<T__>(get_base1(PARSvalues,ri,1,"PARSvalues",1)) ));
                    }
                }
                current_statement_begin__ = 507;
                if (as_bool((primitive_value(logical_lte(si,get_base1(DIFFUSIONsubindex,nsubjects,"DIFFUSIONsubindex",1))) && primitive_value(logical_neq((lineardynamics * intoverstates),0))))) {
                    current_statement_begin__ = 507;
                    stan::math::assign(get_base1_lhs(DIFFUSION,si,"DIFFUSION",1), sdcovsqrt2cov(get_base1(DIFFUSION,si,"DIFFUSION",1),0, pstream__));
                }
                current_statement_begin__ = 509;
                if (as_bool(logical_lte(si,get_base1(asymDIFFUSIONsubindex,nsubjects,"asymDIFFUSIONsubindex",1)))) {

                    current_statement_begin__ = 510;
                    if (as_bool(logical_lt(ndiffusion,nlatent))) {
                        current_statement_begin__ = 510;
                        stan::math::assign(get_base1_lhs(asymDIFFUSION,si,"asymDIFFUSION",1), to_matrix(rep_vector(0,(nlatent * nlatent)),nlatent,nlatent));
                    }
                    current_statement_begin__ = 512;
                    if (as_bool(logical_eq(continuoustime,1))) {
                        current_statement_begin__ = 512;
                        stan::model::assign(asymDIFFUSION, 
                                    stan::model::cons_list(stan::model::index_uni(si), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list()))), 
                                    to_matrix(mdivide_left(minus(add(kron_prod(stan::model::rvalue(DRIFT, stan::model::cons_list(stan::model::index_uni(get_base1(DRIFTsubindex,si,"DRIFTsubindex",1)), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list()))), "DRIFT"),stan::model::rvalue(IIlatent, stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list())), "IIlatent"), pstream__),kron_prod(stan::model::rvalue(IIlatent, stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list())), "IIlatent"),stan::model::rvalue(DRIFT, stan::model::cons_list(stan::model::index_uni(get_base1(DRIFTsubindex,si,"DRIFTsubindex",1)), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list()))), "DRIFT"), pstream__))),to_vector(stan::model::rvalue(DIFFUSION, stan::model::cons_list(stan::model::index_uni(get_base1(DIFFUSIONsubindex,si,"DIFFUSIONsubindex",1)), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list()))), "DIFFUSION"))),ndiffusion,ndiffusion), 
                                    "assigning variable asymDIFFUSION");
                    }
                    current_statement_begin__ = 517;
                    if (as_bool(logical_eq(continuoustime,0))) {
                        current_statement_begin__ = 517;
                        stan::model::assign(asymDIFFUSION, 
                                    stan::model::cons_list(stan::model::index_uni(si), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list()))), 
                                    to_matrix(multiply(subtract(stan::model::rvalue(IIlatent2, stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list())), "IIlatent2"),kron_prod(stan::model::rvalue(DRIFT, stan::model::cons_list(stan::model::index_uni(get_base1(DRIFTsubindex,si,"DRIFTsubindex",1)), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list()))), "DRIFT"),stan::model::rvalue(DRIFT, stan::model::cons_list(stan::model::index_uni(get_base1(DRIFTsubindex,si,"DRIFTsubindex",1)), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list()))), "DRIFT"), pstream__)),to_vector(stan::model::rvalue(DIFFUSION, stan::model::cons_list(stan::model::index_uni(get_base1(DIFFUSIONsubindex,si,"DIFFUSIONsubindex",1)), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list()))), "DIFFUSION"))),ndiffusion,ndiffusion), 
                                    "assigning variable asymDIFFUSION");
                    }
                }
                current_statement_begin__ = 523;
                if (as_bool(logical_gt(nt0meansstationary,0))) {

                    current_statement_begin__ = 524;
                    if (as_bool(logical_lte(si,get_base1(asymCINTsubindex,nsubjects,"asymCINTsubindex",1)))) {

                        current_statement_begin__ = 525;
                        if (as_bool(logical_eq(continuoustime,1))) {
                            current_statement_begin__ = 525;
                            stan::math::assign(get_base1_lhs(asymCINT,si,"asymCINT",1), mdivide_left(minus(get_base1(DRIFT,get_base1(DRIFTsubindex,si,"DRIFTsubindex",1),"DRIFT",1)),stan::model::rvalue(CINT, stan::model::cons_list(stan::model::index_uni(get_base1(CINTsubindex,si,"CINTsubindex",1)), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), "CINT")));
                        }
                        current_statement_begin__ = 526;
                        if (as_bool(logical_eq(continuoustime,0))) {
                            current_statement_begin__ = 526;
                            stan::math::assign(get_base1_lhs(asymCINT,si,"asymCINT",1), mdivide_left(subtract(IIlatent,get_base1(DRIFT,get_base1(DRIFTsubindex,si,"DRIFTsubindex",1),"DRIFT",1)),stan::model::rvalue(CINT, stan::model::cons_list(stan::model::index_uni(get_base1(CINTsubindex,si,"CINTsubindex",1)), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), "CINT")));
                        }
                    }
                }
                current_statement_begin__ = 531;
                if (as_bool(logical_eq(binomial,0))) {

                    current_statement_begin__ = 532;
                    if (as_bool(logical_lte(si,get_base1(MANIFESTVARsubindex,nsubjects,"MANIFESTVARsubindex",1)))) {

                        current_statement_begin__ = 533;
                        for (int ri = 1; ri <= nmanifest; ++ri) {
                            current_statement_begin__ = 533;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(MANIFESTVAR,si,"MANIFESTVAR",1),ri,ri,"MANIFESTVAR",2), square(get_base1(get_base1(MANIFESTVAR,si,"MANIFESTVAR",1),ri,ri,"MANIFESTVAR",2)));
                        }
                    }
                }
                current_statement_begin__ = 538;
                if (as_bool(logical_lte(si,get_base1(T0VARsubindex,nsubjects,"T0VARsubindex",1)))) {

                    current_statement_begin__ = 539;
                    if (as_bool(logical_neq((lineardynamics * intoverstates),0))) {
                        current_statement_begin__ = 539;
                        stan::math::assign(get_base1_lhs(T0VAR,si,"T0VAR",1), sdcovsqrt2cov(get_base1(T0VAR,si,"T0VAR",1),0, pstream__));
                    }
                    current_statement_begin__ = 540;
                    if (as_bool(logical_gt(nt0varstationary,0))) {
                        current_statement_begin__ = 540;
                        for (int rowi = 1; rowi <= nt0varstationary; ++rowi) {

                            current_statement_begin__ = 541;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(T0VAR,si,"T0VAR",1),get_base1(get_base1(t0varstationary,rowi,"t0varstationary",1),1,"t0varstationary",2),get_base1(get_base1(t0varstationary,rowi,"t0varstationary",1),2,"t0varstationary",2),"T0VAR",2), get_base1(get_base1(asymDIFFUSION,si,"asymDIFFUSION",1),get_base1(get_base1(t0varstationary,rowi,"t0varstationary",1),1,"t0varstationary",2),get_base1(get_base1(t0varstationary,rowi,"t0varstationary",1),2,"t0varstationary",2),"asymDIFFUSION",2));
                            current_statement_begin__ = 543;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(T0VAR,si,"T0VAR",1),get_base1(get_base1(t0varstationary,rowi,"t0varstationary",1),2,"t0varstationary",2),get_base1(get_base1(t0varstationary,rowi,"t0varstationary",1),1,"t0varstationary",2),"T0VAR",2), get_base1(get_base1(asymDIFFUSION,si,"asymDIFFUSION",1),get_base1(get_base1(t0varstationary,rowi,"t0varstationary",1),2,"t0varstationary",2),get_base1(get_base1(t0varstationary,rowi,"t0varstationary",1),1,"t0varstationary",2),"asymDIFFUSION",2));
                        }
                    }
                }
                current_statement_begin__ = 549;
                if (as_bool(logical_gt(nt0meansstationary,0))) {

                    current_statement_begin__ = 550;
                    if (as_bool(logical_lte(si,get_base1(T0MEANSsubindex,nsubjects,"T0MEANSsubindex",1)))) {

                        current_statement_begin__ = 551;
                        for (int rowi = 1; rowi <= nt0meansstationary; ++rowi) {

                            current_statement_begin__ = 552;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(T0MEANS,si,"T0MEANS",1),get_base1(get_base1(t0meansstationary,rowi,"t0meansstationary",1),1,"t0meansstationary",2),1,"T0MEANS",2), get_base1(get_base1(asymCINT,get_base1(asymCINTsubindex,si,"asymCINTsubindex",1),"asymCINT",1),get_base1(get_base1(t0meansstationary,rowi,"t0meansstationary",1),1,"t0meansstationary",2),"asymCINT",2));
                        }
                    }
                }
            }
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < nindvarying; ++i0__) {
                if (stan::math::is_uninitialized(rawpopsd(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: rawpopsd" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < nindvarying; ++i0__) {
                for (int i1__ = 0; i1__ < nindvarying; ++i1__) {
                    if (stan::math::is_uninitialized(rawpopcorrsqrt(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: rawpopcorrsqrt" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < nindvarying; ++i0__) {
                for (int i1__ = 0; i1__ < nindvarying; ++i1__) {
                    if (stan::math::is_uninitialized(rawpopcovsqrt(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: rawpopcovsqrt" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < get_base1(T0MEANSsubindex,nsubjects,"T0MEANSsubindex",1); ++i0__) {
                for (int i1__ = 0; i1__ < (T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 ); ++i1__) {
                    for (int i2__ = 0; i2__ < (T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 ); ++i2__) {
                        if (stan::math::is_uninitialized(T0MEANS[i0__](i1__,i2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: T0MEANS" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                            throw std::runtime_error(msg__.str());
                        }
                    }
                }
            }
            for (int i0__ = 0; i0__ < get_base1(LAMBDAsubindex,nsubjects,"LAMBDAsubindex",1); ++i0__) {
                for (int i1__ = 0; i1__ < (LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 ); ++i1__) {
                    for (int i2__ = 0; i2__ < (LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 ); ++i2__) {
                        if (stan::math::is_uninitialized(LAMBDA[i0__](i1__,i2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: LAMBDA" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                            throw std::runtime_error(msg__.str());
                        }
                    }
                }
            }
            for (int i0__ = 0; i0__ < get_base1(DRIFTsubindex,nsubjects,"DRIFTsubindex",1); ++i0__) {
                for (int i1__ = 0; i1__ < (DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DRIFTsetup")) : 0 ); ++i1__) {
                    for (int i2__ = 0; i2__ < (DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DRIFTsetup")) : 0 ); ++i2__) {
                        if (stan::math::is_uninitialized(DRIFT[i0__](i1__,i2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: DRIFT" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                            throw std::runtime_error(msg__.str());
                        }
                    }
                }
            }
            for (int i0__ = 0; i0__ < get_base1(DIFFUSIONsubindex,nsubjects,"DIFFUSIONsubindex",1); ++i0__) {
                for (int i1__ = 0; i1__ < (DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 ); ++i1__) {
                    for (int i2__ = 0; i2__ < (DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 ); ++i2__) {
                        if (stan::math::is_uninitialized(DIFFUSION[i0__](i1__,i2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: DIFFUSION" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                            throw std::runtime_error(msg__.str());
                        }
                    }
                }
            }
            for (int i0__ = 0; i0__ < get_base1(MANIFESTVARsubindex,nsubjects,"MANIFESTVARsubindex",1); ++i0__) {
                for (int i1__ = 0; i1__ < (MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 ); ++i1__) {
                    for (int i2__ = 0; i2__ < (MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 ); ++i2__) {
                        if (stan::math::is_uninitialized(MANIFESTVAR[i0__](i1__,i2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: MANIFESTVAR" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                            throw std::runtime_error(msg__.str());
                        }
                    }
                }
            }
            for (int i0__ = 0; i0__ < get_base1(MANIFESTMEANSsubindex,nsubjects,"MANIFESTMEANSsubindex",1); ++i0__) {
                for (int i1__ = 0; i1__ < (MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 ); ++i1__) {
                    for (int i2__ = 0; i2__ < (MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 ); ++i2__) {
                        if (stan::math::is_uninitialized(MANIFESTMEANS[i0__](i1__,i2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: MANIFESTMEANS" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                            throw std::runtime_error(msg__.str());
                        }
                    }
                }
            }
            for (int i0__ = 0; i0__ < get_base1(CINTsubindex,nsubjects,"CINTsubindex",1); ++i0__) {
                for (int i1__ = 0; i1__ < (CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "CINTsetup")) : 0 ); ++i1__) {
                    for (int i2__ = 0; i2__ < (CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "CINTsetup")) : 0 ); ++i2__) {
                        if (stan::math::is_uninitialized(CINT[i0__](i1__,i2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: CINT" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                            throw std::runtime_error(msg__.str());
                        }
                    }
                }
            }
            for (int i0__ = 0; i0__ < get_base1(T0VARsubindex,nsubjects,"T0VARsubindex",1); ++i0__) {
                for (int i1__ = 0; i1__ < (T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0VARsetup")) : 0 ); ++i1__) {
                    for (int i2__ = 0; i2__ < (T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0VARsetup")) : 0 ); ++i2__) {
                        if (stan::math::is_uninitialized(T0VAR[i0__](i1__,i2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: T0VAR" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                            throw std::runtime_error(msg__.str());
                        }
                    }
                }
            }
            for (int i0__ = 0; i0__ < get_base1(TDPREDEFFECTsubindex,nsubjects,"TDPREDEFFECTsubindex",1); ++i0__) {
                for (int i1__ = 0; i1__ < (TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 ); ++i1__) {
                    for (int i2__ = 0; i2__ < (TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 ); ++i2__) {
                        if (stan::math::is_uninitialized(TDPREDEFFECT[i0__](i1__,i2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: TDPREDEFFECT" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                            throw std::runtime_error(msg__.str());
                        }
                    }
                }
            }
            for (int i0__ = 0; i0__ < get_base1(PARSsubindex,nsubjects,"PARSsubindex",1); ++i0__) {
                for (int i1__ = 0; i1__ < (PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "PARSsetup")) : 0 ); ++i1__) {
                    for (int i2__ = 0; i2__ < (PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "PARSsetup")) : 0 ); ++i2__) {
                        if (stan::math::is_uninitialized(PARS[i0__](i1__,i2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: PARS" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                            throw std::runtime_error(msg__.str());
                        }
                    }
                }
            }
            for (int i0__ = 0; i0__ < get_base1(asymDIFFUSIONsubindex,nsubjects,"asymDIFFUSIONsubindex",1); ++i0__) {
                for (int i1__ = 0; i1__ < nlatent; ++i1__) {
                    for (int i2__ = 0; i2__ < nlatent; ++i2__) {
                        if (stan::math::is_uninitialized(asymDIFFUSION[i0__](i1__,i2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: asymDIFFUSION" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                            throw std::runtime_error(msg__.str());
                        }
                    }
                }
            }
            for (int i0__ = 0; i0__ < get_base1(asymCINTsubindex,nsubjects,"asymCINTsubindex",1); ++i0__) {
                for (int i1__ = 0; i1__ < (nt0meansstationary ? nlatent : 0 ); ++i1__) {
                    if (stan::math::is_uninitialized(asymCINT[i0__](i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: asymCINT" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < (ntipred ? nsubjects : 0 ); ++i0__) {
                for (int i1__ = 0; i1__ < (ntipred ? ntipred : 0 ); ++i1__) {
                    if (stan::math::is_uninitialized(tipreds(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: tipreds" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < nparams; ++i0__) {
                for (int i1__ = 0; i1__ < ntipred; ++i1__) {
                    if (stan::math::is_uninitialized(TIPREDEFFECT(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: TIPREDEFFECT" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 351;
            current_statement_begin__ = 353;
            current_statement_begin__ = 354;
            current_statement_begin__ = 357;
            current_statement_begin__ = 358;
            current_statement_begin__ = 359;
            current_statement_begin__ = 360;
            current_statement_begin__ = 361;
            current_statement_begin__ = 362;
            current_statement_begin__ = 363;
            current_statement_begin__ = 364;
            current_statement_begin__ = 365;
            current_statement_begin__ = 366;
            current_statement_begin__ = 368;
            current_statement_begin__ = 369;
            current_statement_begin__ = 371;
            current_statement_begin__ = 372;

            // model body
            {
            current_statement_begin__ = 564;
            T__ ll;
            (void) ll;  // dummy to suppress unused var warning

            stan::math::initialize(ll, DUMMY_VAR__);
            stan::math::fill(ll,DUMMY_VAR__);


            current_statement_begin__ = 566;
            if (as_bool(logical_eq(nopriors,0))) {

                current_statement_begin__ = 567;
                lp_accum__.add(normal_log(rawpopmeans,0,1));
                current_statement_begin__ = 569;
                if (as_bool(logical_gt(ntipred,0))) {

                    current_statement_begin__ = 570;
                    lp_accum__.add(normal_log<propto__>(tipredeffectparams, 0, 1));
                    current_statement_begin__ = 571;
                    lp_accum__.add(normal_log<propto__>(tipredsimputed, 0, 10));
                }
                current_statement_begin__ = 574;
                if (as_bool(logical_gt(nindvarying,0))) {

                    current_statement_begin__ = 575;
                    if (as_bool(logical_gt(nindvarying,1))) {
                        current_statement_begin__ = 575;
                        lp_accum__.add(normal_log<propto__>(sqrtpcov, 0, 1));
                    }
                    current_statement_begin__ = 576;
                    if (as_bool(logical_eq(ukfpop,0))) {
                        current_statement_begin__ = 576;
                        lp_accum__.add(normal_log<propto__>(baseindparams, 0, 1));
                    }
                    current_statement_begin__ = 577;
                    lp_accum__.add(normal_log<propto__>(rawpopsdbase, 0, 1));
                }
            }
            current_statement_begin__ = 582;
            if (as_bool(logical_eq(intoverstates,0))) {
                current_statement_begin__ = 582;
                lp_accum__.add(normal_log<propto__>(etaupdbasestates, 0, 1));
            }
            current_statement_begin__ = 584;
            stan::math::assign(ll, 0);
            {
            current_statement_begin__ = 585;
            int si(0);
            (void) si;  // dummy to suppress unused var warning

            stan::math::fill(si, std::numeric_limits<int>::min());
            current_statement_begin__ = 586;
            int counter(0);
            (void) counter;  // dummy to suppress unused var warning

            stan::math::fill(counter, std::numeric_limits<int>::min());
            current_statement_begin__ = 587;
            validate_non_negative_index("etaprior", "nlatentpop", nlatentpop);
            validate_non_negative_index("etaprior", "ndatapoints", ndatapoints);
            vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > etaprior(ndatapoints, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(nlatentpop))));
            stan::math::initialize(etaprior, DUMMY_VAR__);
            stan::math::fill(etaprior,DUMMY_VAR__);
            current_statement_begin__ = 588;
            validate_non_negative_index("etaupd", "nlatentpop", nlatentpop);
            validate_non_negative_index("etaupd", "ndatapoints", ndatapoints);
            vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > etaupd(ndatapoints, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(nlatentpop))));
            stan::math::initialize(etaupd, DUMMY_VAR__);
            stan::math::fill(etaupd,DUMMY_VAR__);
            current_statement_begin__ = 589;
            validate_non_negative_index("etapriorcov", "nlatentpop", nlatentpop);
            validate_non_negative_index("etapriorcov", "nlatentpop", nlatentpop);
            validate_non_negative_index("etapriorcov", "ndatapoints", ndatapoints);
            vector<Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> > etapriorcov(ndatapoints, (Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nlatentpop),static_cast<Eigen::VectorXd::Index>(nlatentpop))));
            stan::math::initialize(etapriorcov, DUMMY_VAR__);
            stan::math::fill(etapriorcov,DUMMY_VAR__);
            current_statement_begin__ = 590;
            validate_non_negative_index("etaupdcov", "nlatentpop", nlatentpop);
            validate_non_negative_index("etaupdcov", "nlatentpop", nlatentpop);
            validate_non_negative_index("etaupdcov", "ndatapoints", ndatapoints);
            vector<Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> > etaupdcov(ndatapoints, (Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nlatentpop),static_cast<Eigen::VectorXd::Index>(nlatentpop))));
            stan::math::initialize(etaupdcov, DUMMY_VAR__);
            stan::math::fill(etaupdcov,DUMMY_VAR__);
            current_statement_begin__ = 593;
            validate_non_negative_index("err", "nmanifest", nmanifest);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  err(static_cast<Eigen::VectorXd::Index>(nmanifest));
            (void) err;  // dummy to suppress unused var warning

            stan::math::initialize(err, DUMMY_VAR__);
            stan::math::fill(err,DUMMY_VAR__);
            current_statement_begin__ = 594;
            validate_non_negative_index("ypred", "nmanifest", nmanifest);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  ypred(static_cast<Eigen::VectorXd::Index>(nmanifest));
            (void) ypred;  // dummy to suppress unused var warning

            stan::math::initialize(ypred, DUMMY_VAR__);
            stan::math::fill(ypred,DUMMY_VAR__);
            current_statement_begin__ = 595;
            validate_non_negative_index("ystate", "(ukf ? nmanifest : 0 )", (ukf ? nmanifest : 0 ));
            Eigen::Matrix<T__,Eigen::Dynamic,1>  ystate(static_cast<Eigen::VectorXd::Index>((ukf ? nmanifest : 0 )));
            (void) ystate;  // dummy to suppress unused var warning

            stan::math::initialize(ystate, DUMMY_VAR__);
            stan::math::fill(ystate,DUMMY_VAR__);
            current_statement_begin__ = 596;
            validate_non_negative_index("ypredcov", "nmanifest", nmanifest);
            validate_non_negative_index("ypredcov", "nmanifest", nmanifest);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  ypredcov(static_cast<Eigen::VectorXd::Index>(nmanifest),static_cast<Eigen::VectorXd::Index>(nmanifest));
            (void) ypredcov;  // dummy to suppress unused var warning

            stan::math::initialize(ypredcov, DUMMY_VAR__);
            stan::math::fill(ypredcov,DUMMY_VAR__);
            current_statement_begin__ = 597;
            validate_non_negative_index("K", "nlatentpop", nlatentpop);
            validate_non_negative_index("K", "nmanifest", nmanifest);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  K(static_cast<Eigen::VectorXd::Index>(nlatentpop),static_cast<Eigen::VectorXd::Index>(nmanifest));
            (void) K;  // dummy to suppress unused var warning

            stan::math::initialize(K, DUMMY_VAR__);
            stan::math::fill(K,DUMMY_VAR__);
            current_statement_begin__ = 598;
            validate_non_negative_index("ypredcov_sqrt", "nmanifest", nmanifest);
            validate_non_negative_index("ypredcov_sqrt", "nmanifest", nmanifest);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  ypredcov_sqrt(static_cast<Eigen::VectorXd::Index>(nmanifest),static_cast<Eigen::VectorXd::Index>(nmanifest));
            (void) ypredcov_sqrt;  // dummy to suppress unused var warning

            stan::math::initialize(ypredcov_sqrt, DUMMY_VAR__);
            stan::math::fill(ypredcov_sqrt,DUMMY_VAR__);
            current_statement_begin__ = 602;
            validate_non_negative_index("errtrans", "(intoverstates ? sum(nobs_y) : sum(ncont_y) )", (intoverstates ? sum(nobs_y) : sum(ncont_y) ));
            Eigen::Matrix<T__,Eigen::Dynamic,1>  errtrans(static_cast<Eigen::VectorXd::Index>((intoverstates ? sum(nobs_y) : sum(ncont_y) )));
            (void) errtrans;  // dummy to suppress unused var warning

            stan::math::initialize(errtrans, DUMMY_VAR__);
            stan::math::fill(errtrans,DUMMY_VAR__);
            current_statement_begin__ = 603;
            validate_non_negative_index("errscales", "(intoverstates ? sum(nobs_y) : sum(ncont_y) )", (intoverstates ? sum(nobs_y) : sum(ncont_y) ));
            Eigen::Matrix<T__,Eigen::Dynamic,1>  errscales(static_cast<Eigen::VectorXd::Index>((intoverstates ? sum(nobs_y) : sum(ncont_y) )));
            (void) errscales;  // dummy to suppress unused var warning

            stan::math::initialize(errscales, DUMMY_VAR__);
            stan::math::fill(errscales,DUMMY_VAR__);
            current_statement_begin__ = 604;
            int cobscount(0);
            (void) cobscount;  // dummy to suppress unused var warning

            stan::math::fill(cobscount, std::numeric_limits<int>::min());
            current_statement_begin__ = 605;
            int nobsi(0);
            (void) nobsi;  // dummy to suppress unused var warning

            stan::math::fill(nobsi, std::numeric_limits<int>::min());
            current_statement_begin__ = 608;
            validate_non_negative_index("sigpoints", "(ukf ? nlatentpop : 0 )", (ukf ? nlatentpop : 0 ));
            validate_non_negative_index("sigpoints", "(ukf ? nlatentpop : 0 )", (ukf ? nlatentpop : 0 ));
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  sigpoints(static_cast<Eigen::VectorXd::Index>((ukf ? nlatentpop : 0 )),static_cast<Eigen::VectorXd::Index>((ukf ? nlatentpop : 0 )));
            (void) sigpoints;  // dummy to suppress unused var warning

            stan::math::initialize(sigpoints, DUMMY_VAR__);
            stan::math::fill(sigpoints,DUMMY_VAR__);
            current_statement_begin__ = 609;
            validate_non_negative_index("state", "(ukf ? nlatent : 0 )", (ukf ? nlatent : 0 ));
            Eigen::Matrix<T__,Eigen::Dynamic,1>  state(static_cast<Eigen::VectorXd::Index>((ukf ? nlatent : 0 )));
            (void) state;  // dummy to suppress unused var warning

            stan::math::initialize(state, DUMMY_VAR__);
            stan::math::fill(state,DUMMY_VAR__);
            current_statement_begin__ = 610;
            T__ dynerror;
            (void) dynerror;  // dummy to suppress unused var warning

            stan::math::initialize(dynerror, DUMMY_VAR__);
            stan::math::fill(dynerror,DUMMY_VAR__);
            current_statement_begin__ = 611;
            T__ k;
            (void) k;  // dummy to suppress unused var warning

            stan::math::initialize(k, DUMMY_VAR__);
            stan::math::fill(k,DUMMY_VAR__);
            current_statement_begin__ = 612;
            T__ asquared;
            (void) asquared;  // dummy to suppress unused var warning

            stan::math::initialize(asquared, DUMMY_VAR__);
            stan::math::fill(asquared,DUMMY_VAR__);
            current_statement_begin__ = 613;
            T__ l;
            (void) l;  // dummy to suppress unused var warning

            stan::math::initialize(l, DUMMY_VAR__);
            stan::math::fill(l,DUMMY_VAR__);
            current_statement_begin__ = 614;
            T__ sqrtukfadjust;
            (void) sqrtukfadjust;  // dummy to suppress unused var warning

            stan::math::initialize(sqrtukfadjust, DUMMY_VAR__);
            stan::math::fill(sqrtukfadjust,DUMMY_VAR__);
            current_statement_begin__ = 615;
            int ndynerror(0);
            (void) ndynerror;  // dummy to suppress unused var warning

            stan::math::fill(ndynerror, std::numeric_limits<int>::min());
            current_statement_begin__ = 616;
            validate_non_negative_index("rkstates", "(lineardynamics ? 0 : nlatent )", (lineardynamics ? 0 : nlatent ));
            validate_non_negative_index("rkstates", "(lineardynamics ? 0 : 5 )", (lineardynamics ? 0 : 5 ));
            vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > rkstates((lineardynamics ? 0 : 5 ), (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>((lineardynamics ? 0 : nlatent )))));
            stan::math::initialize(rkstates, DUMMY_VAR__);
            stan::math::fill(rkstates,DUMMY_VAR__);
            current_statement_begin__ = 619;
            validate_non_negative_index("discreteDRIFT", "(lineardynamics ? nlatent : 0 )", (lineardynamics ? nlatent : 0 ));
            validate_non_negative_index("discreteDRIFT", "(lineardynamics ? nlatent : 0 )", (lineardynamics ? nlatent : 0 ));
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  discreteDRIFT(static_cast<Eigen::VectorXd::Index>((lineardynamics ? nlatent : 0 )),static_cast<Eigen::VectorXd::Index>((lineardynamics ? nlatent : 0 )));
            (void) discreteDRIFT;  // dummy to suppress unused var warning

            stan::math::initialize(discreteDRIFT, DUMMY_VAR__);
            stan::math::fill(discreteDRIFT,DUMMY_VAR__);
            current_statement_begin__ = 620;
            validate_non_negative_index("discreteCINT", "(lineardynamics ? nlatent : 0 )", (lineardynamics ? nlatent : 0 ));
            Eigen::Matrix<T__,Eigen::Dynamic,1>  discreteCINT(static_cast<Eigen::VectorXd::Index>((lineardynamics ? nlatent : 0 )));
            (void) discreteCINT;  // dummy to suppress unused var warning

            stan::math::initialize(discreteCINT, DUMMY_VAR__);
            stan::math::fill(discreteCINT,DUMMY_VAR__);
            current_statement_begin__ = 621;
            validate_non_negative_index("discreteDIFFUSION", "(lineardynamics ? nlatent : 0 )", (lineardynamics ? nlatent : 0 ));
            validate_non_negative_index("discreteDIFFUSION", "(lineardynamics ? nlatent : 0 )", (lineardynamics ? nlatent : 0 ));
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  discreteDIFFUSION(static_cast<Eigen::VectorXd::Index>((lineardynamics ? nlatent : 0 )),static_cast<Eigen::VectorXd::Index>((lineardynamics ? nlatent : 0 )));
            (void) discreteDIFFUSION;  // dummy to suppress unused var warning

            stan::math::initialize(discreteDIFFUSION, DUMMY_VAR__);
            stan::math::fill(discreteDIFFUSION,DUMMY_VAR__);
            current_statement_begin__ = 624;
            validate_non_negative_index("sT0MEANS", "nlatent", nlatent);
            validate_non_negative_index("sT0MEANS", "1", 1);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  sT0MEANS(static_cast<Eigen::VectorXd::Index>(nlatent),static_cast<Eigen::VectorXd::Index>(1));
            (void) sT0MEANS;  // dummy to suppress unused var warning

            stan::math::initialize(sT0MEANS, DUMMY_VAR__);
            stan::math::fill(sT0MEANS,DUMMY_VAR__);
            current_statement_begin__ = 625;
            validate_non_negative_index("sT0VAR", "nlatent", nlatent);
            validate_non_negative_index("sT0VAR", "nlatent", nlatent);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  sT0VAR(static_cast<Eigen::VectorXd::Index>(nlatent),static_cast<Eigen::VectorXd::Index>(nlatent));
            (void) sT0VAR;  // dummy to suppress unused var warning

            stan::math::initialize(sT0VAR, DUMMY_VAR__);
            stan::math::fill(sT0VAR,DUMMY_VAR__);
            current_statement_begin__ = 626;
            validate_non_negative_index("sDIFFUSION", "nlatent", nlatent);
            validate_non_negative_index("sDIFFUSION", "nlatent", nlatent);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  sDIFFUSION(static_cast<Eigen::VectorXd::Index>(nlatent),static_cast<Eigen::VectorXd::Index>(nlatent));
            (void) sDIFFUSION;  // dummy to suppress unused var warning

            stan::math::initialize(sDIFFUSION, DUMMY_VAR__);
            stan::math::fill(sDIFFUSION,DUMMY_VAR__);
            current_statement_begin__ = 627;
            validate_non_negative_index("sasymDIFFUSION", "nlatent", nlatent);
            validate_non_negative_index("sasymDIFFUSION", "nlatent", nlatent);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  sasymDIFFUSION(static_cast<Eigen::VectorXd::Index>(nlatent),static_cast<Eigen::VectorXd::Index>(nlatent));
            (void) sasymDIFFUSION;  // dummy to suppress unused var warning

            stan::math::initialize(sasymDIFFUSION, DUMMY_VAR__);
            stan::math::fill(sasymDIFFUSION,DUMMY_VAR__);
            current_statement_begin__ = 628;
            validate_non_negative_index("sDRIFT", "nlatent", nlatent);
            validate_non_negative_index("sDRIFT", "nlatent", nlatent);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  sDRIFT(static_cast<Eigen::VectorXd::Index>(nlatent),static_cast<Eigen::VectorXd::Index>(nlatent));
            (void) sDRIFT;  // dummy to suppress unused var warning

            stan::math::initialize(sDRIFT, DUMMY_VAR__);
            stan::math::fill(sDRIFT,DUMMY_VAR__);
            current_statement_begin__ = 629;
            validate_non_negative_index("sCINT", "nlatent", nlatent);
            validate_non_negative_index("sCINT", "1", 1);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  sCINT(static_cast<Eigen::VectorXd::Index>(nlatent),static_cast<Eigen::VectorXd::Index>(1));
            (void) sCINT;  // dummy to suppress unused var warning

            stan::math::initialize(sCINT, DUMMY_VAR__);
            stan::math::fill(sCINT,DUMMY_VAR__);
            current_statement_begin__ = 630;
            validate_non_negative_index("sMANIFESTVAR", "nmanifest", nmanifest);
            validate_non_negative_index("sMANIFESTVAR", "nmanifest", nmanifest);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  sMANIFESTVAR(static_cast<Eigen::VectorXd::Index>(nmanifest),static_cast<Eigen::VectorXd::Index>(nmanifest));
            (void) sMANIFESTVAR;  // dummy to suppress unused var warning

            stan::math::initialize(sMANIFESTVAR, DUMMY_VAR__);
            stan::math::fill(sMANIFESTVAR,DUMMY_VAR__);
            current_statement_begin__ = 631;
            validate_non_negative_index("sMANIFESTMEANS", "nmanifest", nmanifest);
            validate_non_negative_index("sMANIFESTMEANS", "1", 1);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  sMANIFESTMEANS(static_cast<Eigen::VectorXd::Index>(nmanifest),static_cast<Eigen::VectorXd::Index>(1));
            (void) sMANIFESTMEANS;  // dummy to suppress unused var warning

            stan::math::initialize(sMANIFESTMEANS, DUMMY_VAR__);
            stan::math::fill(sMANIFESTMEANS,DUMMY_VAR__);
            current_statement_begin__ = 632;
            validate_non_negative_index("sLAMBDA", "nmanifest", nmanifest);
            validate_non_negative_index("sLAMBDA", "nlatent", nlatent);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  sLAMBDA(static_cast<Eigen::VectorXd::Index>(nmanifest),static_cast<Eigen::VectorXd::Index>(nlatent));
            (void) sLAMBDA;  // dummy to suppress unused var warning

            stan::math::initialize(sLAMBDA, DUMMY_VAR__);
            stan::math::fill(sLAMBDA,DUMMY_VAR__);
            current_statement_begin__ = 633;
            validate_non_negative_index("sTDPREDEFFECT", "(ntdpred ? nlatent : 0 )", (ntdpred ? nlatent : 0 ));
            validate_non_negative_index("sTDPREDEFFECT", "ntdpred", ntdpred);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  sTDPREDEFFECT(static_cast<Eigen::VectorXd::Index>((ntdpred ? nlatent : 0 )),static_cast<Eigen::VectorXd::Index>(ntdpred));
            (void) sTDPREDEFFECT;  // dummy to suppress unused var warning

            stan::math::initialize(sTDPREDEFFECT, DUMMY_VAR__);
            stan::math::fill(sTDPREDEFFECT,DUMMY_VAR__);
            current_statement_begin__ = 634;
            validate_non_negative_index("sPARS", "get_base1(dims(PARS),2,\"dims(PARS)\",1)", get_base1(dims(PARS),2,"dims(PARS)",1));
            validate_non_negative_index("sPARS", "get_base1(dims(PARS),3,\"dims(PARS)\",1)", get_base1(dims(PARS),3,"dims(PARS)",1));
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  sPARS(static_cast<Eigen::VectorXd::Index>(get_base1(dims(PARS),2,"dims(PARS)",1)),static_cast<Eigen::VectorXd::Index>(get_base1(dims(PARS),3,"dims(PARS)",1)));
            (void) sPARS;  // dummy to suppress unused var warning

            stan::math::initialize(sPARS, DUMMY_VAR__);
            stan::math::fill(sPARS,DUMMY_VAR__);


            current_statement_begin__ = 637;
            if (as_bool(logical_eq(ukf,1))) {
                current_statement_begin__ = 637;
                stan::math::assign(k, 0.5);
            }
            current_statement_begin__ = 639;
            if (as_bool(lineardynamics)) {
                current_statement_begin__ = 639;
                stan::math::assign(discreteDIFFUSION, rep_matrix(0,nlatent,nlatent));
            }
            current_statement_begin__ = 641;
            stan::math::assign(cobscount, 0);
            current_statement_begin__ = 643;
            for (int rowi = 1; rowi <= ndatapoints; ++rowi) {
                {
                current_statement_begin__ = 644;
                validate_non_negative_index("o", "get_base1(nobs_y,rowi,\"nobs_y\",1)", get_base1(nobs_y,rowi,"nobs_y",1));
                vector<int> o(get_base1(nobs_y,rowi,"nobs_y",1), 0);
                stan::math::fill(o, std::numeric_limits<int>::min());
                current_statement_begin__ = 645;
                validate_non_negative_index("o1", "get_base1(nbinary_y,rowi,\"nbinary_y\",1)", get_base1(nbinary_y,rowi,"nbinary_y",1));
                vector<int> o1(get_base1(nbinary_y,rowi,"nbinary_y",1), 0);
                stan::math::fill(o1, std::numeric_limits<int>::min());
                current_statement_begin__ = 646;
                validate_non_negative_index("o0", "get_base1(ncont_y,rowi,\"ncont_y\",1)", get_base1(ncont_y,rowi,"ncont_y",1));
                vector<int> o0(get_base1(ncont_y,rowi,"ncont_y",1), 0);
                stan::math::fill(o0, std::numeric_limits<int>::min());
                current_statement_begin__ = 648;
                validate_non_negative_index("ukfstates", "(ukf ? nlatentpop : 0 )", (ukf ? nlatentpop : 0 ));
                validate_non_negative_index("ukfstates", "((2 * (nlatentpop + (get_base1(T0check,rowi,\"T0check\",1) ? nlatent : ndiffusion ))) + 2)", ((2 * (nlatentpop + (get_base1(T0check,rowi,"T0check",1) ? nlatent : ndiffusion ))) + 2));
                Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  ukfstates(static_cast<Eigen::VectorXd::Index>((ukf ? nlatentpop : 0 )),static_cast<Eigen::VectorXd::Index>(((2 * (nlatentpop + (get_base1(T0check,rowi,"T0check",1) ? nlatent : ndiffusion ))) + 2)));
                (void) ukfstates;  // dummy to suppress unused var warning

                stan::math::initialize(ukfstates, DUMMY_VAR__);
                stan::math::fill(ukfstates,DUMMY_VAR__);
                current_statement_begin__ = 649;
                validate_non_negative_index("ukfmeasures", "(ukf ? nmanifest : 0 )", (ukf ? nmanifest : 0 ));
                validate_non_negative_index("ukfmeasures", "((2 * (nlatentpop + (get_base1(T0check,rowi,\"T0check\",1) ? nlatent : ndiffusion ))) + 2)", ((2 * (nlatentpop + (get_base1(T0check,rowi,"T0check",1) ? nlatent : ndiffusion ))) + 2));
                Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  ukfmeasures(static_cast<Eigen::VectorXd::Index>((ukf ? nmanifest : 0 )),static_cast<Eigen::VectorXd::Index>(((2 * (nlatentpop + (get_base1(T0check,rowi,"T0check",1) ? nlatent : ndiffusion ))) + 2)));
                (void) ukfmeasures;  // dummy to suppress unused var warning

                stan::math::initialize(ukfmeasures, DUMMY_VAR__);
                stan::math::fill(ukfmeasures,DUMMY_VAR__);


                current_statement_begin__ = 651;
                stan::math::assign(o, stan::model::rvalue(whichobs_y, stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_min_max(1, get_base1(nobs_y,rowi,"nobs_y",1)), stan::model::nil_index_list())), "whichobs_y"));
                current_statement_begin__ = 652;
                stan::math::assign(si, get_base1(subject,rowi,"subject",1));
                current_statement_begin__ = 653;
                stan::math::assign(nobsi, get_base1(nobs_y,rowi,"nobs_y",1));
                current_statement_begin__ = 655;
                stan::math::assign(o1, stan::model::rvalue(whichbinary_y, stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_min_max(1, get_base1(nbinary_y,rowi,"nbinary_y",1)), stan::model::nil_index_list())), "whichbinary_y"));
                current_statement_begin__ = 656;
                stan::math::assign(o0, stan::model::rvalue(whichcont_y, stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_min_max(1, get_base1(ncont_y,rowi,"ncont_y",1)), stan::model::nil_index_list())), "whichcont_y"));
                current_statement_begin__ = 658;
                if (as_bool((primitive_value(logical_neq(rowi,1)) && primitive_value(logical_eq(intoverstates,1))))) {
                    current_statement_begin__ = 658;
                    stan::math::assign(cobscount, (cobscount + get_base1(nobs_y,(rowi - 1),"nobs_y",1)));
                }
                current_statement_begin__ = 659;
                if (as_bool((primitive_value(logical_neq(rowi,1)) && primitive_value(logical_eq(intoverstates,0))))) {
                    current_statement_begin__ = 659;
                    stan::math::assign(cobscount, (cobscount + get_base1(ncont_y,(rowi - 1),"ncont_y",1)));
                }
                current_statement_begin__ = 661;
                if (as_bool(logical_eq(ukf,1))) {

                    current_statement_begin__ = 662;
                    if (as_bool(logical_eq(get_base1(T0check,rowi,"T0check",1),1))) {

                        current_statement_begin__ = 662;
                        stan::math::assign(ndynerror, nlatent);
                    } else {
                        current_statement_begin__ = 662;
                        stan::math::assign(ndynerror, ndiffusion);
                    }
                    current_statement_begin__ = 663;
                    if (as_bool((primitive_value(logical_eq(get_base1(T0check,rowi,"T0check",1),1)) || primitive_value((primitive_value(logical_lt(ndiffusion,nlatent)) && primitive_value(logical_eq(get_base1(T0check,(rowi - 1),"T0check",1),1))))))) {

                        current_statement_begin__ = 664;
                        stan::math::assign(asquared, ((2.0 / sqrt((nlatentpop + ndynerror))) * 0.01));
                        current_statement_begin__ = 665;
                        stan::math::assign(l, ((asquared * ((nlatentpop + ndynerror) + k)) - (nlatentpop + ndynerror)));
                        current_statement_begin__ = 666;
                        stan::math::assign(sqrtukfadjust, sqrt(((nlatentpop + ndynerror) + l)));
                    }
                }
                current_statement_begin__ = 670;
                if (as_bool(logical_eq(get_base1(T0check,rowi,"T0check",1),1))) {

                    current_statement_begin__ = 672;
                    if (as_bool((primitive_value((primitive_value(logical_eq(si,1)) || primitive_value((primitive_value(logical_eq(ukfpop,0)) && primitive_value(logical_gt(nindvarying,0)))))) || primitive_value(logical_gt(ntipred,0))))) {

                        current_statement_begin__ = 673;
                        if (as_bool(logical_eq(si,get_base1(T0MEANSsubindex,si,"T0MEANSsubindex",1)))) {
                            current_statement_begin__ = 673;
                            stan::math::assign(sT0MEANS, get_base1(T0MEANS,get_base1(T0MEANSsubindex,si,"T0MEANSsubindex",1),"T0MEANS",1));
                        }
                        current_statement_begin__ = 674;
                        if (as_bool(logical_eq(si,get_base1(T0VARsubindex,si,"T0VARsubindex",1)))) {
                            current_statement_begin__ = 674;
                            stan::math::assign(sT0VAR, get_base1(T0VAR,get_base1(T0VARsubindex,si,"T0VARsubindex",1),"T0VAR",1));
                        }
                        current_statement_begin__ = 675;
                        if (as_bool(logical_eq(si,get_base1(DRIFTsubindex,si,"DRIFTsubindex",1)))) {
                            current_statement_begin__ = 675;
                            stan::math::assign(sDRIFT, get_base1(DRIFT,get_base1(DRIFTsubindex,si,"DRIFTsubindex",1),"DRIFT",1));
                        }
                        current_statement_begin__ = 676;
                        if (as_bool(logical_eq(si,get_base1(DIFFUSIONsubindex,si,"DIFFUSIONsubindex",1)))) {
                            current_statement_begin__ = 676;
                            stan::math::assign(sDIFFUSION, get_base1(DIFFUSION,get_base1(DIFFUSIONsubindex,si,"DIFFUSIONsubindex",1),"DIFFUSION",1));
                        }
                        current_statement_begin__ = 677;
                        if (as_bool(logical_eq(si,get_base1(CINTsubindex,si,"CINTsubindex",1)))) {
                            current_statement_begin__ = 677;
                            stan::math::assign(sCINT, get_base1(CINT,get_base1(CINTsubindex,si,"CINTsubindex",1),"CINT",1));
                        }
                        current_statement_begin__ = 678;
                        if (as_bool(logical_eq(si,get_base1(LAMBDAsubindex,si,"LAMBDAsubindex",1)))) {
                            current_statement_begin__ = 678;
                            stan::math::assign(sLAMBDA, get_base1(LAMBDA,get_base1(LAMBDAsubindex,si,"LAMBDAsubindex",1),"LAMBDA",1));
                        }
                        current_statement_begin__ = 679;
                        if (as_bool(logical_eq(si,get_base1(MANIFESTMEANSsubindex,si,"MANIFESTMEANSsubindex",1)))) {
                            current_statement_begin__ = 679;
                            stan::math::assign(sMANIFESTMEANS, get_base1(MANIFESTMEANS,get_base1(MANIFESTMEANSsubindex,si,"MANIFESTMEANSsubindex",1),"MANIFESTMEANS",1));
                        }
                        current_statement_begin__ = 680;
                        if (as_bool(logical_eq(si,get_base1(MANIFESTVARsubindex,si,"MANIFESTVARsubindex",1)))) {
                            current_statement_begin__ = 680;
                            stan::math::assign(sMANIFESTVAR, get_base1(MANIFESTVAR,get_base1(MANIFESTVARsubindex,si,"MANIFESTVARsubindex",1),"MANIFESTVAR",1));
                        }
                        current_statement_begin__ = 681;
                        if (as_bool(logical_eq(si,get_base1(TDPREDEFFECTsubindex,si,"TDPREDEFFECTsubindex",1)))) {
                            current_statement_begin__ = 681;
                            stan::math::assign(sTDPREDEFFECT, get_base1(TDPREDEFFECT,get_base1(TDPREDEFFECTsubindex,si,"TDPREDEFFECTsubindex",1),"TDPREDEFFECT",1));
                        }
                        current_statement_begin__ = 682;
                        if (as_bool(logical_eq(si,get_base1(PARSsubindex,si,"PARSsubindex",1)))) {
                            current_statement_begin__ = 682;
                            stan::math::assign(sPARS, get_base1(PARS,get_base1(PARSsubindex,si,"PARSsubindex",1),"PARS",1));
                        }
                        current_statement_begin__ = 684;
                        if (as_bool((primitive_value((primitive_value(logical_eq(1,1)) && primitive_value(logical_eq(lineardynamics,1)))) && primitive_value((primitive_value(logical_eq(rowi,1)) || primitive_value(logical_neq(get_base1(asymDIFFUSIONsubindex,si,"asymDIFFUSIONsubindex",1),get_base1(asymDIFFUSIONsubindex,(si - 1),"asymDIFFUSIONsubindex",1)))))))) {

                            current_statement_begin__ = 685;
                            stan::math::assign(sasymDIFFUSION, get_base1(asymDIFFUSION,get_base1(asymDIFFUSIONsubindex,si,"asymDIFFUSIONsubindex",1),"asymDIFFUSION",1));
                        }
                    }
                    current_statement_begin__ = 689;
                    if (as_bool(logical_eq(ukf,1))) {

                        current_statement_begin__ = 690;
                        stan::model::assign(etaprior, 
                                    stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                    rep_vector(0,nlatentpop), 
                                    "assigning variable etaprior");
                        current_statement_begin__ = 691;
                        stan::math::assign(sigpoints, rep_matrix(0,nlatentpop,nlatentpop));
                        current_statement_begin__ = 693;
                        if (as_bool(logical_eq(ukfpop,1))) {

                            current_statement_begin__ = 694;
                            if (as_bool(logical_eq(ntipred,0))) {
                                current_statement_begin__ = 694;
                                stan::model::assign(etaprior, 
                                            stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_min_max((nlatent + 1), nlatentpop), stan::model::nil_index_list())), 
                                            stan::model::rvalue(rawpopmeans, stan::model::cons_list(stan::model::index_multi(indvaryingindex), stan::model::nil_index_list()), "rawpopmeans"), 
                                            "assigning variable etaprior");
                            }
                            current_statement_begin__ = 695;
                            if (as_bool(logical_gt(ntipred,0))) {
                                current_statement_begin__ = 695;
                                stan::model::assign(etaprior, 
                                            stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_min_max((nlatent + 1), nlatentpop), stan::model::nil_index_list())), 
                                            add(stan::model::rvalue(rawpopmeans, stan::model::cons_list(stan::model::index_multi(indvaryingindex), stan::model::nil_index_list()), "rawpopmeans"),multiply(stan::model::rvalue(TIPREDEFFECT, stan::model::cons_list(stan::model::index_multi(indvaryingindex), stan::model::nil_index_list()), "TIPREDEFFECT"),transpose(get_base1(tipreds,si,"tipreds",1)))), 
                                            "assigning variable etaprior");
                            }
                            current_statement_begin__ = 696;
                            stan::model::assign(sigpoints, 
                                        stan::model::cons_list(stan::model::index_min_max((nlatent + 1), nlatentpop), stan::model::cons_list(stan::model::index_min_max((nlatent + 1), nlatentpop), stan::model::nil_index_list())), 
                                        multiply(rawpopcovsqrt,sqrtukfadjust), 
                                        "assigning variable sigpoints");
                        }
                    }
                    current_statement_begin__ = 700;
                    if (as_bool(logical_eq(ukf,0))) {

                        current_statement_begin__ = 701;
                        if (as_bool(logical_eq(ntdpred,0))) {
                            current_statement_begin__ = 701;
                            stan::math::assign(get_base1_lhs(etaprior,rowi,"etaprior",1), stan::model::rvalue(sT0MEANS, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sT0MEANS"));
                        }
                        current_statement_begin__ = 702;
                        if (as_bool(logical_gt(ntdpred,0))) {
                            current_statement_begin__ = 702;
                            stan::math::assign(get_base1_lhs(etaprior,rowi,"etaprior",1), add(multiply(get_base1(TDPREDEFFECT,get_base1(TDPREDEFFECTsubindex,si,"TDPREDEFFECTsubindex",1),"TDPREDEFFECT",1),get_base1(tdpreds,rowi,"tdpreds",1)),stan::model::rvalue(sT0MEANS, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sT0MEANS")));
                        }
                        current_statement_begin__ = 703;
                        stan::math::assign(get_base1_lhs(etapriorcov,rowi,"etapriorcov",1), get_base1(T0VAR,get_base1(T0VARsubindex,si,"T0VARsubindex",1),"T0VAR",1));
                    }
                }
                current_statement_begin__ = 708;
                if (as_bool((primitive_value((primitive_value(logical_eq(lineardynamics,1)) && primitive_value(logical_eq(ukf,0)))) && primitive_value(logical_eq(get_base1(T0check,rowi,"T0check",1),0))))) {

                    current_statement_begin__ = 710;
                    if (as_bool(logical_eq(continuoustime,1))) {
                        {
                        current_statement_begin__ = 711;
                        int dtchange(0);
                        (void) dtchange;  // dummy to suppress unused var warning

                        stan::math::fill(dtchange, std::numeric_limits<int>::min());
                        stan::math::assign(dtchange,0);


                        current_statement_begin__ = 712;
                        if (as_bool((primitive_value(logical_eq(si,1)) && primitive_value(logical_eq(get_base1(T0check,(rowi - 1),"T0check",1),1))))) {

                            current_statement_begin__ = 713;
                            stan::math::assign(dtchange, 1);
                        } else if (as_bool((primitive_value(logical_eq(get_base1(T0check,(rowi - 1),"T0check",1),1)) && primitive_value(logical_neq(get_base1(dT,(rowi - 2),"dT",1),get_base1(dT,rowi,"dT",1)))))) {

                            current_statement_begin__ = 715;
                            stan::math::assign(dtchange, 1);
                        } else if (as_bool((primitive_value(logical_eq(get_base1(T0check,(rowi - 1),"T0check",1),0)) && primitive_value(logical_neq(get_base1(dT,(rowi - 1),"dT",1),get_base1(dT,rowi,"dT",1)))))) {
                            current_statement_begin__ = 716;
                            stan::math::assign(dtchange, 1);
                        }
                        current_statement_begin__ = 718;
                        if (as_bool((primitive_value(logical_eq(dtchange,1)) || primitive_value((primitive_value(logical_eq(get_base1(T0check,(rowi - 1),"T0check",1),1)) && primitive_value(logical_lte(si,get_base1(DRIFTsubindex,si,"DRIFTsubindex",1)))))))) {

                            current_statement_begin__ = 719;
                            if (as_bool(logical_eq(driftdiagonly,1))) {
                                current_statement_begin__ = 719;
                                stan::math::assign(discreteDRIFT, matrix_diagexp(multiply(sDRIFT,get_base1(dT,rowi,"dT",1)), pstream__));
                            }
                            current_statement_begin__ = 720;
                            if (as_bool(logical_eq(driftdiagonly,0))) {
                                current_statement_begin__ = 720;
                                stan::math::assign(discreteDRIFT, matrix_exp(multiply(sDRIFT,get_base1(dT,rowi,"dT",1))));
                            }
                        }
                        current_statement_begin__ = 722;
                        if (as_bool((primitive_value(logical_eq(dtchange,1)) || primitive_value((primitive_value(logical_eq(get_base1(T0check,(rowi - 1),"T0check",1),1)) && primitive_value((primitive_value(logical_lte(si,get_base1(CINTsubindex,si,"CINTsubindex",1))) || primitive_value(logical_lte(si,get_base1(DRIFTsubindex,si,"DRIFTsubindex",1)))))))))) {

                            current_statement_begin__ = 723;
                            stan::math::assign(discreteCINT, multiply(mdivide_left(sDRIFT,subtract(discreteDRIFT,IIlatent)),stan::model::rvalue(sCINT, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sCINT")));
                        }
                        current_statement_begin__ = 726;
                        if (as_bool((primitive_value(logical_eq(dtchange,1)) || primitive_value((primitive_value(logical_eq(get_base1(T0check,(rowi - 1),"T0check",1),1)) && primitive_value((primitive_value(logical_lte(si,get_base1(DIFFUSIONsubindex,si,"DIFFUSIONsubindex",1))) || primitive_value(logical_lte(si,get_base1(DRIFTsubindex,si,"DRIFTsubindex",1)))))))))) {

                            current_statement_begin__ = 727;
                            stan::model::assign(discreteDIFFUSION, 
                                        stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list())), 
                                        subtract(stan::model::rvalue(sasymDIFFUSION, stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list())), "sasymDIFFUSION"),quad_form(stan::model::rvalue(sasymDIFFUSION, stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list())), "sasymDIFFUSION"),transpose(stan::model::rvalue(discreteDRIFT, stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list())), "discreteDRIFT")))), 
                                        "assigning variable discreteDIFFUSION");
                        }
                        }
                    }
                    current_statement_begin__ = 733;
                    if (as_bool((primitive_value(logical_eq(continuoustime,0)) && primitive_value(logical_eq(get_base1(T0check,(rowi - 1),"T0check",1),1))))) {

                        current_statement_begin__ = 734;
                        stan::math::assign(discreteDRIFT, sDRIFT);
                        current_statement_begin__ = 735;
                        stan::math::assign(discreteCINT, stan::model::rvalue(sCINT, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sCINT"));
                        current_statement_begin__ = 736;
                        stan::math::assign(discreteDIFFUSION, sDIFFUSION);
                    }
                    current_statement_begin__ = 739;
                    stan::math::assign(get_base1_lhs(etaprior,rowi,"etaprior",1), add(multiply(discreteDRIFT,get_base1(etaupd,(rowi - 1),"etaupd",1)),discreteCINT));
                    current_statement_begin__ = 740;
                    if (as_bool(logical_eq(intoverstates,1))) {

                        current_statement_begin__ = 741;
                        if (as_bool(logical_eq(ndiffusion,0))) {
                            current_statement_begin__ = 741;
                            stan::math::assign(get_base1_lhs(etapriorcov,rowi,"etapriorcov",1), quad_form(get_base1(etaupdcov,(rowi - 1),"etaupdcov",1),transpose(discreteDRIFT)));
                        }
                        current_statement_begin__ = 742;
                        if (as_bool(logical_gt(ndiffusion,0))) {
                            current_statement_begin__ = 742;
                            stan::math::assign(get_base1_lhs(etapriorcov,rowi,"etapriorcov",1), add(quad_form(get_base1(etaupdcov,(rowi - 1),"etaupdcov",1),transpose(discreteDRIFT)),discreteDIFFUSION));
                        }
                    }
                }
                current_statement_begin__ = 746;
                if (as_bool(logical_eq(ukf,1))) {

                    current_statement_begin__ = 748;
                    if (as_bool(logical_eq(get_base1(T0check,rowi,"T0check",1),1))) {
                        current_statement_begin__ = 748;
                        stan::math::assign(dynerror, sqrtukfadjust);
                    }
                    current_statement_begin__ = 749;
                    if (as_bool((primitive_value(logical_eq(get_base1(T0check,rowi,"T0check",1),0)) && primitive_value(logical_eq(lineardynamics,0))))) {
                        current_statement_begin__ = 749;
                        stan::math::assign(dynerror, (sqrtukfadjust / sqrt(get_base1(dT,rowi,"dT",1))));
                    }
                    current_statement_begin__ = 751;
                    if (as_bool(logical_eq(get_base1(T0check,rowi,"T0check",1),0))) {

                        current_statement_begin__ = 752;
                        stan::math::assign(sigpoints, cholesky_decompose(multiply(makesym(stan::model::rvalue(etaupdcov, stan::model::cons_list(stan::model::index_uni((rowi - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "etaupdcov"), pstream__),sqrtukfadjust)));
                        current_statement_begin__ = 754;
                        stan::model::assign(etaprior, 
                                    stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                    stan::model::rvalue(etaupd, stan::model::cons_list(stan::model::index_uni((rowi - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "etaupd"), 
                                    "assigning variable etaprior");
                    }
                    current_statement_begin__ = 758;
                    for (int statei = 1; statei <= cols(ukfstates); ++statei) {

                        current_statement_begin__ = 759;
                        if (as_bool((primitive_value(logical_gt(statei,(2 + nlatentpop))) && primitive_value(logical_lte(statei,(2 + (2 * nlatentpop))))))) {

                            current_statement_begin__ = 760;
                            stan::model::assign(ukfstates, 
                                        stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(statei), stan::model::nil_index_list())), 
                                        subtract(stan::model::rvalue(etaprior, stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "etaprior"),stan::model::rvalue(sigpoints, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((statei - (2 + nlatentpop))), stan::model::nil_index_list())), "sigpoints")), 
                                        "assigning variable ukfstates");
                        } else if (as_bool((primitive_value(logical_gt(statei,2)) && primitive_value(logical_lte(statei,(2 + (2 * nlatentpop))))))) {

                            current_statement_begin__ = 763;
                            stan::model::assign(ukfstates, 
                                        stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(statei), stan::model::nil_index_list())), 
                                        add(stan::model::rvalue(etaprior, stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "etaprior"),stan::model::rvalue(sigpoints, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((statei - 2)), stan::model::nil_index_list())), "sigpoints")), 
                                        "assigning variable ukfstates");
                        } else {
                            current_statement_begin__ = 765;
                            stan::model::assign(ukfstates, 
                                        stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(statei), stan::model::nil_index_list())), 
                                        stan::model::rvalue(etaprior, stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "etaprior"), 
                                        "assigning variable ukfstates");
                        }
                    }
                    current_statement_begin__ = 768;
                    for (int statei = 2; statei <= cols(ukfstates); ++statei) {

                        current_statement_begin__ = 770;
                        if (as_bool(logical_eq(get_base1(T0check,rowi,"T0check",1),1))) {

                            current_statement_begin__ = 772;
                            if (as_bool(logical_lte(statei,((2 + (2 * nlatentpop)) + 1)))) {

                                current_statement_begin__ = 774;
                                if (as_bool(logical_eq(ukfpop,1))) {

                                    current_statement_begin__ = 776;
                                    for (int ri = 1; ri <= size(T0MEANSsetup); ++ri) {

                                        current_statement_begin__ = 777;
                                        if (as_bool(logical_gt(get_base1(get_base1(T0MEANSsetup,ri,"T0MEANSsetup",1),5,"T0MEANSsetup",2),0))) {

                                            current_statement_begin__ = 778;
                                            stan::math::assign(get_base1_lhs(sT0MEANS,get_base1(get_base1(T0MEANSsetup,ri,"T0MEANSsetup",1),1,"T0MEANSsetup",2),get_base1(get_base1(T0MEANSsetup,ri,"T0MEANSsetup",1),2,"T0MEANSsetup",2),"sT0MEANS",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(T0MEANSsetup,ri,"T0MEANSsetup",1),5,"T0MEANSsetup",2)),statei,"ukfstates",1),get_base1(get_base1(T0MEANSsetup,ri,"T0MEANSsetup",1),4,"T0MEANSsetup",2),get_base1(T0MEANSvalues,ri,2,"T0MEANSvalues",1),get_base1(T0MEANSvalues,ri,3,"T0MEANSvalues",1),get_base1(T0MEANSvalues,ri,4,"T0MEANSvalues",1), pstream__));
                                        }
                                    }
                                    current_statement_begin__ = 782;
                                    for (int ri = 1; ri <= size(T0VARsetup); ++ri) {

                                        current_statement_begin__ = 783;
                                        if (as_bool(logical_gt(get_base1(get_base1(T0VARsetup,ri,"T0VARsetup",1),5,"T0VARsetup",2),0))) {

                                            current_statement_begin__ = 784;
                                            stan::math::assign(get_base1_lhs(sT0VAR,get_base1(get_base1(T0VARsetup,ri,"T0VARsetup",1),1,"T0VARsetup",2),get_base1(get_base1(T0VARsetup,ri,"T0VARsetup",1),2,"T0VARsetup",2),"sT0VAR",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(T0VARsetup,ri,"T0VARsetup",1),5,"T0VARsetup",2)),statei,"ukfstates",1),get_base1(get_base1(T0VARsetup,ri,"T0VARsetup",1),4,"T0VARsetup",2),get_base1(T0VARvalues,ri,2,"T0VARvalues",1),get_base1(T0VARvalues,ri,3,"T0VARvalues",1),get_base1(T0VARvalues,ri,4,"T0VARvalues",1), pstream__));
                                        }
                                    }
                                }
                            }
                            current_statement_begin__ = 789;
                            stan::math::assign(state, stan::model::rvalue(sT0MEANS, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sT0MEANS"));
                            current_statement_begin__ = 790;
                            if (as_bool(logical_gt(statei,((2 + (2 * nlatentpop)) + ndynerror)))) {

                                current_statement_begin__ = 791;
                                stan::math::assign(state, add(state, multiply(minus(stan::model::rvalue(sT0VAR, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((statei - ((2 + (2 * nlatentpop)) + ndynerror))), stan::model::nil_index_list())), "sT0VAR")),dynerror)));
                            } else if (as_bool(logical_gt(statei,(2 + (2 * nlatentpop))))) {
                                current_statement_begin__ = 793;
                                stan::math::assign(state, add(state, multiply(stan::model::rvalue(sT0VAR, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((statei - (2 + (2 * nlatentpop)))), stan::model::nil_index_list())), "sT0VAR"),dynerror)));
                            }
                        }
                        current_statement_begin__ = 797;
                        if (as_bool(logical_eq(get_base1(T0check,rowi,"T0check",1),0))) {

                            current_statement_begin__ = 798;
                            stan::math::assign(state, stan::model::rvalue(ukfstates, stan::model::cons_list(stan::model::index_min_max(1, nlatent), stan::model::cons_list(stan::model::index_uni(statei), stan::model::nil_index_list())), "ukfstates"));
                            current_statement_begin__ = 800;
                            if (as_bool(logical_eq(lineardynamics,0))) {

                                current_statement_begin__ = 801;
                                for (int stepi = 1; stepi <= get_base1(integrationsteps,rowi,"integrationsteps",1); ++stepi) {

                                    current_statement_begin__ = 802;
                                    stan::math::assign(get_base1_lhs(rkstates,5,"rkstates",1), state);
                                    current_statement_begin__ = 804;
                                    for (int ki = 1; ki <= 4; ++ki) {

                                        current_statement_begin__ = 805;
                                        if (as_bool((primitive_value(logical_eq(ki,2)) || primitive_value(logical_eq(ki,3))))) {
                                            current_statement_begin__ = 805;
                                            stan::math::assign(state, add(get_base1(rkstates,5,"rkstates",1),multiply((get_base1(dTsmall,rowi,"dTsmall",1) / 2),get_base1(rkstates,(ki - 1),"rkstates",1))));
                                        }
                                        current_statement_begin__ = 806;
                                        if (as_bool(logical_eq(ki,4))) {
                                            current_statement_begin__ = 806;
                                            stan::math::assign(state, add(get_base1(rkstates,5,"rkstates",1),multiply(get_base1(dTsmall,rowi,"dTsmall",1),get_base1(rkstates,3,"rkstates",1))));
                                        }
                                        current_statement_begin__ = 808;
                                        if (as_bool(logical_eq(ukfpop,1))) {

                                            current_statement_begin__ = 810;
                                            for (int ri = 1; ri <= size(DRIFTsetup); ++ri) {

                                                current_statement_begin__ = 811;
                                                if (as_bool(logical_gt(get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),5,"DRIFTsetup",2),0))) {

                                                    current_statement_begin__ = 812;
                                                    stan::math::assign(get_base1_lhs(sDRIFT,get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),1,"DRIFTsetup",2),get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),2,"DRIFTsetup",2),"sDRIFT",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),5,"DRIFTsetup",2)),statei,"ukfstates",1),get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),4,"DRIFTsetup",2),get_base1(DRIFTvalues,ri,2,"DRIFTvalues",1),get_base1(DRIFTvalues,ri,3,"DRIFTvalues",1),get_base1(DRIFTvalues,ri,4,"DRIFTvalues",1), pstream__));
                                                }
                                            }
                                            current_statement_begin__ = 817;
                                            for (int ri = 1; ri <= size(DIFFUSIONsetup); ++ri) {

                                                current_statement_begin__ = 818;
                                                if (as_bool(logical_gt(get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),5,"DIFFUSIONsetup",2),0))) {

                                                    current_statement_begin__ = 819;
                                                    stan::math::assign(get_base1_lhs(sDIFFUSION,get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),1,"DIFFUSIONsetup",2),get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),2,"DIFFUSIONsetup",2),"sDIFFUSION",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),5,"DIFFUSIONsetup",2)),statei,"ukfstates",1),get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),4,"DIFFUSIONsetup",2),get_base1(DIFFUSIONvalues,ri,2,"DIFFUSIONvalues",1),get_base1(DIFFUSIONvalues,ri,3,"DIFFUSIONvalues",1),get_base1(DIFFUSIONvalues,ri,4,"DIFFUSIONvalues",1), pstream__));
                                                }
                                            }
                                            current_statement_begin__ = 824;
                                            for (int ri = 1; ri <= size(CINTsetup); ++ri) {

                                                current_statement_begin__ = 825;
                                                if (as_bool(logical_gt(get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),5,"CINTsetup",2),0))) {

                                                    current_statement_begin__ = 826;
                                                    stan::math::assign(get_base1_lhs(sCINT,get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),1,"CINTsetup",2),get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),2,"CINTsetup",2),"sCINT",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),5,"CINTsetup",2)),statei,"ukfstates",1),get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),4,"CINTsetup",2),get_base1(CINTvalues,ri,2,"CINTvalues",1),get_base1(CINTvalues,ri,3,"CINTvalues",1),get_base1(CINTvalues,ri,4,"CINTvalues",1), pstream__));
                                                }
                                            }
                                            current_statement_begin__ = 831;
                                            for (int ri = 1; ri <= size(TDPREDEFFECTsetup); ++ri) {

                                                current_statement_begin__ = 832;
                                                if (as_bool(logical_gt(get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),5,"TDPREDEFFECTsetup",2),0))) {

                                                    current_statement_begin__ = 833;
                                                    stan::math::assign(get_base1_lhs(sTDPREDEFFECT,get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),1,"TDPREDEFFECTsetup",2),get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),2,"TDPREDEFFECTsetup",2),"sTDPREDEFFECT",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),5,"TDPREDEFFECTsetup",2)),statei,"ukfstates",1),get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),4,"TDPREDEFFECTsetup",2),get_base1(TDPREDEFFECTvalues,ri,2,"TDPREDEFFECTvalues",1),get_base1(TDPREDEFFECTvalues,ri,3,"TDPREDEFFECTvalues",1),get_base1(TDPREDEFFECTvalues,ri,4,"TDPREDEFFECTvalues",1), pstream__));
                                                }
                                            }
                                            current_statement_begin__ = 838;
                                            for (int ri = 1; ri <= size(PARSsetup); ++ri) {

                                                current_statement_begin__ = 839;
                                                if (as_bool(logical_gt(get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),5,"PARSsetup",2),0))) {

                                                    current_statement_begin__ = 840;
                                                    stan::math::assign(get_base1_lhs(sPARS,get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),1,"PARSsetup",2),get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),2,"PARSsetup",2),"sPARS",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),5,"PARSsetup",2)),statei,"ukfstates",1),get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),4,"PARSsetup",2),get_base1(PARSvalues,ri,2,"PARSvalues",1),get_base1(PARSvalues,ri,3,"PARSvalues",1),get_base1(PARSvalues,ri,4,"PARSvalues",1), pstream__));
                                                }
                                            }
                                        }
                                        current_statement_begin__ = 845;
                                        if (as_bool(logical_lte(statei,(2 + (2 * nlatentpop))))) {

                                            current_statement_begin__ = 846;
                                            stan::math::assign(get_base1_lhs(rkstates,ki,"rkstates",1), add(multiply(sDRIFT,state),stan::model::rvalue(sCINT, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sCINT")));
                                        } else if (as_bool(logical_lte(statei,((2 + (2 * nlatentpop)) + ndynerror)))) {

                                            current_statement_begin__ = 848;
                                            stan::math::assign(get_base1_lhs(rkstates,ki,"rkstates",1), add(add(multiply(sDRIFT,state),stan::model::rvalue(sCINT, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sCINT")),multiply(stan::model::rvalue(sDIFFUSION, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(derrind,(statei - (2 + (2 * nlatentpop))),"derrind",1)), stan::model::nil_index_list())), "sDIFFUSION"),dynerror)));
                                        } else {
                                            current_statement_begin__ = 849;
                                            stan::math::assign(get_base1_lhs(rkstates,ki,"rkstates",1), subtract(add(multiply(sDRIFT,state),stan::model::rvalue(sCINT, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sCINT")),multiply(stan::model::rvalue(sDIFFUSION, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(derrind,(statei - ((2 + (2 * nlatentpop)) + ndynerror)),"derrind",1)), stan::model::nil_index_list())), "sDIFFUSION"),dynerror)));
                                        }
                                    }
                                    current_statement_begin__ = 852;
                                    stan::math::assign(state, add(get_base1(rkstates,5,"rkstates",1),multiply((get_base1(dTsmall,rowi,"dTsmall",1) / 6),add(add(add(get_base1(rkstates,1,"rkstates",1),multiply(2,get_base1(rkstates,2,"rkstates",1))),multiply(2,get_base1(rkstates,3,"rkstates",1))),get_base1(rkstates,4,"rkstates",1)))));
                                }
                            }
                            current_statement_begin__ = 857;
                            if (as_bool(logical_eq(lineardynamics,1))) {

                                current_statement_begin__ = 859;
                                if (as_bool(logical_eq(ukfpop,1))) {

                                    current_statement_begin__ = 861;
                                    for (int ri = 1; ri <= size(DRIFTsetup); ++ri) {

                                        current_statement_begin__ = 862;
                                        if (as_bool(logical_gt(get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),5,"DRIFTsetup",2),0))) {

                                            current_statement_begin__ = 863;
                                            stan::math::assign(get_base1_lhs(sDRIFT,get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),1,"DRIFTsetup",2),get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),2,"DRIFTsetup",2),"sDRIFT",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),5,"DRIFTsetup",2)),statei,"ukfstates",1),get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),4,"DRIFTsetup",2),get_base1(DRIFTvalues,ri,2,"DRIFTvalues",1),get_base1(DRIFTvalues,ri,3,"DRIFTvalues",1),get_base1(DRIFTvalues,ri,4,"DRIFTvalues",1), pstream__));
                                        }
                                    }
                                    current_statement_begin__ = 868;
                                    for (int ri = 1; ri <= size(DIFFUSIONsetup); ++ri) {

                                        current_statement_begin__ = 869;
                                        if (as_bool(logical_gt(get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),5,"DIFFUSIONsetup",2),0))) {

                                            current_statement_begin__ = 870;
                                            stan::math::assign(get_base1_lhs(sDIFFUSION,get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),1,"DIFFUSIONsetup",2),get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),2,"DIFFUSIONsetup",2),"sDIFFUSION",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),5,"DIFFUSIONsetup",2)),statei,"ukfstates",1),get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),4,"DIFFUSIONsetup",2),get_base1(DIFFUSIONvalues,ri,2,"DIFFUSIONvalues",1),get_base1(DIFFUSIONvalues,ri,3,"DIFFUSIONvalues",1),get_base1(DIFFUSIONvalues,ri,4,"DIFFUSIONvalues",1), pstream__));
                                        }
                                    }
                                    current_statement_begin__ = 875;
                                    for (int ri = 1; ri <= size(CINTsetup); ++ri) {

                                        current_statement_begin__ = 876;
                                        if (as_bool(logical_gt(get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),5,"CINTsetup",2),0))) {

                                            current_statement_begin__ = 877;
                                            stan::math::assign(get_base1_lhs(sCINT,get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),1,"CINTsetup",2),get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),2,"CINTsetup",2),"sCINT",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),5,"CINTsetup",2)),statei,"ukfstates",1),get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),4,"CINTsetup",2),get_base1(CINTvalues,ri,2,"CINTvalues",1),get_base1(CINTvalues,ri,3,"CINTvalues",1),get_base1(CINTvalues,ri,4,"CINTvalues",1), pstream__));
                                        }
                                    }
                                    current_statement_begin__ = 882;
                                    for (int ri = 1; ri <= size(TDPREDEFFECTsetup); ++ri) {

                                        current_statement_begin__ = 883;
                                        if (as_bool(logical_gt(get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),5,"TDPREDEFFECTsetup",2),0))) {

                                            current_statement_begin__ = 884;
                                            stan::math::assign(get_base1_lhs(sTDPREDEFFECT,get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),1,"TDPREDEFFECTsetup",2),get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),2,"TDPREDEFFECTsetup",2),"sTDPREDEFFECT",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),5,"TDPREDEFFECTsetup",2)),statei,"ukfstates",1),get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),4,"TDPREDEFFECTsetup",2),get_base1(TDPREDEFFECTvalues,ri,2,"TDPREDEFFECTvalues",1),get_base1(TDPREDEFFECTvalues,ri,3,"TDPREDEFFECTvalues",1),get_base1(TDPREDEFFECTvalues,ri,4,"TDPREDEFFECTvalues",1), pstream__));
                                        }
                                    }
                                    current_statement_begin__ = 889;
                                    for (int ri = 1; ri <= size(PARSsetup); ++ri) {

                                        current_statement_begin__ = 890;
                                        if (as_bool(logical_gt(get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),5,"PARSsetup",2),0))) {

                                            current_statement_begin__ = 891;
                                            stan::math::assign(get_base1_lhs(sPARS,get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),1,"PARSsetup",2),get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),2,"PARSsetup",2),"sPARS",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),5,"PARSsetup",2)),statei,"ukfstates",1),get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),4,"PARSsetup",2),get_base1(PARSvalues,ri,2,"PARSvalues",1),get_base1(PARSvalues,ri,3,"PARSvalues",1),get_base1(PARSvalues,ri,4,"PARSvalues",1), pstream__));
                                        }
                                    }
                                }
                                current_statement_begin__ = 895;
                                if (as_bool(logical_lte(statei,((2 + (2 * nlatentpop)) + 1)))) {

                                    current_statement_begin__ = 896;
                                    if (as_bool(logical_eq(continuoustime,1))) {

                                        current_statement_begin__ = 897;
                                        if (as_bool(logical_eq(driftdiagonly,1))) {
                                            current_statement_begin__ = 897;
                                            stan::math::assign(discreteDRIFT, matrix_diagexp(multiply(sDRIFT,get_base1(dT,rowi,"dT",1)), pstream__));
                                        }
                                        current_statement_begin__ = 898;
                                        if (as_bool(logical_eq(driftdiagonly,0))) {
                                            current_statement_begin__ = 898;
                                            stan::math::assign(discreteDRIFT, matrix_exp(multiply(sDRIFT,get_base1(dT,rowi,"dT",1))));
                                        }
                                        current_statement_begin__ = 899;
                                        stan::math::assign(discreteCINT, multiply(mdivide_left(sDRIFT,subtract(discreteDRIFT,IIlatent)),stan::model::rvalue(sCINT, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sCINT")));
                                        current_statement_begin__ = 902;
                                        stan::model::assign(discreteDIFFUSION, 
                                                    stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list())), 
                                                    discreteDIFFUSIONcalc(stan::model::rvalue(sDRIFT, stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list())), "sDRIFT"),stan::model::rvalue(sDIFFUSION, stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list())), "sDIFFUSION"),get_base1(dT,rowi,"dT",1), pstream__), 
                                                    "assigning variable discreteDIFFUSION");
                                    }
                                    current_statement_begin__ = 904;
                                    if (as_bool(logical_eq(continuoustime,0))) {

                                        current_statement_begin__ = 905;
                                        stan::math::assign(discreteDRIFT, sDRIFT);
                                        current_statement_begin__ = 906;
                                        stan::math::assign(discreteCINT, stan::model::rvalue(sCINT, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sCINT"));
                                        current_statement_begin__ = 907;
                                        stan::math::assign(discreteDIFFUSION, sDIFFUSION);
                                    }
                                }
                                current_statement_begin__ = 910;
                                stan::math::assign(state, add(multiply(discreteDRIFT,state),discreteCINT));
                                current_statement_begin__ = 911;
                                if (as_bool((primitive_value(logical_gt(statei,(2 + (2 * nlatentpop)))) && primitive_value(logical_lte(statei,((2 + (2 * nlatentpop)) + ndynerror)))))) {
                                    current_statement_begin__ = 911;
                                    stan::math::assign(state, add(state, multiply(stan::model::rvalue(discreteDIFFUSION, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(derrind,(statei - (2 + (2 * nlatentpop))),"derrind",1)), stan::model::nil_index_list())), "discreteDIFFUSION"),dynerror)));
                                }
                                current_statement_begin__ = 912;
                                if (as_bool(logical_gt(statei,((2 + (2 * nlatentpop)) + ndynerror)))) {
                                    current_statement_begin__ = 912;
                                    stan::math::assign(state, add(state, multiply(minus(stan::model::rvalue(discreteDIFFUSION, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(derrind,(statei - ((2 + (2 * nlatentpop)) + ndynerror)),"derrind",1)), stan::model::nil_index_list())), "discreteDIFFUSION")),dynerror)));
                                }
                            }
                        }
                        current_statement_begin__ = 917;
                        if (as_bool(logical_eq(ukfpop,1))) {

                            current_statement_begin__ = 919;
                            for (int ri = 1; ri <= size(DRIFTsetup); ++ri) {

                                current_statement_begin__ = 920;
                                if (as_bool(logical_gt(get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),5,"DRIFTsetup",2),0))) {

                                    current_statement_begin__ = 921;
                                    stan::math::assign(get_base1_lhs(sDRIFT,get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),1,"DRIFTsetup",2),get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),2,"DRIFTsetup",2),"sDRIFT",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),5,"DRIFTsetup",2)),statei,"ukfstates",1),get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),4,"DRIFTsetup",2),get_base1(DRIFTvalues,ri,2,"DRIFTvalues",1),get_base1(DRIFTvalues,ri,3,"DRIFTvalues",1),get_base1(DRIFTvalues,ri,4,"DRIFTvalues",1), pstream__));
                                }
                            }
                            current_statement_begin__ = 926;
                            for (int ri = 1; ri <= size(DIFFUSIONsetup); ++ri) {

                                current_statement_begin__ = 927;
                                if (as_bool(logical_gt(get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),5,"DIFFUSIONsetup",2),0))) {

                                    current_statement_begin__ = 928;
                                    stan::math::assign(get_base1_lhs(sDIFFUSION,get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),1,"DIFFUSIONsetup",2),get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),2,"DIFFUSIONsetup",2),"sDIFFUSION",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),5,"DIFFUSIONsetup",2)),statei,"ukfstates",1),get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),4,"DIFFUSIONsetup",2),get_base1(DIFFUSIONvalues,ri,2,"DIFFUSIONvalues",1),get_base1(DIFFUSIONvalues,ri,3,"DIFFUSIONvalues",1),get_base1(DIFFUSIONvalues,ri,4,"DIFFUSIONvalues",1), pstream__));
                                }
                            }
                            current_statement_begin__ = 933;
                            for (int ri = 1; ri <= size(CINTsetup); ++ri) {

                                current_statement_begin__ = 934;
                                if (as_bool(logical_gt(get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),5,"CINTsetup",2),0))) {

                                    current_statement_begin__ = 935;
                                    stan::math::assign(get_base1_lhs(sCINT,get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),1,"CINTsetup",2),get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),2,"CINTsetup",2),"sCINT",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),5,"CINTsetup",2)),statei,"ukfstates",1),get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),4,"CINTsetup",2),get_base1(CINTvalues,ri,2,"CINTvalues",1),get_base1(CINTvalues,ri,3,"CINTvalues",1),get_base1(CINTvalues,ri,4,"CINTvalues",1), pstream__));
                                }
                            }
                            current_statement_begin__ = 940;
                            for (int ri = 1; ri <= size(TDPREDEFFECTsetup); ++ri) {

                                current_statement_begin__ = 941;
                                if (as_bool(logical_gt(get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),5,"TDPREDEFFECTsetup",2),0))) {

                                    current_statement_begin__ = 942;
                                    stan::math::assign(get_base1_lhs(sTDPREDEFFECT,get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),1,"TDPREDEFFECTsetup",2),get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),2,"TDPREDEFFECTsetup",2),"sTDPREDEFFECT",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),5,"TDPREDEFFECTsetup",2)),statei,"ukfstates",1),get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),4,"TDPREDEFFECTsetup",2),get_base1(TDPREDEFFECTvalues,ri,2,"TDPREDEFFECTvalues",1),get_base1(TDPREDEFFECTvalues,ri,3,"TDPREDEFFECTvalues",1),get_base1(TDPREDEFFECTvalues,ri,4,"TDPREDEFFECTvalues",1), pstream__));
                                }
                            }
                            current_statement_begin__ = 947;
                            for (int ri = 1; ri <= size(PARSsetup); ++ri) {

                                current_statement_begin__ = 948;
                                if (as_bool(logical_gt(get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),5,"PARSsetup",2),0))) {

                                    current_statement_begin__ = 949;
                                    stan::math::assign(get_base1_lhs(sPARS,get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),1,"PARSsetup",2),get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),2,"PARSsetup",2),"sPARS",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),5,"PARSsetup",2)),statei,"ukfstates",1),get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),4,"PARSsetup",2),get_base1(PARSvalues,ri,2,"PARSvalues",1),get_base1(PARSvalues,ri,3,"PARSvalues",1),get_base1(PARSvalues,ri,4,"PARSvalues",1), pstream__));
                                }
                            }
                        }
                        current_statement_begin__ = 953;
                        if (as_bool(logical_gt(ntdpred,0))) {
                            current_statement_begin__ = 953;
                            stan::math::assign(state, add(state, multiply(sTDPREDEFFECT,get_base1(tdpreds,rowi,"tdpreds",1))));
                        }
                        current_statement_begin__ = 954;
                        stan::model::assign(ukfstates, 
                                    stan::model::cons_list(stan::model::index_min_max(1, nlatent), stan::model::cons_list(stan::model::index_uni(statei), stan::model::nil_index_list())), 
                                    state, 
                                    "assigning variable ukfstates");
                        current_statement_begin__ = 955;
                        if (as_bool(logical_eq(statei,2))) {
                            current_statement_begin__ = 955;
                            stan::model::assign(ukfstates, 
                                        stan::model::cons_list(stan::model::index_min_max(1, nlatent), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                                        state, 
                                        "assigning variable ukfstates");
                        }
                    }
                    current_statement_begin__ = 958;
                    stan::math::assign(get_base1_lhs(etaprior,rowi,"etaprior",1), colMeans(transpose(ukfstates), pstream__));
                    current_statement_begin__ = 959;
                    stan::math::assign(get_base1_lhs(etapriorcov,rowi,"etapriorcov",1), divide(cov_of_matrix(transpose(ukfstates), pstream__),asquared));
                }
                current_statement_begin__ = 962;
                if (as_bool((primitive_value(logical_eq(intoverstates,0)) && primitive_value(logical_eq(lineardynamics,1))))) {

                    current_statement_begin__ = 963;
                    if (as_bool(logical_eq(get_base1(T0check,rowi,"T0check",1),1))) {
                        current_statement_begin__ = 963;
                        stan::math::assign(get_base1_lhs(etaupd,rowi,"etaupd",1), add(get_base1(etaprior,rowi,"etaprior",1),multiply(sT0VAR,stan::model::rvalue(etaupdbasestates, stan::model::cons_list(stan::model::index_min_max((1 + ((rowi - 1) * nlatent)), (rowi * nlatent)), stan::model::nil_index_list()), "etaupdbasestates"))));
                    }
                    current_statement_begin__ = 964;
                    if (as_bool(logical_eq(get_base1(T0check,rowi,"T0check",1),0))) {
                        current_statement_begin__ = 964;
                        stan::math::assign(get_base1_lhs(etaupd,rowi,"etaupd",1), add(get_base1(etaprior,rowi,"etaprior",1),multiply(sDIFFUSION,stan::model::rvalue(etaupdbasestates, stan::model::cons_list(stan::model::index_min_max((1 + ((rowi - 1) * nlatent)), (rowi * nlatent)), stan::model::nil_index_list()), "etaupdbasestates"))));
                    }
                }
                current_statement_begin__ = 967;
                if (as_bool((primitive_value(logical_eq(nobsi,0)) && primitive_value(logical_eq(intoverstates,1))))) {

                    current_statement_begin__ = 968;
                    stan::math::assign(get_base1_lhs(etaupdcov,rowi,"etaupdcov",1), get_base1(etapriorcov,rowi,"etapriorcov",1));
                    current_statement_begin__ = 969;
                    stan::math::assign(get_base1_lhs(etaupd,rowi,"etaupd",1), get_base1(etaprior,rowi,"etaprior",1));
                }
                current_statement_begin__ = 972;
                if (as_bool(logical_gt(nobsi,0))) {
                    {
                    current_statement_begin__ = 974;
                    validate_non_negative_index("cindex", "(intoverstates ? nobsi : get_base1(ncont_y,rowi,\"ncont_y\",1) )", (intoverstates ? nobsi : get_base1(ncont_y,rowi,"ncont_y",1) ));
                    vector<int> cindex((intoverstates ? nobsi : get_base1(ncont_y,rowi,"ncont_y",1) ), 0);
                    stan::math::fill(cindex, std::numeric_limits<int>::min());


                    current_statement_begin__ = 976;
                    if (as_bool(logical_eq(intoverstates,0))) {
                        current_statement_begin__ = 976;
                        stan::math::assign(cindex, o0);
                    }
                    current_statement_begin__ = 977;
                    if (as_bool(logical_eq(intoverstates,1))) {
                        current_statement_begin__ = 977;
                        stan::math::assign(cindex, o);
                    }
                    current_statement_begin__ = 979;
                    if (as_bool(logical_eq(ukf,0))) {

                        current_statement_begin__ = 980;
                        if (as_bool(logical_eq(intoverstates,1))) {

                            current_statement_begin__ = 981;
                            stan::model::assign(ypred, 
                                        stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list()), 
                                        add(stan::model::rvalue(sMANIFESTMEANS, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sMANIFESTMEANS"),multiply(stan::model::rvalue(sLAMBDA, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sLAMBDA"),get_base1(etaprior,rowi,"etaprior",1))), 
                                        "assigning variable ypred");
                            current_statement_begin__ = 982;
                            stan::model::assign(ypredcov, 
                                        stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), 
                                        add(quad_form(get_base1(etapriorcov,rowi,"etapriorcov",1),transpose(stan::model::rvalue(sLAMBDA, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sLAMBDA"))),stan::model::rvalue(sMANIFESTVAR, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), "sMANIFESTVAR")), 
                                        "assigning variable ypredcov");
                            current_statement_begin__ = 983;
                            for (int wi = 1; wi <= nmanifest; ++wi) {

                                current_statement_begin__ = 984;
                                if (as_bool((primitive_value(logical_eq(get_base1(manifesttype,wi,"manifesttype",1),1)) && primitive_value(logical_neq(get_base1(get_base1(Y,rowi,"Y",1),wi,"Y",2),99999))))) {
                                    current_statement_begin__ = 984;
                                    stan::math::assign(get_base1_lhs(ypredcov,wi,wi,"ypredcov",1), (get_base1(ypredcov,wi,wi,"ypredcov",1) + fabs(((get_base1(ypred,wi,"ypred",1) - 1) * get_base1(ypred,wi,"ypred",1)))));
                                }
                            }
                            current_statement_begin__ = 986;
                            stan::model::assign(K, 
                                        stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), 
                                        mdivide_right(multiply(get_base1(etapriorcov,rowi,"etapriorcov",1),transpose(stan::model::rvalue(sLAMBDA, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sLAMBDA"))),stan::model::rvalue(ypredcov, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), "ypredcov")), 
                                        "assigning variable K");
                            current_statement_begin__ = 987;
                            stan::math::assign(get_base1_lhs(etaupdcov,rowi,"etaupdcov",1), multiply(subtract(IIlatent,multiply(stan::model::rvalue(K, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), "K"),stan::model::rvalue(sLAMBDA, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sLAMBDA"))),get_base1(etapriorcov,rowi,"etapriorcov",1)));
                        }
                        current_statement_begin__ = 989;
                        if (as_bool(logical_eq(intoverstates,0))) {

                            current_statement_begin__ = 990;
                            if (as_bool(logical_gt(get_base1(ncont_y,rowi,"ncont_y",1),0))) {
                                current_statement_begin__ = 990;
                                stan::model::assign(ypred, 
                                            stan::model::cons_list(stan::model::index_multi(o0), stan::model::nil_index_list()), 
                                            add(stan::model::rvalue(sMANIFESTMEANS, stan::model::cons_list(stan::model::index_multi(o0), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sMANIFESTMEANS"),multiply(stan::model::rvalue(sLAMBDA, stan::model::cons_list(stan::model::index_multi(o0), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sLAMBDA"),get_base1(etaupd,rowi,"etaupd",1))), 
                                            "assigning variable ypred");
                            }
                            current_statement_begin__ = 991;
                            if (as_bool(logical_gt(get_base1(nbinary_y,rowi,"nbinary_y",1),0))) {
                                current_statement_begin__ = 991;
                                stan::model::assign(ypred, 
                                            stan::model::cons_list(stan::model::index_multi(o1), stan::model::nil_index_list()), 
                                            to_vector(inv_logit(to_array_1d(add(stan::model::rvalue(sMANIFESTMEANS, stan::model::cons_list(stan::model::index_multi(o1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sMANIFESTMEANS"),multiply(stan::model::rvalue(sLAMBDA, stan::model::cons_list(stan::model::index_multi(o1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sLAMBDA"),get_base1(etaupd,rowi,"etaupd",1)))))), 
                                            "assigning variable ypred");
                            }
                            current_statement_begin__ = 992;
                            stan::model::assign(ypredcov, 
                                        stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), 
                                        stan::model::rvalue(sMANIFESTVAR, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), "sMANIFESTVAR"), 
                                        "assigning variable ypredcov");
                        }
                    }
                    current_statement_begin__ = 997;
                    if (as_bool(logical_eq(ukf,1))) {

                        current_statement_begin__ = 998;
                        for (int statei = 2; statei <= cols(ukfmeasures); ++statei) {

                            current_statement_begin__ = 999;
                            stan::math::assign(state, stan::model::rvalue(ukfstates, stan::model::cons_list(stan::model::index_min_max(1, nlatent), stan::model::cons_list(stan::model::index_uni(statei), stan::model::nil_index_list())), "ukfstates"));
                            current_statement_begin__ = 1001;
                            if (as_bool(logical_eq(ukfpop,1))) {

                                current_statement_begin__ = 1003;
                                for (int ri = 1; ri <= size(LAMBDAsetup); ++ri) {

                                    current_statement_begin__ = 1004;
                                    if (as_bool(logical_gt(get_base1(get_base1(LAMBDAsetup,ri,"LAMBDAsetup",1),5,"LAMBDAsetup",2),0))) {

                                        current_statement_begin__ = 1005;
                                        stan::math::assign(get_base1_lhs(sLAMBDA,get_base1(get_base1(LAMBDAsetup,ri,"LAMBDAsetup",1),1,"LAMBDAsetup",2),get_base1(get_base1(LAMBDAsetup,ri,"LAMBDAsetup",1),2,"LAMBDAsetup",2),"sLAMBDA",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(LAMBDAsetup,ri,"LAMBDAsetup",1),5,"LAMBDAsetup",2)),statei,"ukfstates",1),get_base1(get_base1(LAMBDAsetup,ri,"LAMBDAsetup",1),4,"LAMBDAsetup",2),get_base1(LAMBDAvalues,ri,2,"LAMBDAvalues",1),get_base1(LAMBDAvalues,ri,3,"LAMBDAvalues",1),get_base1(LAMBDAvalues,ri,4,"LAMBDAvalues",1), pstream__));
                                    }
                                }
                                current_statement_begin__ = 1009;
                                for (int ri = 1; ri <= size(MANIFESTMEANSsetup); ++ri) {

                                    current_statement_begin__ = 1010;
                                    if (as_bool(logical_gt(get_base1(get_base1(MANIFESTMEANSsetup,ri,"MANIFESTMEANSsetup",1),5,"MANIFESTMEANSsetup",2),0))) {

                                        current_statement_begin__ = 1011;
                                        stan::math::assign(get_base1_lhs(sMANIFESTMEANS,get_base1(get_base1(MANIFESTMEANSsetup,ri,"MANIFESTMEANSsetup",1),1,"MANIFESTMEANSsetup",2),get_base1(get_base1(MANIFESTMEANSsetup,ri,"MANIFESTMEANSsetup",1),2,"MANIFESTMEANSsetup",2),"sMANIFESTMEANS",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(MANIFESTMEANSsetup,ri,"MANIFESTMEANSsetup",1),5,"MANIFESTMEANSsetup",2)),statei,"ukfstates",1),get_base1(get_base1(MANIFESTMEANSsetup,ri,"MANIFESTMEANSsetup",1),4,"MANIFESTMEANSsetup",2),get_base1(MANIFESTMEANSvalues,ri,2,"MANIFESTMEANSvalues",1),get_base1(MANIFESTMEANSvalues,ri,3,"MANIFESTMEANSvalues",1),get_base1(MANIFESTMEANSvalues,ri,4,"MANIFESTMEANSvalues",1), pstream__));
                                    }
                                }
                                current_statement_begin__ = 1015;
                                for (int ri = 1; ri <= size(MANIFESTVARsetup); ++ri) {

                                    current_statement_begin__ = 1016;
                                    if (as_bool(logical_gt(get_base1(get_base1(MANIFESTVARsetup,ri,"MANIFESTVARsetup",1),5,"MANIFESTVARsetup",2),0))) {

                                        current_statement_begin__ = 1017;
                                        stan::math::assign(get_base1_lhs(sMANIFESTVAR,get_base1(get_base1(MANIFESTVARsetup,ri,"MANIFESTVARsetup",1),1,"MANIFESTVARsetup",2),get_base1(get_base1(MANIFESTVARsetup,ri,"MANIFESTVARsetup",1),2,"MANIFESTVARsetup",2),"sMANIFESTVAR",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(MANIFESTVARsetup,ri,"MANIFESTVARsetup",1),5,"MANIFESTVARsetup",2)),statei,"ukfstates",1),get_base1(get_base1(MANIFESTVARsetup,ri,"MANIFESTVARsetup",1),4,"MANIFESTVARsetup",2),get_base1(MANIFESTVARvalues,ri,2,"MANIFESTVARvalues",1),get_base1(MANIFESTVARvalues,ri,3,"MANIFESTVARvalues",1),get_base1(MANIFESTVARvalues,ri,4,"MANIFESTVARvalues",1), pstream__));
                                    }
                                }
                                current_statement_begin__ = 1021;
                                for (int ri = 1; ri <= size(PARSsetup); ++ri) {

                                    current_statement_begin__ = 1022;
                                    if (as_bool(logical_gt(get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),5,"PARSsetup",2),0))) {

                                        current_statement_begin__ = 1023;
                                        stan::math::assign(get_base1_lhs(sPARS,get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),1,"PARSsetup",2),get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),2,"PARSsetup",2),"sPARS",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),5,"PARSsetup",2)),statei,"ukfstates",1),get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),4,"PARSsetup",2),get_base1(PARSvalues,ri,2,"PARSvalues",1),get_base1(PARSvalues,ri,3,"PARSvalues",1),get_base1(PARSvalues,ri,4,"PARSvalues",1), pstream__));
                                    }
                                }
                            }
                            current_statement_begin__ = 1028;
                            if (as_bool(logical_gt(get_base1(ncont_y,rowi,"ncont_y",1),0))) {
                                current_statement_begin__ = 1028;
                                stan::model::assign(ukfmeasures, 
                                            stan::model::cons_list(stan::model::index_multi(o0), stan::model::cons_list(stan::model::index_uni(statei), stan::model::nil_index_list())), 
                                            add(stan::model::rvalue(sMANIFESTMEANS, stan::model::cons_list(stan::model::index_multi(o0), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sMANIFESTMEANS"),multiply(stan::model::rvalue(sLAMBDA, stan::model::cons_list(stan::model::index_multi(o0), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sLAMBDA"),state)), 
                                            "assigning variable ukfmeasures");
                            }
                            current_statement_begin__ = 1029;
                            if (as_bool(logical_gt(get_base1(nbinary_y,rowi,"nbinary_y",1),0))) {

                                current_statement_begin__ = 1030;
                                stan::model::assign(ukfmeasures, 
                                            stan::model::cons_list(stan::model::index_multi(o1), stan::model::cons_list(stan::model::index_uni(statei), stan::model::nil_index_list())), 
                                            to_vector(inv_logit(to_array_1d(add(stan::model::rvalue(sMANIFESTMEANS, stan::model::cons_list(stan::model::index_multi(o1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sMANIFESTMEANS"),multiply(stan::model::rvalue(sLAMBDA, stan::model::cons_list(stan::model::index_multi(o1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sLAMBDA"),state))))), 
                                            "assigning variable ukfmeasures");
                            }
                            current_statement_begin__ = 1032;
                            if (as_bool(logical_eq(statei,2))) {

                                current_statement_begin__ = 1033;
                                if (as_bool(logical_gt(get_base1(ncont_y,rowi,"ncont_y",1),0))) {
                                    current_statement_begin__ = 1033;
                                    stan::model::assign(ukfmeasures, 
                                                stan::model::cons_list(stan::model::index_multi(o0), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                                                add(stan::model::rvalue(sMANIFESTMEANS, stan::model::cons_list(stan::model::index_multi(o0), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sMANIFESTMEANS"),multiply(stan::model::rvalue(sLAMBDA, stan::model::cons_list(stan::model::index_multi(o0), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sLAMBDA"),state)), 
                                                "assigning variable ukfmeasures");
                                }
                                current_statement_begin__ = 1034;
                                if (as_bool(logical_gt(get_base1(nbinary_y,rowi,"nbinary_y",1),0))) {

                                    current_statement_begin__ = 1035;
                                    stan::model::assign(ukfmeasures, 
                                                stan::model::cons_list(stan::model::index_multi(o1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                                                to_vector(inv_logit(to_array_1d(add(stan::model::rvalue(sMANIFESTMEANS, stan::model::cons_list(stan::model::index_multi(o1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sMANIFESTMEANS"),multiply(stan::model::rvalue(sLAMBDA, stan::model::cons_list(stan::model::index_multi(o1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sLAMBDA"),state))))), 
                                                "assigning variable ukfmeasures");
                                }
                            }
                        }
                        current_statement_begin__ = 1040;
                        stan::model::assign(ypred, 
                                    stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list()), 
                                    colMeans(transpose(stan::model::rvalue(ukfmeasures, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "ukfmeasures")), pstream__), 
                                    "assigning variable ypred");
                        current_statement_begin__ = 1041;
                        stan::model::assign(ypredcov, 
                                    stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), 
                                    add(divide(cov_of_matrix(transpose(stan::model::rvalue(ukfmeasures, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "ukfmeasures")), pstream__),asquared),stan::model::rvalue(sMANIFESTVAR, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), "sMANIFESTVAR")), 
                                    "assigning variable ypredcov");
                        current_statement_begin__ = 1042;
                        for (int wi = 1; wi <= nmanifest; ++wi) {

                            current_statement_begin__ = 1043;
                            if (as_bool((primitive_value(logical_eq(get_base1(manifesttype,wi,"manifesttype",1),1)) && primitive_value(logical_neq(get_base1(get_base1(Y,rowi,"Y",1),wi,"Y",2),99999))))) {
                                current_statement_begin__ = 1043;
                                stan::math::assign(get_base1_lhs(ypredcov,wi,wi,"ypredcov",1), (get_base1(ypredcov,wi,wi,"ypredcov",1) + fabs(((get_base1(ypred,wi,"ypred",1) - 1) * get_base1(ypred,wi,"ypred",1)))));
                            }
                        }
                        current_statement_begin__ = 1045;
                        stan::model::assign(K, 
                                    stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), 
                                    mdivide_right(divide(crosscov(transpose(ukfstates),transpose(stan::model::rvalue(ukfmeasures, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "ukfmeasures")), pstream__),asquared),stan::model::rvalue(ypredcov, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), "ypredcov")), 
                                    "assigning variable K");
                        current_statement_begin__ = 1046;
                        stan::math::assign(get_base1_lhs(etaupdcov,rowi,"etaupdcov",1), subtract(get_base1(etapriorcov,rowi,"etapriorcov",1),quad_form(stan::model::rvalue(ypredcov, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), "ypredcov"),transpose(stan::model::rvalue(K, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), "K")))));
                    }
                    current_statement_begin__ = 1051;
                    stan::model::assign(err, 
                                stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list()), 
                                subtract(stan::model::rvalue(Y, stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), "Y"),stan::model::rvalue(ypred, stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list()), "ypred")), 
                                "assigning variable err");
                    current_statement_begin__ = 1053;
                    if (as_bool(logical_eq(intoverstates,1))) {
                        current_statement_begin__ = 1053;
                        stan::model::assign(etaupd, 
                                    stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                    add(stan::model::rvalue(etaprior, stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "etaprior"),multiply(stan::model::rvalue(K, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), "K"),stan::model::rvalue(err, stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list()), "err"))), 
                                    "assigning variable etaupd");
                    }
                    current_statement_begin__ = 1057;
                    if (as_bool((primitive_value(logical_eq(intoverstates,0)) && primitive_value(logical_gt(get_base1(nbinary_y,rowi,"nbinary_y",1),0))))) {
                        current_statement_begin__ = 1057;
                        stan::math::assign(ll, (ll + sum(log(add(elt_multiply(stan::model::rvalue(Y, stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_multi(o1), stan::model::nil_index_list())), "Y"),stan::model::rvalue(ypred, stan::model::cons_list(stan::model::index_multi(o1), stan::model::nil_index_list()), "ypred")),elt_multiply(subtract(1,stan::model::rvalue(Y, stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_multi(o1), stan::model::nil_index_list())), "Y")),subtract(1,stan::model::rvalue(ypred, stan::model::cons_list(stan::model::index_multi(o1), stan::model::nil_index_list()), "ypred"))))))));
                    }
                    current_statement_begin__ = 1059;
                    if (as_bool(logical_gt(verbose,1))) {

                        current_statement_begin__ = 1060;
                        if (pstream__) {
                            stan_print(pstream__,"rowi ");
                            stan_print(pstream__,rowi);
                            stan_print(pstream__,"  si ");
                            stan_print(pstream__,si);
                            stan_print(pstream__,"  etaprior[rowi] ");
                            stan_print(pstream__,get_base1(etaprior,rowi,"etaprior",1));
                            stan_print(pstream__,"  etapriorcov[rowi] ");
                            stan_print(pstream__,get_base1(etapriorcov,rowi,"etapriorcov",1));
                            stan_print(pstream__,"  etaupd[rowi] ");
                            stan_print(pstream__,get_base1(etaupd,rowi,"etaupd",1));
                            stan_print(pstream__,"  etaupdcov[rowi] ");
                            stan_print(pstream__,get_base1(etaupdcov,rowi,"etaupdcov",1));
                            stan_print(pstream__,"  ypred ");
                            stan_print(pstream__,ypred);
                            stan_print(pstream__,"  ypredcov ");
                            stan_print(pstream__,ypredcov);
                            stan_print(pstream__,"  K ");
                            stan_print(pstream__,K);
                            stan_print(pstream__,"  sDRIFT ");
                            stan_print(pstream__,sDRIFT);
                            stan_print(pstream__," sDIFFUSION ");
                            stan_print(pstream__,sDIFFUSION);
                            stan_print(pstream__," sCINT ");
                            stan_print(pstream__,sCINT);
                            stan_print(pstream__,"  sMANIFESTVAR ");
                            stan_print(pstream__,diagonal(sMANIFESTVAR));
                            stan_print(pstream__,"  sMANIFESTMEANS ");
                            stan_print(pstream__,sMANIFESTMEANS);
                            stan_print(pstream__,"  sT0VAR");
                            stan_print(pstream__,sT0VAR);
                            stan_print(pstream__,"  rawpopsd ");
                            stan_print(pstream__,rawpopsd);
                            stan_print(pstream__,"  rawpopsdbase ");
                            stan_print(pstream__,rawpopsdbase);
                            stan_print(pstream__,"  rawpopmeans ");
                            stan_print(pstream__,rawpopmeans);
                            *pstream__ << std::endl;
                        }
                        current_statement_begin__ = 1065;
                        if (as_bool(logical_eq(lineardynamics,1))) {
                            current_statement_begin__ = 1065;
                            if (pstream__) {
                                stan_print(pstream__,"discreteDRIFT ");
                                stan_print(pstream__,discreteDRIFT);
                                stan_print(pstream__,"  discreteCINT ");
                                stan_print(pstream__,discreteCINT);
                                stan_print(pstream__,"  discreteDIFFUSION ");
                                stan_print(pstream__,discreteDIFFUSION);
                                *pstream__ << std::endl;
                            }
                        }
                    }
                    current_statement_begin__ = 1067;
                    if (as_bool(logical_gt(verbose,2))) {
                        current_statement_begin__ = 1067;
                        if (pstream__) {
                            stan_print(pstream__,"ukfstates ");
                            stan_print(pstream__,ukfstates);
                            stan_print(pstream__,"  ukfmeasures ");
                            stan_print(pstream__,ukfmeasures);
                            *pstream__ << std::endl;
                        }
                    }
                    current_statement_begin__ = 1069;
                    if (as_bool(logical_gt(size(cindex),0))) {

                        current_statement_begin__ = 1070;
                        stan::model::assign(ypredcov_sqrt, 
                                    stan::model::cons_list(stan::model::index_multi(cindex), stan::model::cons_list(stan::model::index_multi(cindex), stan::model::nil_index_list())), 
                                    cholesky_decompose(makesym(stan::model::rvalue(ypredcov, stan::model::cons_list(stan::model::index_multi(cindex), stan::model::cons_list(stan::model::index_multi(cindex), stan::model::nil_index_list())), "ypredcov"), pstream__)), 
                                    "assigning variable ypredcov_sqrt");
                        current_statement_begin__ = 1071;
                        stan::model::assign(errtrans, 
                                    stan::model::cons_list(stan::model::index_min_max((cobscount + 1), (cobscount + size(cindex))), stan::model::nil_index_list()), 
                                    mdivide_left_tri_low(stan::model::rvalue(ypredcov_sqrt, stan::model::cons_list(stan::model::index_multi(cindex), stan::model::cons_list(stan::model::index_multi(cindex), stan::model::nil_index_list())), "ypredcov_sqrt"),stan::model::rvalue(err, stan::model::cons_list(stan::model::index_multi(cindex), stan::model::nil_index_list()), "err")), 
                                    "assigning variable errtrans");
                        current_statement_begin__ = 1072;
                        stan::model::assign(errscales, 
                                    stan::model::cons_list(stan::model::index_min_max((cobscount + 1), (cobscount + size(cindex))), stan::model::nil_index_list()), 
                                    log(diagonal(stan::model::rvalue(ypredcov_sqrt, stan::model::cons_list(stan::model::index_multi(cindex), stan::model::cons_list(stan::model::index_multi(cindex), stan::model::nil_index_list())), "ypredcov_sqrt"))), 
                                    "assigning variable errscales");
                    }
                    }
                }
                }
            }
            current_statement_begin__ = 1077;
            if (as_bool((primitive_value(logical_eq(intoverstates,1)) || primitive_value(logical_gt(sum(ncont_y),0))))) {
                current_statement_begin__ = 1077;
                stan::math::assign(ll, ((ll + normal_log(errtrans,0,1)) - sum(errscales)));
            }
            }
            current_statement_begin__ = 1079;
            lp_accum__.add(ll);
            current_statement_begin__ = 1081;
            if (as_bool(logical_gt(verbose,0))) {
                current_statement_begin__ = 1081;
                if (pstream__) {
                    stan_print(pstream__,"lp = ");
                    stan_print(pstream__,get_lp(lp__, lp_accum__));
                    *pstream__ << std::endl;
                }
            }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("rawpopmeans");
        names__.push_back("rawpopsdbase");
        names__.push_back("sqrtpcov");
        names__.push_back("baseindparams");
        names__.push_back("tipredeffectparams");
        names__.push_back("tipredsimputed");
        names__.push_back("etaupdbasestates");
        names__.push_back("rawpopsd");
        names__.push_back("rawpopcorrsqrt");
        names__.push_back("rawpopcovsqrt");
        names__.push_back("T0MEANS");
        names__.push_back("LAMBDA");
        names__.push_back("DRIFT");
        names__.push_back("DIFFUSION");
        names__.push_back("MANIFESTVAR");
        names__.push_back("MANIFESTMEANS");
        names__.push_back("CINT");
        names__.push_back("T0VAR");
        names__.push_back("TDPREDEFFECT");
        names__.push_back("PARS");
        names__.push_back("asymDIFFUSION");
        names__.push_back("asymCINT");
        names__.push_back("tipreds");
        names__.push_back("TIPREDEFFECT");
        names__.push_back("popmeans");
        names__.push_back("popsd");
        names__.push_back("rawpopcov");
        names__.push_back("rawpopcorr");
        names__.push_back("linearTIPREDEFFECT");
        names__.push_back("pop_T0MEANS");
        names__.push_back("pop_LAMBDA");
        names__.push_back("pop_DRIFT");
        names__.push_back("pop_DIFFUSION");
        names__.push_back("pop_MANIFESTVAR");
        names__.push_back("pop_MANIFESTMEANS");
        names__.push_back("pop_CINT");
        names__.push_back("pop_T0VAR");
        names__.push_back("pop_TDPREDEFFECT");
        names__.push_back("pop_PARS");
        names__.push_back("asympop_DIFFUSION");
        names__.push_back("asympop_CINT");
        names__.push_back("Ygen");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(nparams);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nindvarying);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nindvaryingoffdiagonals);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((ukfpop ? 0 : (nindvarying * nsubjects) ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ntipredeffects);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nmissingtipreds);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((intoverstates ? 0 : (nlatent * ndatapoints) ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nindvarying);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nindvarying);
        dims__.push_back(nindvarying);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nindvarying);
        dims__.push_back(nindvarying);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(T0MEANSsubindex,nsubjects,"T0MEANSsubindex",1));
        dims__.push_back((T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 ));
        dims__.push_back((T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(LAMBDAsubindex,nsubjects,"LAMBDAsubindex",1));
        dims__.push_back((LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 ));
        dims__.push_back((LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(DRIFTsubindex,nsubjects,"DRIFTsubindex",1));
        dims__.push_back((DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DRIFTsetup")) : 0 ));
        dims__.push_back((DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DRIFTsetup")) : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(DIFFUSIONsubindex,nsubjects,"DIFFUSIONsubindex",1));
        dims__.push_back((DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 ));
        dims__.push_back((DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(MANIFESTVARsubindex,nsubjects,"MANIFESTVARsubindex",1));
        dims__.push_back((MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 ));
        dims__.push_back((MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(MANIFESTMEANSsubindex,nsubjects,"MANIFESTMEANSsubindex",1));
        dims__.push_back((MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 ));
        dims__.push_back((MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(CINTsubindex,nsubjects,"CINTsubindex",1));
        dims__.push_back((CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "CINTsetup")) : 0 ));
        dims__.push_back((CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "CINTsetup")) : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(T0VARsubindex,nsubjects,"T0VARsubindex",1));
        dims__.push_back((T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0VARsetup")) : 0 ));
        dims__.push_back((T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0VARsetup")) : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(TDPREDEFFECTsubindex,nsubjects,"TDPREDEFFECTsubindex",1));
        dims__.push_back((TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 ));
        dims__.push_back((TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(PARSsubindex,nsubjects,"PARSsubindex",1));
        dims__.push_back((PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "PARSsetup")) : 0 ));
        dims__.push_back((PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "PARSsetup")) : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(asymDIFFUSIONsubindex,nsubjects,"asymDIFFUSIONsubindex",1));
        dims__.push_back(nlatent);
        dims__.push_back(nlatent);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(asymCINTsubindex,nsubjects,"asymCINTsubindex",1));
        dims__.push_back((nt0meansstationary ? nlatent : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((ntipred ? nsubjects : 0 ));
        dims__.push_back((ntipred ? ntipred : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nparams);
        dims__.push_back(ntipred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nparams);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nparams);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nindvarying);
        dims__.push_back(nindvarying);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nindvarying);
        dims__.push_back(nindvarying);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nparams);
        dims__.push_back(ntipred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(T0MEANSsubindex,1,"T0MEANSsubindex",1));
        dims__.push_back((T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 ));
        dims__.push_back((T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(LAMBDAsubindex,1,"LAMBDAsubindex",1));
        dims__.push_back((LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 ));
        dims__.push_back((LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(DRIFTsubindex,1,"DRIFTsubindex",1));
        dims__.push_back((DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DRIFTsetup")) : 0 ));
        dims__.push_back((DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DRIFTsetup")) : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(DIFFUSIONsubindex,1,"DIFFUSIONsubindex",1));
        dims__.push_back((DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 ));
        dims__.push_back((DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(MANIFESTVARsubindex,1,"MANIFESTVARsubindex",1));
        dims__.push_back((MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 ));
        dims__.push_back((MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(MANIFESTMEANSsubindex,1,"MANIFESTMEANSsubindex",1));
        dims__.push_back((MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 ));
        dims__.push_back((MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(CINTsubindex,1,"CINTsubindex",1));
        dims__.push_back((CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "CINTsetup")) : 0 ));
        dims__.push_back((CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "CINTsetup")) : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(T0VARsubindex,1,"T0VARsubindex",1));
        dims__.push_back((T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0VARsetup")) : 0 ));
        dims__.push_back((T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0VARsetup")) : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(TDPREDEFFECTsubindex,1,"TDPREDEFFECTsubindex",1));
        dims__.push_back((TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 ));
        dims__.push_back((TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(PARSsubindex,1,"PARSsubindex",1));
        dims__.push_back((PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "PARSsetup")) : 0 ));
        dims__.push_back((PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "PARSsetup")) : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(asymDIFFUSIONsubindex,1,"asymDIFFUSIONsubindex",1));
        dims__.push_back(nlatent);
        dims__.push_back(nlatent);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(asymCINTsubindex,1,"asymCINTsubindex",1));
        dims__.push_back((nt0meansstationary ? nlatent : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ngenerations);
        dims__.push_back(ndatapoints);
        dims__.push_back(nmanifest);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_ctsm_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector_d rawpopmeans = in__.vector_constrain(nparams);
        vector_d rawpopsdbase = in__.vector_constrain(nindvarying);
        vector_d sqrtpcov = in__.vector_constrain(nindvaryingoffdiagonals);
        vector_d baseindparams = in__.vector_constrain((ukfpop ? 0 : (nindvarying * nsubjects) ));
        vector_d tipredeffectparams = in__.vector_constrain(ntipredeffects);
        vector_d tipredsimputed = in__.vector_constrain(nmissingtipreds);
        vector_d etaupdbasestates = in__.vector_constrain((intoverstates ? 0 : (nlatent * ndatapoints) ));
            for (int k_0__ = 0; k_0__ < nparams; ++k_0__) {
            vars__.push_back(rawpopmeans[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nindvarying; ++k_0__) {
            vars__.push_back(rawpopsdbase[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nindvaryingoffdiagonals; ++k_0__) {
            vars__.push_back(sqrtpcov[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (ukfpop ? 0 : (nindvarying * nsubjects) ); ++k_0__) {
            vars__.push_back(baseindparams[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < ntipredeffects; ++k_0__) {
            vars__.push_back(tipredeffectparams[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nmissingtipreds; ++k_0__) {
            vars__.push_back(tipredsimputed[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (intoverstates ? 0 : (nlatent * ndatapoints) ); ++k_0__) {
            vars__.push_back(etaupdbasestates[k_0__]);
            }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 351;
            validate_non_negative_index("rawpopsd", "nindvarying", nindvarying);
            vector_d rawpopsd(static_cast<Eigen::VectorXd::Index>(nindvarying));
            (void) rawpopsd;  // dummy to suppress unused var warning

            stan::math::initialize(rawpopsd, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(rawpopsd,DUMMY_VAR__);
            current_statement_begin__ = 353;
            validate_non_negative_index("rawpopcorrsqrt", "nindvarying", nindvarying);
            validate_non_negative_index("rawpopcorrsqrt", "nindvarying", nindvarying);
            matrix_d rawpopcorrsqrt(static_cast<Eigen::VectorXd::Index>(nindvarying),static_cast<Eigen::VectorXd::Index>(nindvarying));
            (void) rawpopcorrsqrt;  // dummy to suppress unused var warning

            stan::math::initialize(rawpopcorrsqrt, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(rawpopcorrsqrt,DUMMY_VAR__);
            current_statement_begin__ = 354;
            validate_non_negative_index("rawpopcovsqrt", "nindvarying", nindvarying);
            validate_non_negative_index("rawpopcovsqrt", "nindvarying", nindvarying);
            matrix_d rawpopcovsqrt(static_cast<Eigen::VectorXd::Index>(nindvarying),static_cast<Eigen::VectorXd::Index>(nindvarying));
            (void) rawpopcovsqrt;  // dummy to suppress unused var warning

            stan::math::initialize(rawpopcovsqrt, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(rawpopcovsqrt,DUMMY_VAR__);
            current_statement_begin__ = 357;
            validate_non_negative_index("T0MEANS", "(T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"T0MEANSsetup\")) : 0 )", (T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 ));
            validate_non_negative_index("T0MEANS", "(T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"T0MEANSsetup\")) : 0 )", (T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 ));
            validate_non_negative_index("T0MEANS", "get_base1(T0MEANSsubindex,nsubjects,\"T0MEANSsubindex\",1)", get_base1(T0MEANSsubindex,nsubjects,"T0MEANSsubindex",1));
            vector<matrix_d> T0MEANS(get_base1(T0MEANSsubindex,nsubjects,"T0MEANSsubindex",1), (matrix_d(static_cast<Eigen::VectorXd::Index>((T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 )))));
            stan::math::initialize(T0MEANS, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(T0MEANS,DUMMY_VAR__);
            current_statement_begin__ = 358;
            validate_non_negative_index("LAMBDA", "(LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"LAMBDAsetup\")) : 0 )", (LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 ));
            validate_non_negative_index("LAMBDA", "(LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"LAMBDAsetup\")) : 0 )", (LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 ));
            validate_non_negative_index("LAMBDA", "get_base1(LAMBDAsubindex,nsubjects,\"LAMBDAsubindex\",1)", get_base1(LAMBDAsubindex,nsubjects,"LAMBDAsubindex",1));
            vector<matrix_d> LAMBDA(get_base1(LAMBDAsubindex,nsubjects,"LAMBDAsubindex",1), (matrix_d(static_cast<Eigen::VectorXd::Index>((LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 )))));
            stan::math::initialize(LAMBDA, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(LAMBDA,DUMMY_VAR__);
            current_statement_begin__ = 359;
            validate_non_negative_index("DRIFT", "(DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"DRIFTsetup\")) : 0 )", (DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DRIFTsetup")) : 0 ));
            validate_non_negative_index("DRIFT", "(DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"DRIFTsetup\")) : 0 )", (DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DRIFTsetup")) : 0 ));
            validate_non_negative_index("DRIFT", "get_base1(DRIFTsubindex,nsubjects,\"DRIFTsubindex\",1)", get_base1(DRIFTsubindex,nsubjects,"DRIFTsubindex",1));
            vector<matrix_d> DRIFT(get_base1(DRIFTsubindex,nsubjects,"DRIFTsubindex",1), (matrix_d(static_cast<Eigen::VectorXd::Index>((DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DRIFTsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DRIFTsetup")) : 0 )))));
            stan::math::initialize(DRIFT, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(DRIFT,DUMMY_VAR__);
            current_statement_begin__ = 360;
            validate_non_negative_index("DIFFUSION", "(DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"DIFFUSIONsetup\")) : 0 )", (DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 ));
            validate_non_negative_index("DIFFUSION", "(DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"DIFFUSIONsetup\")) : 0 )", (DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 ));
            validate_non_negative_index("DIFFUSION", "get_base1(DIFFUSIONsubindex,nsubjects,\"DIFFUSIONsubindex\",1)", get_base1(DIFFUSIONsubindex,nsubjects,"DIFFUSIONsubindex",1));
            vector<matrix_d> DIFFUSION(get_base1(DIFFUSIONsubindex,nsubjects,"DIFFUSIONsubindex",1), (matrix_d(static_cast<Eigen::VectorXd::Index>((DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 )))));
            stan::math::initialize(DIFFUSION, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(DIFFUSION,DUMMY_VAR__);
            current_statement_begin__ = 361;
            validate_non_negative_index("MANIFESTVAR", "(MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"MANIFESTVARsetup\")) : 0 )", (MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 ));
            validate_non_negative_index("MANIFESTVAR", "(MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"MANIFESTVARsetup\")) : 0 )", (MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 ));
            validate_non_negative_index("MANIFESTVAR", "get_base1(MANIFESTVARsubindex,nsubjects,\"MANIFESTVARsubindex\",1)", get_base1(MANIFESTVARsubindex,nsubjects,"MANIFESTVARsubindex",1));
            vector<matrix_d> MANIFESTVAR(get_base1(MANIFESTVARsubindex,nsubjects,"MANIFESTVARsubindex",1), (matrix_d(static_cast<Eigen::VectorXd::Index>((MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 )))));
            stan::math::initialize(MANIFESTVAR, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(MANIFESTVAR,DUMMY_VAR__);
            current_statement_begin__ = 362;
            validate_non_negative_index("MANIFESTMEANS", "(MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"MANIFESTMEANSsetup\")) : 0 )", (MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 ));
            validate_non_negative_index("MANIFESTMEANS", "(MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"MANIFESTMEANSsetup\")) : 0 )", (MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 ));
            validate_non_negative_index("MANIFESTMEANS", "get_base1(MANIFESTMEANSsubindex,nsubjects,\"MANIFESTMEANSsubindex\",1)", get_base1(MANIFESTMEANSsubindex,nsubjects,"MANIFESTMEANSsubindex",1));
            vector<matrix_d> MANIFESTMEANS(get_base1(MANIFESTMEANSsubindex,nsubjects,"MANIFESTMEANSsubindex",1), (matrix_d(static_cast<Eigen::VectorXd::Index>((MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 )))));
            stan::math::initialize(MANIFESTMEANS, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(MANIFESTMEANS,DUMMY_VAR__);
            current_statement_begin__ = 363;
            validate_non_negative_index("CINT", "(CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"CINTsetup\")) : 0 )", (CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "CINTsetup")) : 0 ));
            validate_non_negative_index("CINT", "(CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"CINTsetup\")) : 0 )", (CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "CINTsetup")) : 0 ));
            validate_non_negative_index("CINT", "get_base1(CINTsubindex,nsubjects,\"CINTsubindex\",1)", get_base1(CINTsubindex,nsubjects,"CINTsubindex",1));
            vector<matrix_d> CINT(get_base1(CINTsubindex,nsubjects,"CINTsubindex",1), (matrix_d(static_cast<Eigen::VectorXd::Index>((CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "CINTsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "CINTsetup")) : 0 )))));
            stan::math::initialize(CINT, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(CINT,DUMMY_VAR__);
            current_statement_begin__ = 364;
            validate_non_negative_index("T0VAR", "(T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"T0VARsetup\")) : 0 )", (T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0VARsetup")) : 0 ));
            validate_non_negative_index("T0VAR", "(T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"T0VARsetup\")) : 0 )", (T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0VARsetup")) : 0 ));
            validate_non_negative_index("T0VAR", "get_base1(T0VARsubindex,nsubjects,\"T0VARsubindex\",1)", get_base1(T0VARsubindex,nsubjects,"T0VARsubindex",1));
            vector<matrix_d> T0VAR(get_base1(T0VARsubindex,nsubjects,"T0VARsubindex",1), (matrix_d(static_cast<Eigen::VectorXd::Index>((T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0VARsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0VARsetup")) : 0 )))));
            stan::math::initialize(T0VAR, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(T0VAR,DUMMY_VAR__);
            current_statement_begin__ = 365;
            validate_non_negative_index("TDPREDEFFECT", "(TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"TDPREDEFFECTsetup\")) : 0 )", (TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 ));
            validate_non_negative_index("TDPREDEFFECT", "(TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"TDPREDEFFECTsetup\")) : 0 )", (TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 ));
            validate_non_negative_index("TDPREDEFFECT", "get_base1(TDPREDEFFECTsubindex,nsubjects,\"TDPREDEFFECTsubindex\",1)", get_base1(TDPREDEFFECTsubindex,nsubjects,"TDPREDEFFECTsubindex",1));
            vector<matrix_d> TDPREDEFFECT(get_base1(TDPREDEFFECTsubindex,nsubjects,"TDPREDEFFECTsubindex",1), (matrix_d(static_cast<Eigen::VectorXd::Index>((TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 )))));
            stan::math::initialize(TDPREDEFFECT, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(TDPREDEFFECT,DUMMY_VAR__);
            current_statement_begin__ = 366;
            validate_non_negative_index("PARS", "(PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"PARSsetup\")) : 0 )", (PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "PARSsetup")) : 0 ));
            validate_non_negative_index("PARS", "(PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"PARSsetup\")) : 0 )", (PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "PARSsetup")) : 0 ));
            validate_non_negative_index("PARS", "get_base1(PARSsubindex,nsubjects,\"PARSsubindex\",1)", get_base1(PARSsubindex,nsubjects,"PARSsubindex",1));
            vector<matrix_d> PARS(get_base1(PARSsubindex,nsubjects,"PARSsubindex",1), (matrix_d(static_cast<Eigen::VectorXd::Index>((PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "PARSsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "PARSsetup")) : 0 )))));
            stan::math::initialize(PARS, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(PARS,DUMMY_VAR__);
            current_statement_begin__ = 368;
            validate_non_negative_index("asymDIFFUSION", "nlatent", nlatent);
            validate_non_negative_index("asymDIFFUSION", "nlatent", nlatent);
            validate_non_negative_index("asymDIFFUSION", "get_base1(asymDIFFUSIONsubindex,nsubjects,\"asymDIFFUSIONsubindex\",1)", get_base1(asymDIFFUSIONsubindex,nsubjects,"asymDIFFUSIONsubindex",1));
            vector<matrix_d> asymDIFFUSION(get_base1(asymDIFFUSIONsubindex,nsubjects,"asymDIFFUSIONsubindex",1), (matrix_d(static_cast<Eigen::VectorXd::Index>(nlatent),static_cast<Eigen::VectorXd::Index>(nlatent))));
            stan::math::initialize(asymDIFFUSION, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(asymDIFFUSION,DUMMY_VAR__);
            current_statement_begin__ = 369;
            validate_non_negative_index("asymCINT", "(nt0meansstationary ? nlatent : 0 )", (nt0meansstationary ? nlatent : 0 ));
            validate_non_negative_index("asymCINT", "get_base1(asymCINTsubindex,nsubjects,\"asymCINTsubindex\",1)", get_base1(asymCINTsubindex,nsubjects,"asymCINTsubindex",1));
            vector<vector_d> asymCINT(get_base1(asymCINTsubindex,nsubjects,"asymCINTsubindex",1), (vector_d(static_cast<Eigen::VectorXd::Index>((nt0meansstationary ? nlatent : 0 )))));
            stan::math::initialize(asymCINT, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(asymCINT,DUMMY_VAR__);
            current_statement_begin__ = 371;
            validate_non_negative_index("tipreds", "(ntipred ? nsubjects : 0 )", (ntipred ? nsubjects : 0 ));
            validate_non_negative_index("tipreds", "(ntipred ? ntipred : 0 )", (ntipred ? ntipred : 0 ));
            matrix_d tipreds(static_cast<Eigen::VectorXd::Index>((ntipred ? nsubjects : 0 )),static_cast<Eigen::VectorXd::Index>((ntipred ? ntipred : 0 )));
            (void) tipreds;  // dummy to suppress unused var warning

            stan::math::initialize(tipreds, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(tipreds,DUMMY_VAR__);
            current_statement_begin__ = 372;
            validate_non_negative_index("TIPREDEFFECT", "nparams", nparams);
            validate_non_negative_index("TIPREDEFFECT", "ntipred", ntipred);
            matrix_d TIPREDEFFECT(static_cast<Eigen::VectorXd::Index>(nparams),static_cast<Eigen::VectorXd::Index>(ntipred));
            (void) TIPREDEFFECT;  // dummy to suppress unused var warning

            stan::math::initialize(TIPREDEFFECT, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(TIPREDEFFECT,DUMMY_VAR__);


            current_statement_begin__ = 374;
            if (as_bool(logical_gt(ntipred,0))) {

                {
                current_statement_begin__ = 376;
                int counter(0);
                (void) counter;  // dummy to suppress unused var warning

                stan::math::fill(counter, std::numeric_limits<int>::min());


                current_statement_begin__ = 377;
                stan::math::assign(counter, 0);
                current_statement_begin__ = 378;
                for (int coli = 1; coli <= cols(tipreds); ++coli) {

                    current_statement_begin__ = 379;
                    for (int rowi = 1; rowi <= rows(tipreds); ++rowi) {

                        current_statement_begin__ = 380;
                        if (as_bool(logical_eq(get_base1(tipredsdata,rowi,coli,"tipredsdata",1),99999))) {

                            current_statement_begin__ = 381;
                            stan::math::assign(counter, (counter + 1));
                            current_statement_begin__ = 382;
                            stan::math::assign(get_base1_lhs(tipreds,rowi,coli,"tipreds",1), get_base1(tipredsimputed,counter,"tipredsimputed",1));
                        } else {
                            current_statement_begin__ = 383;
                            stan::math::assign(get_base1_lhs(tipreds,rowi,coli,"tipreds",1), get_base1(tipredsdata,rowi,coli,"tipredsdata",1));
                        }
                    }
                }
                }
                current_statement_begin__ = 387;
                for (int ci = 1; ci <= ntipred; ++ci) {

                    current_statement_begin__ = 388;
                    for (int ri = 1; ri <= nparams; ++ri) {

                        current_statement_begin__ = 389;
                        if (as_bool(logical_gt(get_base1(get_base1(TIPREDEFFECTsetup,ri,"TIPREDEFFECTsetup",1),ci,"TIPREDEFFECTsetup",2),0))) {

                            current_statement_begin__ = 390;
                            stan::math::assign(get_base1_lhs(TIPREDEFFECT,ri,ci,"TIPREDEFFECT",1), get_base1(tipredeffectparams,get_base1(get_base1(TIPREDEFFECTsetup,ri,"TIPREDEFFECTsetup",1),ci,"TIPREDEFFECTsetup",2),"tipredeffectparams",1));
                        } else {

                            current_statement_begin__ = 392;
                            stan::math::assign(get_base1_lhs(TIPREDEFFECT,ri,ci,"TIPREDEFFECT",1), 0);
                        }
                    }
                }
            }
            current_statement_begin__ = 398;
            if (as_bool(logical_gt(nindvarying,0))) {
                {
                current_statement_begin__ = 399;
                int counter(0);
                (void) counter;  // dummy to suppress unused var warning

                stan::math::fill(counter, std::numeric_limits<int>::min());


                current_statement_begin__ = 400;
                stan::math::assign(rawpopsd, elt_multiply(exp(subtract(multiply(rawpopsdbase,2),2)),sdscale));
                current_statement_begin__ = 401;
                stan::math::assign(counter, 0);
                current_statement_begin__ = 402;
                for (int j = 1; j <= nindvarying; ++j) {

                    current_statement_begin__ = 403;
                    stan::math::assign(get_base1_lhs(rawpopcovsqrt,j,j,"rawpopcovsqrt",1), 1);
                    current_statement_begin__ = 404;
                    for (int i = 1; i <= nindvarying; ++i) {

                        current_statement_begin__ = 405;
                        if (as_bool(logical_gt(i,j))) {

                            current_statement_begin__ = 406;
                            stan::math::assign(counter, (counter + 1));
                            current_statement_begin__ = 407;
                            stan::math::assign(get_base1_lhs(rawpopcovsqrt,i,j,"rawpopcovsqrt",1), get_base1(sqrtpcov,counter,"sqrtpcov",1));
                            current_statement_begin__ = 408;
                            stan::math::assign(get_base1_lhs(rawpopcovsqrt,j,i,"rawpopcovsqrt",1), get_base1(sqrtpcov,counter,"sqrtpcov",1));
                        }
                    }
                }
                current_statement_begin__ = 412;
                stan::math::assign(rawpopcorrsqrt, covsqrt2corsqrt(rawpopcovsqrt,0, pstream__));
                current_statement_begin__ = 414;
                stan::math::assign(rawpopcovsqrt, diag_pre_multiply(rawpopsd,rawpopcorrsqrt));
                }
            }
            {
            current_statement_begin__ = 418;
            validate_non_negative_index("rawindparams", "nparams", nparams);
            vector_d rawindparams(static_cast<Eigen::VectorXd::Index>(nparams));
            (void) rawindparams;  // dummy to suppress unused var warning

            stan::math::initialize(rawindparams, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(rawindparams,DUMMY_VAR__);
            current_statement_begin__ = 419;
            validate_non_negative_index("tipredaddition", "nparams", nparams);
            vector_d tipredaddition(static_cast<Eigen::VectorXd::Index>(nparams));
            (void) tipredaddition;  // dummy to suppress unused var warning

            stan::math::initialize(tipredaddition, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(tipredaddition,DUMMY_VAR__);
            current_statement_begin__ = 420;
            validate_non_negative_index("indvaraddition", "nparams", nparams);
            vector_d indvaraddition(static_cast<Eigen::VectorXd::Index>(nparams));
            (void) indvaraddition;  // dummy to suppress unused var warning

            stan::math::initialize(indvaraddition, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(indvaraddition,DUMMY_VAR__);


            current_statement_begin__ = 421;
            stan::math::assign(rawindparams, rawpopmeans);
            current_statement_begin__ = 422;
            stan::math::assign(tipredaddition, rep_vector(0,nparams));
            current_statement_begin__ = 423;
            stan::math::assign(indvaraddition, rep_vector(0,nparams));
            current_statement_begin__ = 425;
            for (int si = 1; si <= nsubjects; ++si) {

                current_statement_begin__ = 428;
                if (as_bool((primitive_value(logical_gt(nindvarying,0)) && primitive_value(logical_eq(ukfpop,0))))) {
                    current_statement_begin__ = 428;
                    stan::model::assign(indvaraddition, 
                                stan::model::cons_list(stan::model::index_multi(indvaryingindex), stan::model::nil_index_list()), 
                                multiply(rawpopcovsqrt,stan::model::rvalue(baseindparams, stan::model::cons_list(stan::model::index_min_max((1 + ((si - 1) * nindvarying)), (si * nindvarying)), stan::model::nil_index_list()), "baseindparams")), 
                                "assigning variable indvaraddition");
                }
                current_statement_begin__ = 430;
                if (as_bool(logical_gt(ntipred,0))) {
                    current_statement_begin__ = 430;
                    stan::math::assign(tipredaddition, multiply(TIPREDEFFECT,transpose(get_base1(tipreds,si,"tipreds",1))));
                }
                current_statement_begin__ = 432;
                stan::math::assign(rawindparams, add(add(rawpopmeans,tipredaddition),indvaraddition));
                current_statement_begin__ = 434;
                if (as_bool(logical_lte(si,get_base1(T0MEANSsubindex,nsubjects,"T0MEANSsubindex",1)))) {

                    current_statement_begin__ = 435;
                    for (int ri = 1; ri <= size(T0MEANSsetup); ++ri) {

                        current_statement_begin__ = 436;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(T0MEANS,si,"T0MEANS",1),get_base1(get_base1(T0MEANSsetup,ri,"T0MEANSsetup",1),1,"T0MEANSsetup",2),get_base1(get_base1(T0MEANSsetup,ri,"T0MEANSsetup",1),2,"T0MEANSsetup",2),"T0MEANS",2), (get_base1(get_base1(T0MEANSsetup,ri,"T0MEANSsetup",1),3,"T0MEANSsetup",2) ? stan::math::promote_scalar<double>(tform(get_base1(rawindparams,get_base1(get_base1(T0MEANSsetup,ri,"T0MEANSsetup",1),3,"T0MEANSsetup",2),"rawindparams",1),get_base1(get_base1(T0MEANSsetup,ri,"T0MEANSsetup",1),4,"T0MEANSsetup",2),get_base1(T0MEANSvalues,ri,2,"T0MEANSvalues",1),get_base1(T0MEANSvalues,ri,3,"T0MEANSvalues",1),get_base1(T0MEANSvalues,ri,4,"T0MEANSvalues",1), pstream__)) : stan::math::promote_scalar<double>(get_base1(T0MEANSvalues,ri,1,"T0MEANSvalues",1)) ));
                    }
                }
                current_statement_begin__ = 441;
                if (as_bool(logical_lte(si,get_base1(LAMBDAsubindex,nsubjects,"LAMBDAsubindex",1)))) {

                    current_statement_begin__ = 442;
                    for (int ri = 1; ri <= size(LAMBDAsetup); ++ri) {

                        current_statement_begin__ = 443;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(LAMBDA,si,"LAMBDA",1),get_base1(get_base1(LAMBDAsetup,ri,"LAMBDAsetup",1),1,"LAMBDAsetup",2),get_base1(get_base1(LAMBDAsetup,ri,"LAMBDAsetup",1),2,"LAMBDAsetup",2),"LAMBDA",2), (get_base1(get_base1(LAMBDAsetup,ri,"LAMBDAsetup",1),3,"LAMBDAsetup",2) ? stan::math::promote_scalar<double>(tform(get_base1(rawindparams,get_base1(get_base1(LAMBDAsetup,ri,"LAMBDAsetup",1),3,"LAMBDAsetup",2),"rawindparams",1),get_base1(get_base1(LAMBDAsetup,ri,"LAMBDAsetup",1),4,"LAMBDAsetup",2),get_base1(LAMBDAvalues,ri,2,"LAMBDAvalues",1),get_base1(LAMBDAvalues,ri,3,"LAMBDAvalues",1),get_base1(LAMBDAvalues,ri,4,"LAMBDAvalues",1), pstream__)) : stan::math::promote_scalar<double>(get_base1(LAMBDAvalues,ri,1,"LAMBDAvalues",1)) ));
                    }
                }
                current_statement_begin__ = 448;
                if (as_bool(logical_lte(si,get_base1(DRIFTsubindex,nsubjects,"DRIFTsubindex",1)))) {

                    current_statement_begin__ = 449;
                    for (int ri = 1; ri <= size(DRIFTsetup); ++ri) {

                        current_statement_begin__ = 450;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(DRIFT,si,"DRIFT",1),get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),1,"DRIFTsetup",2),get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),2,"DRIFTsetup",2),"DRIFT",2), (get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),3,"DRIFTsetup",2) ? stan::math::promote_scalar<double>(tform(get_base1(rawindparams,get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),3,"DRIFTsetup",2),"rawindparams",1),get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),4,"DRIFTsetup",2),get_base1(DRIFTvalues,ri,2,"DRIFTvalues",1),get_base1(DRIFTvalues,ri,3,"DRIFTvalues",1),get_base1(DRIFTvalues,ri,4,"DRIFTvalues",1), pstream__)) : stan::math::promote_scalar<double>(get_base1(DRIFTvalues,ri,1,"DRIFTvalues",1)) ));
                    }
                }
                current_statement_begin__ = 455;
                if (as_bool(logical_lte(si,get_base1(DIFFUSIONsubindex,nsubjects,"DIFFUSIONsubindex",1)))) {

                    current_statement_begin__ = 456;
                    for (int ri = 1; ri <= size(DIFFUSIONsetup); ++ri) {

                        current_statement_begin__ = 457;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(DIFFUSION,si,"DIFFUSION",1),get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),1,"DIFFUSIONsetup",2),get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),2,"DIFFUSIONsetup",2),"DIFFUSION",2), (get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),3,"DIFFUSIONsetup",2) ? stan::math::promote_scalar<double>(tform(get_base1(rawindparams,get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),3,"DIFFUSIONsetup",2),"rawindparams",1),get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),4,"DIFFUSIONsetup",2),get_base1(DIFFUSIONvalues,ri,2,"DIFFUSIONvalues",1),get_base1(DIFFUSIONvalues,ri,3,"DIFFUSIONvalues",1),get_base1(DIFFUSIONvalues,ri,4,"DIFFUSIONvalues",1), pstream__)) : stan::math::promote_scalar<double>(get_base1(DIFFUSIONvalues,ri,1,"DIFFUSIONvalues",1)) ));
                    }
                }
                current_statement_begin__ = 462;
                if (as_bool(logical_lte(si,get_base1(MANIFESTVARsubindex,nsubjects,"MANIFESTVARsubindex",1)))) {

                    current_statement_begin__ = 463;
                    for (int ri = 1; ri <= size(MANIFESTVARsetup); ++ri) {

                        current_statement_begin__ = 464;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(MANIFESTVAR,si,"MANIFESTVAR",1),get_base1(get_base1(MANIFESTVARsetup,ri,"MANIFESTVARsetup",1),1,"MANIFESTVARsetup",2),get_base1(get_base1(MANIFESTVARsetup,ri,"MANIFESTVARsetup",1),2,"MANIFESTVARsetup",2),"MANIFESTVAR",2), (get_base1(get_base1(MANIFESTVARsetup,ri,"MANIFESTVARsetup",1),3,"MANIFESTVARsetup",2) ? stan::math::promote_scalar<double>(tform(get_base1(rawindparams,get_base1(get_base1(MANIFESTVARsetup,ri,"MANIFESTVARsetup",1),3,"MANIFESTVARsetup",2),"rawindparams",1),get_base1(get_base1(MANIFESTVARsetup,ri,"MANIFESTVARsetup",1),4,"MANIFESTVARsetup",2),get_base1(MANIFESTVARvalues,ri,2,"MANIFESTVARvalues",1),get_base1(MANIFESTVARvalues,ri,3,"MANIFESTVARvalues",1),get_base1(MANIFESTVARvalues,ri,4,"MANIFESTVARvalues",1), pstream__)) : stan::math::promote_scalar<double>(get_base1(MANIFESTVARvalues,ri,1,"MANIFESTVARvalues",1)) ));
                    }
                }
                current_statement_begin__ = 469;
                if (as_bool(logical_lte(si,get_base1(MANIFESTMEANSsubindex,nsubjects,"MANIFESTMEANSsubindex",1)))) {

                    current_statement_begin__ = 470;
                    for (int ri = 1; ri <= size(MANIFESTMEANSsetup); ++ri) {

                        current_statement_begin__ = 471;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(MANIFESTMEANS,si,"MANIFESTMEANS",1),get_base1(get_base1(MANIFESTMEANSsetup,ri,"MANIFESTMEANSsetup",1),1,"MANIFESTMEANSsetup",2),get_base1(get_base1(MANIFESTMEANSsetup,ri,"MANIFESTMEANSsetup",1),2,"MANIFESTMEANSsetup",2),"MANIFESTMEANS",2), (get_base1(get_base1(MANIFESTMEANSsetup,ri,"MANIFESTMEANSsetup",1),3,"MANIFESTMEANSsetup",2) ? stan::math::promote_scalar<double>(tform(get_base1(rawindparams,get_base1(get_base1(MANIFESTMEANSsetup,ri,"MANIFESTMEANSsetup",1),3,"MANIFESTMEANSsetup",2),"rawindparams",1),get_base1(get_base1(MANIFESTMEANSsetup,ri,"MANIFESTMEANSsetup",1),4,"MANIFESTMEANSsetup",2),get_base1(MANIFESTMEANSvalues,ri,2,"MANIFESTMEANSvalues",1),get_base1(MANIFESTMEANSvalues,ri,3,"MANIFESTMEANSvalues",1),get_base1(MANIFESTMEANSvalues,ri,4,"MANIFESTMEANSvalues",1), pstream__)) : stan::math::promote_scalar<double>(get_base1(MANIFESTMEANSvalues,ri,1,"MANIFESTMEANSvalues",1)) ));
                    }
                }
                current_statement_begin__ = 476;
                if (as_bool(logical_lte(si,get_base1(CINTsubindex,nsubjects,"CINTsubindex",1)))) {

                    current_statement_begin__ = 477;
                    for (int ri = 1; ri <= size(CINTsetup); ++ri) {

                        current_statement_begin__ = 478;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(CINT,si,"CINT",1),get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),1,"CINTsetup",2),get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),2,"CINTsetup",2),"CINT",2), (get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),3,"CINTsetup",2) ? stan::math::promote_scalar<double>(tform(get_base1(rawindparams,get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),3,"CINTsetup",2),"rawindparams",1),get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),4,"CINTsetup",2),get_base1(CINTvalues,ri,2,"CINTvalues",1),get_base1(CINTvalues,ri,3,"CINTvalues",1),get_base1(CINTvalues,ri,4,"CINTvalues",1), pstream__)) : stan::math::promote_scalar<double>(get_base1(CINTvalues,ri,1,"CINTvalues",1)) ));
                    }
                }
                current_statement_begin__ = 483;
                if (as_bool(logical_lte(si,get_base1(T0VARsubindex,nsubjects,"T0VARsubindex",1)))) {

                    current_statement_begin__ = 484;
                    for (int ri = 1; ri <= size(T0VARsetup); ++ri) {

                        current_statement_begin__ = 485;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(T0VAR,si,"T0VAR",1),get_base1(get_base1(T0VARsetup,ri,"T0VARsetup",1),1,"T0VARsetup",2),get_base1(get_base1(T0VARsetup,ri,"T0VARsetup",1),2,"T0VARsetup",2),"T0VAR",2), (get_base1(get_base1(T0VARsetup,ri,"T0VARsetup",1),3,"T0VARsetup",2) ? stan::math::promote_scalar<double>(tform(get_base1(rawindparams,get_base1(get_base1(T0VARsetup,ri,"T0VARsetup",1),3,"T0VARsetup",2),"rawindparams",1),get_base1(get_base1(T0VARsetup,ri,"T0VARsetup",1),4,"T0VARsetup",2),get_base1(T0VARvalues,ri,2,"T0VARvalues",1),get_base1(T0VARvalues,ri,3,"T0VARvalues",1),get_base1(T0VARvalues,ri,4,"T0VARvalues",1), pstream__)) : stan::math::promote_scalar<double>(get_base1(T0VARvalues,ri,1,"T0VARvalues",1)) ));
                    }
                }
                current_statement_begin__ = 490;
                if (as_bool(logical_lte(si,get_base1(TDPREDEFFECTsubindex,nsubjects,"TDPREDEFFECTsubindex",1)))) {

                    current_statement_begin__ = 491;
                    for (int ri = 1; ri <= size(TDPREDEFFECTsetup); ++ri) {

                        current_statement_begin__ = 492;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(TDPREDEFFECT,si,"TDPREDEFFECT",1),get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),1,"TDPREDEFFECTsetup",2),get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),2,"TDPREDEFFECTsetup",2),"TDPREDEFFECT",2), (get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),3,"TDPREDEFFECTsetup",2) ? stan::math::promote_scalar<double>(tform(get_base1(rawindparams,get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),3,"TDPREDEFFECTsetup",2),"rawindparams",1),get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),4,"TDPREDEFFECTsetup",2),get_base1(TDPREDEFFECTvalues,ri,2,"TDPREDEFFECTvalues",1),get_base1(TDPREDEFFECTvalues,ri,3,"TDPREDEFFECTvalues",1),get_base1(TDPREDEFFECTvalues,ri,4,"TDPREDEFFECTvalues",1), pstream__)) : stan::math::promote_scalar<double>(get_base1(TDPREDEFFECTvalues,ri,1,"TDPREDEFFECTvalues",1)) ));
                    }
                }
                current_statement_begin__ = 497;
                if (as_bool(logical_lte(si,get_base1(PARSsubindex,nsubjects,"PARSsubindex",1)))) {

                    current_statement_begin__ = 498;
                    for (int ri = 1; ri <= size(PARSsetup); ++ri) {

                        current_statement_begin__ = 499;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(PARS,si,"PARS",1),get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),1,"PARSsetup",2),get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),2,"PARSsetup",2),"PARS",2), (get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),3,"PARSsetup",2) ? stan::math::promote_scalar<double>(tform(get_base1(rawindparams,get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),3,"PARSsetup",2),"rawindparams",1),get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),4,"PARSsetup",2),get_base1(PARSvalues,ri,2,"PARSvalues",1),get_base1(PARSvalues,ri,3,"PARSvalues",1),get_base1(PARSvalues,ri,4,"PARSvalues",1), pstream__)) : stan::math::promote_scalar<double>(get_base1(PARSvalues,ri,1,"PARSvalues",1)) ));
                    }
                }
                current_statement_begin__ = 507;
                if (as_bool((primitive_value(logical_lte(si,get_base1(DIFFUSIONsubindex,nsubjects,"DIFFUSIONsubindex",1))) && primitive_value(logical_neq((lineardynamics * intoverstates),0))))) {
                    current_statement_begin__ = 507;
                    stan::math::assign(get_base1_lhs(DIFFUSION,si,"DIFFUSION",1), sdcovsqrt2cov(get_base1(DIFFUSION,si,"DIFFUSION",1),0, pstream__));
                }
                current_statement_begin__ = 509;
                if (as_bool(logical_lte(si,get_base1(asymDIFFUSIONsubindex,nsubjects,"asymDIFFUSIONsubindex",1)))) {

                    current_statement_begin__ = 510;
                    if (as_bool(logical_lt(ndiffusion,nlatent))) {
                        current_statement_begin__ = 510;
                        stan::math::assign(get_base1_lhs(asymDIFFUSION,si,"asymDIFFUSION",1), to_matrix(rep_vector(0,(nlatent * nlatent)),nlatent,nlatent));
                    }
                    current_statement_begin__ = 512;
                    if (as_bool(logical_eq(continuoustime,1))) {
                        current_statement_begin__ = 512;
                        stan::model::assign(asymDIFFUSION, 
                                    stan::model::cons_list(stan::model::index_uni(si), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list()))), 
                                    to_matrix(mdivide_left(minus(add(kron_prod(stan::model::rvalue(DRIFT, stan::model::cons_list(stan::model::index_uni(get_base1(DRIFTsubindex,si,"DRIFTsubindex",1)), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list()))), "DRIFT"),stan::model::rvalue(IIlatent, stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list())), "IIlatent"), pstream__),kron_prod(stan::model::rvalue(IIlatent, stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list())), "IIlatent"),stan::model::rvalue(DRIFT, stan::model::cons_list(stan::model::index_uni(get_base1(DRIFTsubindex,si,"DRIFTsubindex",1)), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list()))), "DRIFT"), pstream__))),to_vector(stan::model::rvalue(DIFFUSION, stan::model::cons_list(stan::model::index_uni(get_base1(DIFFUSIONsubindex,si,"DIFFUSIONsubindex",1)), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list()))), "DIFFUSION"))),ndiffusion,ndiffusion), 
                                    "assigning variable asymDIFFUSION");
                    }
                    current_statement_begin__ = 517;
                    if (as_bool(logical_eq(continuoustime,0))) {
                        current_statement_begin__ = 517;
                        stan::model::assign(asymDIFFUSION, 
                                    stan::model::cons_list(stan::model::index_uni(si), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list()))), 
                                    to_matrix(multiply(subtract(stan::model::rvalue(IIlatent2, stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list())), "IIlatent2"),kron_prod(stan::model::rvalue(DRIFT, stan::model::cons_list(stan::model::index_uni(get_base1(DRIFTsubindex,si,"DRIFTsubindex",1)), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list()))), "DRIFT"),stan::model::rvalue(DRIFT, stan::model::cons_list(stan::model::index_uni(get_base1(DRIFTsubindex,si,"DRIFTsubindex",1)), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list()))), "DRIFT"), pstream__)),to_vector(stan::model::rvalue(DIFFUSION, stan::model::cons_list(stan::model::index_uni(get_base1(DIFFUSIONsubindex,si,"DIFFUSIONsubindex",1)), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list()))), "DIFFUSION"))),ndiffusion,ndiffusion), 
                                    "assigning variable asymDIFFUSION");
                    }
                }
                current_statement_begin__ = 523;
                if (as_bool(logical_gt(nt0meansstationary,0))) {

                    current_statement_begin__ = 524;
                    if (as_bool(logical_lte(si,get_base1(asymCINTsubindex,nsubjects,"asymCINTsubindex",1)))) {

                        current_statement_begin__ = 525;
                        if (as_bool(logical_eq(continuoustime,1))) {
                            current_statement_begin__ = 525;
                            stan::math::assign(get_base1_lhs(asymCINT,si,"asymCINT",1), mdivide_left(minus(get_base1(DRIFT,get_base1(DRIFTsubindex,si,"DRIFTsubindex",1),"DRIFT",1)),stan::model::rvalue(CINT, stan::model::cons_list(stan::model::index_uni(get_base1(CINTsubindex,si,"CINTsubindex",1)), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), "CINT")));
                        }
                        current_statement_begin__ = 526;
                        if (as_bool(logical_eq(continuoustime,0))) {
                            current_statement_begin__ = 526;
                            stan::math::assign(get_base1_lhs(asymCINT,si,"asymCINT",1), mdivide_left(subtract(IIlatent,get_base1(DRIFT,get_base1(DRIFTsubindex,si,"DRIFTsubindex",1),"DRIFT",1)),stan::model::rvalue(CINT, stan::model::cons_list(stan::model::index_uni(get_base1(CINTsubindex,si,"CINTsubindex",1)), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), "CINT")));
                        }
                    }
                }
                current_statement_begin__ = 531;
                if (as_bool(logical_eq(binomial,0))) {

                    current_statement_begin__ = 532;
                    if (as_bool(logical_lte(si,get_base1(MANIFESTVARsubindex,nsubjects,"MANIFESTVARsubindex",1)))) {

                        current_statement_begin__ = 533;
                        for (int ri = 1; ri <= nmanifest; ++ri) {
                            current_statement_begin__ = 533;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(MANIFESTVAR,si,"MANIFESTVAR",1),ri,ri,"MANIFESTVAR",2), square(get_base1(get_base1(MANIFESTVAR,si,"MANIFESTVAR",1),ri,ri,"MANIFESTVAR",2)));
                        }
                    }
                }
                current_statement_begin__ = 538;
                if (as_bool(logical_lte(si,get_base1(T0VARsubindex,nsubjects,"T0VARsubindex",1)))) {

                    current_statement_begin__ = 539;
                    if (as_bool(logical_neq((lineardynamics * intoverstates),0))) {
                        current_statement_begin__ = 539;
                        stan::math::assign(get_base1_lhs(T0VAR,si,"T0VAR",1), sdcovsqrt2cov(get_base1(T0VAR,si,"T0VAR",1),0, pstream__));
                    }
                    current_statement_begin__ = 540;
                    if (as_bool(logical_gt(nt0varstationary,0))) {
                        current_statement_begin__ = 540;
                        for (int rowi = 1; rowi <= nt0varstationary; ++rowi) {

                            current_statement_begin__ = 541;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(T0VAR,si,"T0VAR",1),get_base1(get_base1(t0varstationary,rowi,"t0varstationary",1),1,"t0varstationary",2),get_base1(get_base1(t0varstationary,rowi,"t0varstationary",1),2,"t0varstationary",2),"T0VAR",2), get_base1(get_base1(asymDIFFUSION,si,"asymDIFFUSION",1),get_base1(get_base1(t0varstationary,rowi,"t0varstationary",1),1,"t0varstationary",2),get_base1(get_base1(t0varstationary,rowi,"t0varstationary",1),2,"t0varstationary",2),"asymDIFFUSION",2));
                            current_statement_begin__ = 543;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(T0VAR,si,"T0VAR",1),get_base1(get_base1(t0varstationary,rowi,"t0varstationary",1),2,"t0varstationary",2),get_base1(get_base1(t0varstationary,rowi,"t0varstationary",1),1,"t0varstationary",2),"T0VAR",2), get_base1(get_base1(asymDIFFUSION,si,"asymDIFFUSION",1),get_base1(get_base1(t0varstationary,rowi,"t0varstationary",1),2,"t0varstationary",2),get_base1(get_base1(t0varstationary,rowi,"t0varstationary",1),1,"t0varstationary",2),"asymDIFFUSION",2));
                        }
                    }
                }
                current_statement_begin__ = 549;
                if (as_bool(logical_gt(nt0meansstationary,0))) {

                    current_statement_begin__ = 550;
                    if (as_bool(logical_lte(si,get_base1(T0MEANSsubindex,nsubjects,"T0MEANSsubindex",1)))) {

                        current_statement_begin__ = 551;
                        for (int rowi = 1; rowi <= nt0meansstationary; ++rowi) {

                            current_statement_begin__ = 552;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(T0MEANS,si,"T0MEANS",1),get_base1(get_base1(t0meansstationary,rowi,"t0meansstationary",1),1,"t0meansstationary",2),1,"T0MEANS",2), get_base1(get_base1(asymCINT,get_base1(asymCINTsubindex,si,"asymCINTsubindex",1),"asymCINT",1),get_base1(get_base1(t0meansstationary,rowi,"t0meansstationary",1),1,"t0meansstationary",2),"asymCINT",2));
                        }
                    }
                }
            }
            }

            // validate transformed parameters
            current_statement_begin__ = 351;
            current_statement_begin__ = 353;
            current_statement_begin__ = 354;
            current_statement_begin__ = 357;
            current_statement_begin__ = 358;
            current_statement_begin__ = 359;
            current_statement_begin__ = 360;
            current_statement_begin__ = 361;
            current_statement_begin__ = 362;
            current_statement_begin__ = 363;
            current_statement_begin__ = 364;
            current_statement_begin__ = 365;
            current_statement_begin__ = 366;
            current_statement_begin__ = 368;
            current_statement_begin__ = 369;
            current_statement_begin__ = 371;
            current_statement_begin__ = 372;

            // write transformed parameters
            for (int k_0__ = 0; k_0__ < nindvarying; ++k_0__) {
            vars__.push_back(rawpopsd[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < nindvarying; ++k_1__) {
                for (int k_0__ = 0; k_0__ < nindvarying; ++k_0__) {
                vars__.push_back(rawpopcorrsqrt(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < nindvarying; ++k_1__) {
                for (int k_0__ = 0; k_0__ < nindvarying; ++k_0__) {
                vars__.push_back(rawpopcovsqrt(k_0__, k_1__));
                }
            }
            for (int k_2__ = 0; k_2__ < (T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 ); ++k_2__) {
                for (int k_1__ = 0; k_1__ < (T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 ); ++k_1__) {
                    for (int k_0__ = 0; k_0__ < get_base1(T0MEANSsubindex,nsubjects,"T0MEANSsubindex",1); ++k_0__) {
                    vars__.push_back(T0MEANS[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < (LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 ); ++k_2__) {
                for (int k_1__ = 0; k_1__ < (LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 ); ++k_1__) {
                    for (int k_0__ = 0; k_0__ < get_base1(LAMBDAsubindex,nsubjects,"LAMBDAsubindex",1); ++k_0__) {
                    vars__.push_back(LAMBDA[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < (DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DRIFTsetup")) : 0 ); ++k_2__) {
                for (int k_1__ = 0; k_1__ < (DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DRIFTsetup")) : 0 ); ++k_1__) {
                    for (int k_0__ = 0; k_0__ < get_base1(DRIFTsubindex,nsubjects,"DRIFTsubindex",1); ++k_0__) {
                    vars__.push_back(DRIFT[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < (DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 ); ++k_2__) {
                for (int k_1__ = 0; k_1__ < (DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 ); ++k_1__) {
                    for (int k_0__ = 0; k_0__ < get_base1(DIFFUSIONsubindex,nsubjects,"DIFFUSIONsubindex",1); ++k_0__) {
                    vars__.push_back(DIFFUSION[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < (MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 ); ++k_2__) {
                for (int k_1__ = 0; k_1__ < (MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 ); ++k_1__) {
                    for (int k_0__ = 0; k_0__ < get_base1(MANIFESTVARsubindex,nsubjects,"MANIFESTVARsubindex",1); ++k_0__) {
                    vars__.push_back(MANIFESTVAR[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < (MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 ); ++k_2__) {
                for (int k_1__ = 0; k_1__ < (MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 ); ++k_1__) {
                    for (int k_0__ = 0; k_0__ < get_base1(MANIFESTMEANSsubindex,nsubjects,"MANIFESTMEANSsubindex",1); ++k_0__) {
                    vars__.push_back(MANIFESTMEANS[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < (CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "CINTsetup")) : 0 ); ++k_2__) {
                for (int k_1__ = 0; k_1__ < (CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "CINTsetup")) : 0 ); ++k_1__) {
                    for (int k_0__ = 0; k_0__ < get_base1(CINTsubindex,nsubjects,"CINTsubindex",1); ++k_0__) {
                    vars__.push_back(CINT[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < (T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0VARsetup")) : 0 ); ++k_2__) {
                for (int k_1__ = 0; k_1__ < (T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0VARsetup")) : 0 ); ++k_1__) {
                    for (int k_0__ = 0; k_0__ < get_base1(T0VARsubindex,nsubjects,"T0VARsubindex",1); ++k_0__) {
                    vars__.push_back(T0VAR[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < (TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 ); ++k_2__) {
                for (int k_1__ = 0; k_1__ < (TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 ); ++k_1__) {
                    for (int k_0__ = 0; k_0__ < get_base1(TDPREDEFFECTsubindex,nsubjects,"TDPREDEFFECTsubindex",1); ++k_0__) {
                    vars__.push_back(TDPREDEFFECT[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < (PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "PARSsetup")) : 0 ); ++k_2__) {
                for (int k_1__ = 0; k_1__ < (PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "PARSsetup")) : 0 ); ++k_1__) {
                    for (int k_0__ = 0; k_0__ < get_base1(PARSsubindex,nsubjects,"PARSsubindex",1); ++k_0__) {
                    vars__.push_back(PARS[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < nlatent; ++k_2__) {
                for (int k_1__ = 0; k_1__ < nlatent; ++k_1__) {
                    for (int k_0__ = 0; k_0__ < get_base1(asymDIFFUSIONsubindex,nsubjects,"asymDIFFUSIONsubindex",1); ++k_0__) {
                    vars__.push_back(asymDIFFUSION[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_1__ = 0; k_1__ < (nt0meansstationary ? nlatent : 0 ); ++k_1__) {
                for (int k_0__ = 0; k_0__ < get_base1(asymCINTsubindex,nsubjects,"asymCINTsubindex",1); ++k_0__) {
                vars__.push_back(asymCINT[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < (ntipred ? ntipred : 0 ); ++k_1__) {
                for (int k_0__ = 0; k_0__ < (ntipred ? nsubjects : 0 ); ++k_0__) {
                vars__.push_back(tipreds(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < ntipred; ++k_1__) {
                for (int k_0__ = 0; k_0__ < nparams; ++k_0__) {
                vars__.push_back(TIPREDEFFECT(k_0__, k_1__));
                }
            }

            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 1085;
            validate_non_negative_index("popmeans", "nparams", nparams);
            vector_d popmeans(static_cast<Eigen::VectorXd::Index>(nparams));
            (void) popmeans;  // dummy to suppress unused var warning

            stan::math::initialize(popmeans, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(popmeans,DUMMY_VAR__);
            current_statement_begin__ = 1086;
            validate_non_negative_index("popsd", "nparams", nparams);
            vector_d popsd(static_cast<Eigen::VectorXd::Index>(nparams));
            (void) popsd;  // dummy to suppress unused var warning

            stan::math::initialize(popsd, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(popsd,DUMMY_VAR__);
            current_statement_begin__ = 1087;
            validate_non_negative_index("rawpopcov", "nindvarying", nindvarying);
            validate_non_negative_index("rawpopcov", "nindvarying", nindvarying);
            matrix_d rawpopcov(static_cast<Eigen::VectorXd::Index>(nindvarying),static_cast<Eigen::VectorXd::Index>(nindvarying));
            (void) rawpopcov;  // dummy to suppress unused var warning

            stan::math::initialize(rawpopcov, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(rawpopcov,DUMMY_VAR__);
            current_statement_begin__ = 1088;
            validate_non_negative_index("rawpopcorr", "nindvarying", nindvarying);
            validate_non_negative_index("rawpopcorr", "nindvarying", nindvarying);
            matrix_d rawpopcorr(static_cast<Eigen::VectorXd::Index>(nindvarying),static_cast<Eigen::VectorXd::Index>(nindvarying));
            (void) rawpopcorr;  // dummy to suppress unused var warning

            stan::math::initialize(rawpopcorr, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(rawpopcorr,DUMMY_VAR__);
            current_statement_begin__ = 1089;
            validate_non_negative_index("linearTIPREDEFFECT", "nparams", nparams);
            validate_non_negative_index("linearTIPREDEFFECT", "ntipred", ntipred);
            matrix_d linearTIPREDEFFECT(static_cast<Eigen::VectorXd::Index>(nparams),static_cast<Eigen::VectorXd::Index>(ntipred));
            (void) linearTIPREDEFFECT;  // dummy to suppress unused var warning

            stan::math::initialize(linearTIPREDEFFECT, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(linearTIPREDEFFECT,DUMMY_VAR__);
            current_statement_begin__ = 1090;
            validate_non_negative_index("pop_T0MEANS", "(T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"T0MEANSsetup\")) : 0 )", (T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 ));
            validate_non_negative_index("pop_T0MEANS", "(T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"T0MEANSsetup\")) : 0 )", (T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 ));
            validate_non_negative_index("pop_T0MEANS", "get_base1(T0MEANSsubindex,1,\"T0MEANSsubindex\",1)", get_base1(T0MEANSsubindex,1,"T0MEANSsubindex",1));
            vector<matrix_d> pop_T0MEANS(get_base1(T0MEANSsubindex,1,"T0MEANSsubindex",1), (matrix_d(static_cast<Eigen::VectorXd::Index>((T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 )))));
            stan::math::initialize(pop_T0MEANS, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(pop_T0MEANS,DUMMY_VAR__);
            current_statement_begin__ = 1091;
            validate_non_negative_index("pop_LAMBDA", "(LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"LAMBDAsetup\")) : 0 )", (LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 ));
            validate_non_negative_index("pop_LAMBDA", "(LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"LAMBDAsetup\")) : 0 )", (LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 ));
            validate_non_negative_index("pop_LAMBDA", "get_base1(LAMBDAsubindex,1,\"LAMBDAsubindex\",1)", get_base1(LAMBDAsubindex,1,"LAMBDAsubindex",1));
            vector<matrix_d> pop_LAMBDA(get_base1(LAMBDAsubindex,1,"LAMBDAsubindex",1), (matrix_d(static_cast<Eigen::VectorXd::Index>((LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 )))));
            stan::math::initialize(pop_LAMBDA, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(pop_LAMBDA,DUMMY_VAR__);
            current_statement_begin__ = 1092;
            validate_non_negative_index("pop_DRIFT", "(DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"DRIFTsetup\")) : 0 )", (DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DRIFTsetup")) : 0 ));
            validate_non_negative_index("pop_DRIFT", "(DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"DRIFTsetup\")) : 0 )", (DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DRIFTsetup")) : 0 ));
            validate_non_negative_index("pop_DRIFT", "get_base1(DRIFTsubindex,1,\"DRIFTsubindex\",1)", get_base1(DRIFTsubindex,1,"DRIFTsubindex",1));
            vector<matrix_d> pop_DRIFT(get_base1(DRIFTsubindex,1,"DRIFTsubindex",1), (matrix_d(static_cast<Eigen::VectorXd::Index>((DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DRIFTsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DRIFTsetup")) : 0 )))));
            stan::math::initialize(pop_DRIFT, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(pop_DRIFT,DUMMY_VAR__);
            current_statement_begin__ = 1093;
            validate_non_negative_index("pop_DIFFUSION", "(DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"DIFFUSIONsetup\")) : 0 )", (DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 ));
            validate_non_negative_index("pop_DIFFUSION", "(DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"DIFFUSIONsetup\")) : 0 )", (DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 ));
            validate_non_negative_index("pop_DIFFUSION", "get_base1(DIFFUSIONsubindex,1,\"DIFFUSIONsubindex\",1)", get_base1(DIFFUSIONsubindex,1,"DIFFUSIONsubindex",1));
            vector<matrix_d> pop_DIFFUSION(get_base1(DIFFUSIONsubindex,1,"DIFFUSIONsubindex",1), (matrix_d(static_cast<Eigen::VectorXd::Index>((DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 )))));
            stan::math::initialize(pop_DIFFUSION, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(pop_DIFFUSION,DUMMY_VAR__);
            current_statement_begin__ = 1094;
            validate_non_negative_index("pop_MANIFESTVAR", "(MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"MANIFESTVARsetup\")) : 0 )", (MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 ));
            validate_non_negative_index("pop_MANIFESTVAR", "(MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"MANIFESTVARsetup\")) : 0 )", (MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 ));
            validate_non_negative_index("pop_MANIFESTVAR", "get_base1(MANIFESTVARsubindex,1,\"MANIFESTVARsubindex\",1)", get_base1(MANIFESTVARsubindex,1,"MANIFESTVARsubindex",1));
            vector<matrix_d> pop_MANIFESTVAR(get_base1(MANIFESTVARsubindex,1,"MANIFESTVARsubindex",1), (matrix_d(static_cast<Eigen::VectorXd::Index>((MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 )))));
            stan::math::initialize(pop_MANIFESTVAR, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(pop_MANIFESTVAR,DUMMY_VAR__);
            current_statement_begin__ = 1095;
            validate_non_negative_index("pop_MANIFESTMEANS", "(MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"MANIFESTMEANSsetup\")) : 0 )", (MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 ));
            validate_non_negative_index("pop_MANIFESTMEANS", "(MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"MANIFESTMEANSsetup\")) : 0 )", (MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 ));
            validate_non_negative_index("pop_MANIFESTMEANS", "get_base1(MANIFESTMEANSsubindex,1,\"MANIFESTMEANSsubindex\",1)", get_base1(MANIFESTMEANSsubindex,1,"MANIFESTMEANSsubindex",1));
            vector<matrix_d> pop_MANIFESTMEANS(get_base1(MANIFESTMEANSsubindex,1,"MANIFESTMEANSsubindex",1), (matrix_d(static_cast<Eigen::VectorXd::Index>((MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 )))));
            stan::math::initialize(pop_MANIFESTMEANS, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(pop_MANIFESTMEANS,DUMMY_VAR__);
            current_statement_begin__ = 1096;
            validate_non_negative_index("pop_CINT", "(CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"CINTsetup\")) : 0 )", (CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "CINTsetup")) : 0 ));
            validate_non_negative_index("pop_CINT", "(CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"CINTsetup\")) : 0 )", (CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "CINTsetup")) : 0 ));
            validate_non_negative_index("pop_CINT", "get_base1(CINTsubindex,1,\"CINTsubindex\",1)", get_base1(CINTsubindex,1,"CINTsubindex",1));
            vector<matrix_d> pop_CINT(get_base1(CINTsubindex,1,"CINTsubindex",1), (matrix_d(static_cast<Eigen::VectorXd::Index>((CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "CINTsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "CINTsetup")) : 0 )))));
            stan::math::initialize(pop_CINT, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(pop_CINT,DUMMY_VAR__);
            current_statement_begin__ = 1097;
            validate_non_negative_index("pop_T0VAR", "(T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"T0VARsetup\")) : 0 )", (T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0VARsetup")) : 0 ));
            validate_non_negative_index("pop_T0VAR", "(T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"T0VARsetup\")) : 0 )", (T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0VARsetup")) : 0 ));
            validate_non_negative_index("pop_T0VAR", "get_base1(T0VARsubindex,1,\"T0VARsubindex\",1)", get_base1(T0VARsubindex,1,"T0VARsubindex",1));
            vector<matrix_d> pop_T0VAR(get_base1(T0VARsubindex,1,"T0VARsubindex",1), (matrix_d(static_cast<Eigen::VectorXd::Index>((T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0VARsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0VARsetup")) : 0 )))));
            stan::math::initialize(pop_T0VAR, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(pop_T0VAR,DUMMY_VAR__);
            current_statement_begin__ = 1098;
            validate_non_negative_index("pop_TDPREDEFFECT", "(TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"TDPREDEFFECTsetup\")) : 0 )", (TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 ));
            validate_non_negative_index("pop_TDPREDEFFECT", "(TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"TDPREDEFFECTsetup\")) : 0 )", (TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 ));
            validate_non_negative_index("pop_TDPREDEFFECT", "get_base1(TDPREDEFFECTsubindex,1,\"TDPREDEFFECTsubindex\",1)", get_base1(TDPREDEFFECTsubindex,1,"TDPREDEFFECTsubindex",1));
            vector<matrix_d> pop_TDPREDEFFECT(get_base1(TDPREDEFFECTsubindex,1,"TDPREDEFFECTsubindex",1), (matrix_d(static_cast<Eigen::VectorXd::Index>((TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 )))));
            stan::math::initialize(pop_TDPREDEFFECT, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(pop_TDPREDEFFECT,DUMMY_VAR__);
            current_statement_begin__ = 1099;
            validate_non_negative_index("pop_PARS", "(PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"PARSsetup\")) : 0 )", (PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "PARSsetup")) : 0 ));
            validate_non_negative_index("pop_PARS", "(PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), \"PARSsetup\")) : 0 )", (PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "PARSsetup")) : 0 ));
            validate_non_negative_index("pop_PARS", "get_base1(PARSsubindex,1,\"PARSsubindex\",1)", get_base1(PARSsubindex,1,"PARSsubindex",1));
            vector<matrix_d> pop_PARS(get_base1(PARSsubindex,1,"PARSsubindex",1), (matrix_d(static_cast<Eigen::VectorXd::Index>((PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "PARSsetup")) : 0 )),static_cast<Eigen::VectorXd::Index>((PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "PARSsetup")) : 0 )))));
            stan::math::initialize(pop_PARS, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(pop_PARS,DUMMY_VAR__);
            current_statement_begin__ = 1101;
            validate_non_negative_index("asympop_DIFFUSION", "nlatent", nlatent);
            validate_non_negative_index("asympop_DIFFUSION", "nlatent", nlatent);
            validate_non_negative_index("asympop_DIFFUSION", "get_base1(asymDIFFUSIONsubindex,1,\"asymDIFFUSIONsubindex\",1)", get_base1(asymDIFFUSIONsubindex,1,"asymDIFFUSIONsubindex",1));
            vector<matrix_d> asympop_DIFFUSION(get_base1(asymDIFFUSIONsubindex,1,"asymDIFFUSIONsubindex",1), (matrix_d(static_cast<Eigen::VectorXd::Index>(nlatent),static_cast<Eigen::VectorXd::Index>(nlatent))));
            stan::math::initialize(asympop_DIFFUSION, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(asympop_DIFFUSION,DUMMY_VAR__);
            current_statement_begin__ = 1102;
            validate_non_negative_index("asympop_CINT", "(nt0meansstationary ? nlatent : 0 )", (nt0meansstationary ? nlatent : 0 ));
            validate_non_negative_index("asympop_CINT", "get_base1(asymCINTsubindex,1,\"asymCINTsubindex\",1)", get_base1(asymCINTsubindex,1,"asymCINTsubindex",1));
            vector<vector_d> asympop_CINT(get_base1(asymCINTsubindex,1,"asymCINTsubindex",1), (vector_d(static_cast<Eigen::VectorXd::Index>((nt0meansstationary ? nlatent : 0 )))));
            stan::math::initialize(asympop_CINT, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(asympop_CINT,DUMMY_VAR__);
            current_statement_begin__ = 1105;
            validate_non_negative_index("Ygen", "nmanifest", nmanifest);
            validate_non_negative_index("Ygen", "ngenerations", ngenerations);
            validate_non_negative_index("Ygen", "ndatapoints", ndatapoints);
            vector<vector<vector_d> > Ygen(ngenerations, (vector<vector_d>(ndatapoints, (vector_d(static_cast<Eigen::VectorXd::Index>(nmanifest))))));
            stan::math::initialize(Ygen, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(Ygen,DUMMY_VAR__);


            current_statement_begin__ = 1106;
            for (int geni = 1; geni <= ngenerations; ++geni) {
                current_statement_begin__ = 1106;
                stan::model::assign(Ygen, 
                            stan::model::cons_list(stan::model::index_uni(geni), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), 
                            rep_array(rep_vector(0,nmanifest),ndatapoints), 
                            "assigning variable Ygen");
            }
            current_statement_begin__ = 1107;
            for (int geni = 1; geni <= ngenerations; ++geni) {
                {
                current_statement_begin__ = 1109;
                int si(0);
                (void) si;  // dummy to suppress unused var warning

                stan::math::fill(si, std::numeric_limits<int>::min());
                current_statement_begin__ = 1110;
                int counter(0);
                (void) counter;  // dummy to suppress unused var warning

                stan::math::fill(counter, std::numeric_limits<int>::min());
                current_statement_begin__ = 1111;
                validate_non_negative_index("etaprior", "nlatentpop", nlatentpop);
                validate_non_negative_index("etaprior", "ndatapoints", ndatapoints);
                vector<vector_d> etaprior(ndatapoints, (vector_d(static_cast<Eigen::VectorXd::Index>(nlatentpop))));
                stan::math::initialize(etaprior, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(etaprior,DUMMY_VAR__);
                current_statement_begin__ = 1112;
                validate_non_negative_index("etaupd", "nlatentpop", nlatentpop);
                validate_non_negative_index("etaupd", "ndatapoints", ndatapoints);
                vector<vector_d> etaupd(ndatapoints, (vector_d(static_cast<Eigen::VectorXd::Index>(nlatentpop))));
                stan::math::initialize(etaupd, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(etaupd,DUMMY_VAR__);
                current_statement_begin__ = 1113;
                validate_non_negative_index("etapriorcov", "nlatentpop", nlatentpop);
                validate_non_negative_index("etapriorcov", "nlatentpop", nlatentpop);
                validate_non_negative_index("etapriorcov", "ndatapoints", ndatapoints);
                vector<matrix_d> etapriorcov(ndatapoints, (matrix_d(static_cast<Eigen::VectorXd::Index>(nlatentpop),static_cast<Eigen::VectorXd::Index>(nlatentpop))));
                stan::math::initialize(etapriorcov, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(etapriorcov,DUMMY_VAR__);
                current_statement_begin__ = 1114;
                validate_non_negative_index("etaupdcov", "nlatentpop", nlatentpop);
                validate_non_negative_index("etaupdcov", "nlatentpop", nlatentpop);
                validate_non_negative_index("etaupdcov", "ndatapoints", ndatapoints);
                vector<matrix_d> etaupdcov(ndatapoints, (matrix_d(static_cast<Eigen::VectorXd::Index>(nlatentpop),static_cast<Eigen::VectorXd::Index>(nlatentpop))));
                stan::math::initialize(etaupdcov, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(etaupdcov,DUMMY_VAR__);
                current_statement_begin__ = 1117;
                validate_non_negative_index("err", "nmanifest", nmanifest);
                vector_d err(static_cast<Eigen::VectorXd::Index>(nmanifest));
                (void) err;  // dummy to suppress unused var warning

                stan::math::initialize(err, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(err,DUMMY_VAR__);
                current_statement_begin__ = 1118;
                validate_non_negative_index("ypred", "nmanifest", nmanifest);
                vector_d ypred(static_cast<Eigen::VectorXd::Index>(nmanifest));
                (void) ypred;  // dummy to suppress unused var warning

                stan::math::initialize(ypred, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(ypred,DUMMY_VAR__);
                current_statement_begin__ = 1119;
                validate_non_negative_index("ystate", "(ukf ? nmanifest : 0 )", (ukf ? nmanifest : 0 ));
                vector_d ystate(static_cast<Eigen::VectorXd::Index>((ukf ? nmanifest : 0 )));
                (void) ystate;  // dummy to suppress unused var warning

                stan::math::initialize(ystate, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(ystate,DUMMY_VAR__);
                current_statement_begin__ = 1120;
                validate_non_negative_index("ypredcov", "nmanifest", nmanifest);
                validate_non_negative_index("ypredcov", "nmanifest", nmanifest);
                matrix_d ypredcov(static_cast<Eigen::VectorXd::Index>(nmanifest),static_cast<Eigen::VectorXd::Index>(nmanifest));
                (void) ypredcov;  // dummy to suppress unused var warning

                stan::math::initialize(ypredcov, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(ypredcov,DUMMY_VAR__);
                current_statement_begin__ = 1121;
                validate_non_negative_index("K", "nlatentpop", nlatentpop);
                validate_non_negative_index("K", "nmanifest", nmanifest);
                matrix_d K(static_cast<Eigen::VectorXd::Index>(nlatentpop),static_cast<Eigen::VectorXd::Index>(nmanifest));
                (void) K;  // dummy to suppress unused var warning

                stan::math::initialize(K, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(K,DUMMY_VAR__);
                current_statement_begin__ = 1122;
                validate_non_negative_index("ypredcov_sqrt", "nmanifest", nmanifest);
                validate_non_negative_index("ypredcov_sqrt", "nmanifest", nmanifest);
                matrix_d ypredcov_sqrt(static_cast<Eigen::VectorXd::Index>(nmanifest),static_cast<Eigen::VectorXd::Index>(nmanifest));
                (void) ypredcov_sqrt;  // dummy to suppress unused var warning

                stan::math::initialize(ypredcov_sqrt, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(ypredcov_sqrt,DUMMY_VAR__);
                current_statement_begin__ = 1126;
                validate_non_negative_index("errtrans", "(intoverstates ? sum(nobs_y) : sum(ncont_y) )", (intoverstates ? sum(nobs_y) : sum(ncont_y) ));
                vector_d errtrans(static_cast<Eigen::VectorXd::Index>((intoverstates ? sum(nobs_y) : sum(ncont_y) )));
                (void) errtrans;  // dummy to suppress unused var warning

                stan::math::initialize(errtrans, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(errtrans,DUMMY_VAR__);
                current_statement_begin__ = 1127;
                validate_non_negative_index("errscales", "(intoverstates ? sum(nobs_y) : sum(ncont_y) )", (intoverstates ? sum(nobs_y) : sum(ncont_y) ));
                vector_d errscales(static_cast<Eigen::VectorXd::Index>((intoverstates ? sum(nobs_y) : sum(ncont_y) )));
                (void) errscales;  // dummy to suppress unused var warning

                stan::math::initialize(errscales, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(errscales,DUMMY_VAR__);
                current_statement_begin__ = 1128;
                int cobscount(0);
                (void) cobscount;  // dummy to suppress unused var warning

                stan::math::fill(cobscount, std::numeric_limits<int>::min());
                current_statement_begin__ = 1129;
                int nobsi(0);
                (void) nobsi;  // dummy to suppress unused var warning

                stan::math::fill(nobsi, std::numeric_limits<int>::min());
                current_statement_begin__ = 1132;
                validate_non_negative_index("sigpoints", "(ukf ? nlatentpop : 0 )", (ukf ? nlatentpop : 0 ));
                validate_non_negative_index("sigpoints", "(ukf ? nlatentpop : 0 )", (ukf ? nlatentpop : 0 ));
                matrix_d sigpoints(static_cast<Eigen::VectorXd::Index>((ukf ? nlatentpop : 0 )),static_cast<Eigen::VectorXd::Index>((ukf ? nlatentpop : 0 )));
                (void) sigpoints;  // dummy to suppress unused var warning

                stan::math::initialize(sigpoints, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(sigpoints,DUMMY_VAR__);
                current_statement_begin__ = 1133;
                validate_non_negative_index("state", "(ukf ? nlatent : 0 )", (ukf ? nlatent : 0 ));
                vector_d state(static_cast<Eigen::VectorXd::Index>((ukf ? nlatent : 0 )));
                (void) state;  // dummy to suppress unused var warning

                stan::math::initialize(state, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(state,DUMMY_VAR__);
                current_statement_begin__ = 1134;
                double dynerror(0.0);
                (void) dynerror;  // dummy to suppress unused var warning

                stan::math::initialize(dynerror, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(dynerror,DUMMY_VAR__);
                current_statement_begin__ = 1135;
                double k(0.0);
                (void) k;  // dummy to suppress unused var warning

                stan::math::initialize(k, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(k,DUMMY_VAR__);
                current_statement_begin__ = 1136;
                double asquared(0.0);
                (void) asquared;  // dummy to suppress unused var warning

                stan::math::initialize(asquared, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(asquared,DUMMY_VAR__);
                current_statement_begin__ = 1137;
                double l(0.0);
                (void) l;  // dummy to suppress unused var warning

                stan::math::initialize(l, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(l,DUMMY_VAR__);
                current_statement_begin__ = 1138;
                double sqrtukfadjust(0.0);
                (void) sqrtukfadjust;  // dummy to suppress unused var warning

                stan::math::initialize(sqrtukfadjust, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(sqrtukfadjust,DUMMY_VAR__);
                current_statement_begin__ = 1139;
                int ndynerror(0);
                (void) ndynerror;  // dummy to suppress unused var warning

                stan::math::fill(ndynerror, std::numeric_limits<int>::min());
                current_statement_begin__ = 1140;
                validate_non_negative_index("rkstates", "(lineardynamics ? 0 : nlatent )", (lineardynamics ? 0 : nlatent ));
                validate_non_negative_index("rkstates", "(lineardynamics ? 0 : 5 )", (lineardynamics ? 0 : 5 ));
                vector<vector_d> rkstates((lineardynamics ? 0 : 5 ), (vector_d(static_cast<Eigen::VectorXd::Index>((lineardynamics ? 0 : nlatent )))));
                stan::math::initialize(rkstates, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(rkstates,DUMMY_VAR__);
                current_statement_begin__ = 1143;
                validate_non_negative_index("discreteDRIFT", "(lineardynamics ? nlatent : 0 )", (lineardynamics ? nlatent : 0 ));
                validate_non_negative_index("discreteDRIFT", "(lineardynamics ? nlatent : 0 )", (lineardynamics ? nlatent : 0 ));
                matrix_d discreteDRIFT(static_cast<Eigen::VectorXd::Index>((lineardynamics ? nlatent : 0 )),static_cast<Eigen::VectorXd::Index>((lineardynamics ? nlatent : 0 )));
                (void) discreteDRIFT;  // dummy to suppress unused var warning

                stan::math::initialize(discreteDRIFT, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(discreteDRIFT,DUMMY_VAR__);
                current_statement_begin__ = 1144;
                validate_non_negative_index("discreteCINT", "(lineardynamics ? nlatent : 0 )", (lineardynamics ? nlatent : 0 ));
                vector_d discreteCINT(static_cast<Eigen::VectorXd::Index>((lineardynamics ? nlatent : 0 )));
                (void) discreteCINT;  // dummy to suppress unused var warning

                stan::math::initialize(discreteCINT, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(discreteCINT,DUMMY_VAR__);
                current_statement_begin__ = 1145;
                validate_non_negative_index("discreteDIFFUSION", "(lineardynamics ? nlatent : 0 )", (lineardynamics ? nlatent : 0 ));
                validate_non_negative_index("discreteDIFFUSION", "(lineardynamics ? nlatent : 0 )", (lineardynamics ? nlatent : 0 ));
                matrix_d discreteDIFFUSION(static_cast<Eigen::VectorXd::Index>((lineardynamics ? nlatent : 0 )),static_cast<Eigen::VectorXd::Index>((lineardynamics ? nlatent : 0 )));
                (void) discreteDIFFUSION;  // dummy to suppress unused var warning

                stan::math::initialize(discreteDIFFUSION, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(discreteDIFFUSION,DUMMY_VAR__);
                current_statement_begin__ = 1148;
                validate_non_negative_index("sT0MEANS", "nlatent", nlatent);
                validate_non_negative_index("sT0MEANS", "1", 1);
                matrix_d sT0MEANS(static_cast<Eigen::VectorXd::Index>(nlatent),static_cast<Eigen::VectorXd::Index>(1));
                (void) sT0MEANS;  // dummy to suppress unused var warning

                stan::math::initialize(sT0MEANS, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(sT0MEANS,DUMMY_VAR__);
                current_statement_begin__ = 1149;
                validate_non_negative_index("sT0VAR", "nlatent", nlatent);
                validate_non_negative_index("sT0VAR", "nlatent", nlatent);
                matrix_d sT0VAR(static_cast<Eigen::VectorXd::Index>(nlatent),static_cast<Eigen::VectorXd::Index>(nlatent));
                (void) sT0VAR;  // dummy to suppress unused var warning

                stan::math::initialize(sT0VAR, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(sT0VAR,DUMMY_VAR__);
                current_statement_begin__ = 1150;
                validate_non_negative_index("sDIFFUSION", "nlatent", nlatent);
                validate_non_negative_index("sDIFFUSION", "nlatent", nlatent);
                matrix_d sDIFFUSION(static_cast<Eigen::VectorXd::Index>(nlatent),static_cast<Eigen::VectorXd::Index>(nlatent));
                (void) sDIFFUSION;  // dummy to suppress unused var warning

                stan::math::initialize(sDIFFUSION, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(sDIFFUSION,DUMMY_VAR__);
                current_statement_begin__ = 1151;
                validate_non_negative_index("sasymDIFFUSION", "nlatent", nlatent);
                validate_non_negative_index("sasymDIFFUSION", "nlatent", nlatent);
                matrix_d sasymDIFFUSION(static_cast<Eigen::VectorXd::Index>(nlatent),static_cast<Eigen::VectorXd::Index>(nlatent));
                (void) sasymDIFFUSION;  // dummy to suppress unused var warning

                stan::math::initialize(sasymDIFFUSION, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(sasymDIFFUSION,DUMMY_VAR__);
                current_statement_begin__ = 1152;
                validate_non_negative_index("sDRIFT", "nlatent", nlatent);
                validate_non_negative_index("sDRIFT", "nlatent", nlatent);
                matrix_d sDRIFT(static_cast<Eigen::VectorXd::Index>(nlatent),static_cast<Eigen::VectorXd::Index>(nlatent));
                (void) sDRIFT;  // dummy to suppress unused var warning

                stan::math::initialize(sDRIFT, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(sDRIFT,DUMMY_VAR__);
                current_statement_begin__ = 1153;
                validate_non_negative_index("sCINT", "nlatent", nlatent);
                validate_non_negative_index("sCINT", "1", 1);
                matrix_d sCINT(static_cast<Eigen::VectorXd::Index>(nlatent),static_cast<Eigen::VectorXd::Index>(1));
                (void) sCINT;  // dummy to suppress unused var warning

                stan::math::initialize(sCINT, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(sCINT,DUMMY_VAR__);
                current_statement_begin__ = 1154;
                validate_non_negative_index("sMANIFESTVAR", "nmanifest", nmanifest);
                validate_non_negative_index("sMANIFESTVAR", "nmanifest", nmanifest);
                matrix_d sMANIFESTVAR(static_cast<Eigen::VectorXd::Index>(nmanifest),static_cast<Eigen::VectorXd::Index>(nmanifest));
                (void) sMANIFESTVAR;  // dummy to suppress unused var warning

                stan::math::initialize(sMANIFESTVAR, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(sMANIFESTVAR,DUMMY_VAR__);
                current_statement_begin__ = 1155;
                validate_non_negative_index("sMANIFESTMEANS", "nmanifest", nmanifest);
                validate_non_negative_index("sMANIFESTMEANS", "1", 1);
                matrix_d sMANIFESTMEANS(static_cast<Eigen::VectorXd::Index>(nmanifest),static_cast<Eigen::VectorXd::Index>(1));
                (void) sMANIFESTMEANS;  // dummy to suppress unused var warning

                stan::math::initialize(sMANIFESTMEANS, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(sMANIFESTMEANS,DUMMY_VAR__);
                current_statement_begin__ = 1156;
                validate_non_negative_index("sLAMBDA", "nmanifest", nmanifest);
                validate_non_negative_index("sLAMBDA", "nlatent", nlatent);
                matrix_d sLAMBDA(static_cast<Eigen::VectorXd::Index>(nmanifest),static_cast<Eigen::VectorXd::Index>(nlatent));
                (void) sLAMBDA;  // dummy to suppress unused var warning

                stan::math::initialize(sLAMBDA, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(sLAMBDA,DUMMY_VAR__);
                current_statement_begin__ = 1157;
                validate_non_negative_index("sTDPREDEFFECT", "(ntdpred ? nlatent : 0 )", (ntdpred ? nlatent : 0 ));
                validate_non_negative_index("sTDPREDEFFECT", "ntdpred", ntdpred);
                matrix_d sTDPREDEFFECT(static_cast<Eigen::VectorXd::Index>((ntdpred ? nlatent : 0 )),static_cast<Eigen::VectorXd::Index>(ntdpred));
                (void) sTDPREDEFFECT;  // dummy to suppress unused var warning

                stan::math::initialize(sTDPREDEFFECT, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(sTDPREDEFFECT,DUMMY_VAR__);
                current_statement_begin__ = 1158;
                validate_non_negative_index("sPARS", "get_base1(dims(PARS),2,\"dims(PARS)\",1)", get_base1(dims(PARS),2,"dims(PARS)",1));
                validate_non_negative_index("sPARS", "get_base1(dims(PARS),3,\"dims(PARS)\",1)", get_base1(dims(PARS),3,"dims(PARS)",1));
                matrix_d sPARS(static_cast<Eigen::VectorXd::Index>(get_base1(dims(PARS),2,"dims(PARS)",1)),static_cast<Eigen::VectorXd::Index>(get_base1(dims(PARS),3,"dims(PARS)",1)));
                (void) sPARS;  // dummy to suppress unused var warning

                stan::math::initialize(sPARS, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(sPARS,DUMMY_VAR__);


                current_statement_begin__ = 1161;
                if (as_bool(logical_eq(ukf,1))) {
                    current_statement_begin__ = 1161;
                    stan::math::assign(k, 0.5);
                }
                current_statement_begin__ = 1163;
                if (as_bool(lineardynamics)) {
                    current_statement_begin__ = 1163;
                    stan::math::assign(discreteDIFFUSION, rep_matrix(0,nlatent,nlatent));
                }
                current_statement_begin__ = 1165;
                stan::math::assign(cobscount, 0);
                current_statement_begin__ = 1167;
                for (int rowi = 1; rowi <= ndatapoints; ++rowi) {
                    {
                    current_statement_begin__ = 1168;
                    validate_non_negative_index("o", "get_base1(nobs_y,rowi,\"nobs_y\",1)", get_base1(nobs_y,rowi,"nobs_y",1));
                    vector<int> o(get_base1(nobs_y,rowi,"nobs_y",1), 0);
                    stan::math::fill(o, std::numeric_limits<int>::min());
                    current_statement_begin__ = 1169;
                    validate_non_negative_index("o1", "get_base1(nbinary_y,rowi,\"nbinary_y\",1)", get_base1(nbinary_y,rowi,"nbinary_y",1));
                    vector<int> o1(get_base1(nbinary_y,rowi,"nbinary_y",1), 0);
                    stan::math::fill(o1, std::numeric_limits<int>::min());
                    current_statement_begin__ = 1170;
                    validate_non_negative_index("o0", "get_base1(ncont_y,rowi,\"ncont_y\",1)", get_base1(ncont_y,rowi,"ncont_y",1));
                    vector<int> o0(get_base1(ncont_y,rowi,"ncont_y",1), 0);
                    stan::math::fill(o0, std::numeric_limits<int>::min());
                    current_statement_begin__ = 1172;
                    validate_non_negative_index("ukfstates", "(ukf ? nlatentpop : 0 )", (ukf ? nlatentpop : 0 ));
                    validate_non_negative_index("ukfstates", "((2 * (nlatentpop + (get_base1(T0check,rowi,\"T0check\",1) ? nlatent : ndiffusion ))) + 2)", ((2 * (nlatentpop + (get_base1(T0check,rowi,"T0check",1) ? nlatent : ndiffusion ))) + 2));
                    matrix_d ukfstates(static_cast<Eigen::VectorXd::Index>((ukf ? nlatentpop : 0 )),static_cast<Eigen::VectorXd::Index>(((2 * (nlatentpop + (get_base1(T0check,rowi,"T0check",1) ? nlatent : ndiffusion ))) + 2)));
                    (void) ukfstates;  // dummy to suppress unused var warning

                    stan::math::initialize(ukfstates, std::numeric_limits<double>::quiet_NaN());
                    stan::math::fill(ukfstates,DUMMY_VAR__);
                    current_statement_begin__ = 1173;
                    validate_non_negative_index("ukfmeasures", "(ukf ? nmanifest : 0 )", (ukf ? nmanifest : 0 ));
                    validate_non_negative_index("ukfmeasures", "((2 * (nlatentpop + (get_base1(T0check,rowi,\"T0check\",1) ? nlatent : ndiffusion ))) + 2)", ((2 * (nlatentpop + (get_base1(T0check,rowi,"T0check",1) ? nlatent : ndiffusion ))) + 2));
                    matrix_d ukfmeasures(static_cast<Eigen::VectorXd::Index>((ukf ? nmanifest : 0 )),static_cast<Eigen::VectorXd::Index>(((2 * (nlatentpop + (get_base1(T0check,rowi,"T0check",1) ? nlatent : ndiffusion ))) + 2)));
                    (void) ukfmeasures;  // dummy to suppress unused var warning

                    stan::math::initialize(ukfmeasures, std::numeric_limits<double>::quiet_NaN());
                    stan::math::fill(ukfmeasures,DUMMY_VAR__);


                    current_statement_begin__ = 1175;
                    stan::math::assign(o, stan::model::rvalue(whichobs_y, stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_min_max(1, get_base1(nobs_y,rowi,"nobs_y",1)), stan::model::nil_index_list())), "whichobs_y"));
                    current_statement_begin__ = 1176;
                    stan::math::assign(si, get_base1(subject,rowi,"subject",1));
                    current_statement_begin__ = 1177;
                    stan::math::assign(nobsi, get_base1(nobs_y,rowi,"nobs_y",1));
                    current_statement_begin__ = 1179;
                    stan::math::assign(o1, stan::model::rvalue(whichbinary_y, stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_min_max(1, get_base1(nbinary_y,rowi,"nbinary_y",1)), stan::model::nil_index_list())), "whichbinary_y"));
                    current_statement_begin__ = 1180;
                    stan::math::assign(o0, stan::model::rvalue(whichcont_y, stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_min_max(1, get_base1(ncont_y,rowi,"ncont_y",1)), stan::model::nil_index_list())), "whichcont_y"));
                    current_statement_begin__ = 1182;
                    if (as_bool((primitive_value(logical_neq(rowi,1)) && primitive_value(logical_eq(intoverstates,1))))) {
                        current_statement_begin__ = 1182;
                        stan::math::assign(cobscount, (cobscount + get_base1(nobs_y,(rowi - 1),"nobs_y",1)));
                    }
                    current_statement_begin__ = 1183;
                    if (as_bool((primitive_value(logical_neq(rowi,1)) && primitive_value(logical_eq(intoverstates,0))))) {
                        current_statement_begin__ = 1183;
                        stan::math::assign(cobscount, (cobscount + get_base1(ncont_y,(rowi - 1),"ncont_y",1)));
                    }
                    current_statement_begin__ = 1185;
                    if (as_bool(logical_eq(ukf,1))) {

                        current_statement_begin__ = 1186;
                        if (as_bool(logical_eq(get_base1(T0check,rowi,"T0check",1),1))) {

                            current_statement_begin__ = 1186;
                            stan::math::assign(ndynerror, nlatent);
                        } else {
                            current_statement_begin__ = 1186;
                            stan::math::assign(ndynerror, ndiffusion);
                        }
                        current_statement_begin__ = 1187;
                        if (as_bool((primitive_value(logical_eq(get_base1(T0check,rowi,"T0check",1),1)) || primitive_value((primitive_value(logical_lt(ndiffusion,nlatent)) && primitive_value(logical_eq(get_base1(T0check,(rowi - 1),"T0check",1),1))))))) {

                            current_statement_begin__ = 1188;
                            stan::math::assign(asquared, ((2.0 / sqrt((nlatentpop + ndynerror))) * 0.01));
                            current_statement_begin__ = 1189;
                            stan::math::assign(l, ((asquared * ((nlatentpop + ndynerror) + k)) - (nlatentpop + ndynerror)));
                            current_statement_begin__ = 1190;
                            stan::math::assign(sqrtukfadjust, sqrt(((nlatentpop + ndynerror) + l)));
                        }
                    }
                    current_statement_begin__ = 1194;
                    if (as_bool(logical_eq(get_base1(T0check,rowi,"T0check",1),1))) {

                        current_statement_begin__ = 1196;
                        if (as_bool((primitive_value((primitive_value(logical_eq(si,1)) || primitive_value((primitive_value(logical_eq(ukfpop,0)) && primitive_value(logical_gt(nindvarying,0)))))) || primitive_value(logical_gt(ntipred,0))))) {

                            current_statement_begin__ = 1197;
                            if (as_bool(logical_eq(si,get_base1(T0MEANSsubindex,si,"T0MEANSsubindex",1)))) {
                                current_statement_begin__ = 1197;
                                stan::math::assign(sT0MEANS, get_base1(T0MEANS,get_base1(T0MEANSsubindex,si,"T0MEANSsubindex",1),"T0MEANS",1));
                            }
                            current_statement_begin__ = 1198;
                            if (as_bool(logical_eq(si,get_base1(T0VARsubindex,si,"T0VARsubindex",1)))) {
                                current_statement_begin__ = 1198;
                                stan::math::assign(sT0VAR, get_base1(T0VAR,get_base1(T0VARsubindex,si,"T0VARsubindex",1),"T0VAR",1));
                            }
                            current_statement_begin__ = 1199;
                            if (as_bool(logical_eq(si,get_base1(DRIFTsubindex,si,"DRIFTsubindex",1)))) {
                                current_statement_begin__ = 1199;
                                stan::math::assign(sDRIFT, get_base1(DRIFT,get_base1(DRIFTsubindex,si,"DRIFTsubindex",1),"DRIFT",1));
                            }
                            current_statement_begin__ = 1200;
                            if (as_bool(logical_eq(si,get_base1(DIFFUSIONsubindex,si,"DIFFUSIONsubindex",1)))) {
                                current_statement_begin__ = 1200;
                                stan::math::assign(sDIFFUSION, get_base1(DIFFUSION,get_base1(DIFFUSIONsubindex,si,"DIFFUSIONsubindex",1),"DIFFUSION",1));
                            }
                            current_statement_begin__ = 1201;
                            if (as_bool(logical_eq(si,get_base1(CINTsubindex,si,"CINTsubindex",1)))) {
                                current_statement_begin__ = 1201;
                                stan::math::assign(sCINT, get_base1(CINT,get_base1(CINTsubindex,si,"CINTsubindex",1),"CINT",1));
                            }
                            current_statement_begin__ = 1202;
                            if (as_bool(logical_eq(si,get_base1(LAMBDAsubindex,si,"LAMBDAsubindex",1)))) {
                                current_statement_begin__ = 1202;
                                stan::math::assign(sLAMBDA, get_base1(LAMBDA,get_base1(LAMBDAsubindex,si,"LAMBDAsubindex",1),"LAMBDA",1));
                            }
                            current_statement_begin__ = 1203;
                            if (as_bool(logical_eq(si,get_base1(MANIFESTMEANSsubindex,si,"MANIFESTMEANSsubindex",1)))) {
                                current_statement_begin__ = 1203;
                                stan::math::assign(sMANIFESTMEANS, get_base1(MANIFESTMEANS,get_base1(MANIFESTMEANSsubindex,si,"MANIFESTMEANSsubindex",1),"MANIFESTMEANS",1));
                            }
                            current_statement_begin__ = 1204;
                            if (as_bool(logical_eq(si,get_base1(MANIFESTVARsubindex,si,"MANIFESTVARsubindex",1)))) {
                                current_statement_begin__ = 1204;
                                stan::math::assign(sMANIFESTVAR, get_base1(MANIFESTVAR,get_base1(MANIFESTVARsubindex,si,"MANIFESTVARsubindex",1),"MANIFESTVAR",1));
                            }
                            current_statement_begin__ = 1205;
                            if (as_bool(logical_eq(si,get_base1(TDPREDEFFECTsubindex,si,"TDPREDEFFECTsubindex",1)))) {
                                current_statement_begin__ = 1205;
                                stan::math::assign(sTDPREDEFFECT, get_base1(TDPREDEFFECT,get_base1(TDPREDEFFECTsubindex,si,"TDPREDEFFECTsubindex",1),"TDPREDEFFECT",1));
                            }
                            current_statement_begin__ = 1206;
                            if (as_bool(logical_eq(si,get_base1(PARSsubindex,si,"PARSsubindex",1)))) {
                                current_statement_begin__ = 1206;
                                stan::math::assign(sPARS, get_base1(PARS,get_base1(PARSsubindex,si,"PARSsubindex",1),"PARS",1));
                            }
                            current_statement_begin__ = 1208;
                            if (as_bool((primitive_value((primitive_value(logical_eq(1,1)) && primitive_value(logical_eq(lineardynamics,1)))) && primitive_value((primitive_value(logical_eq(rowi,1)) || primitive_value(logical_neq(get_base1(asymDIFFUSIONsubindex,si,"asymDIFFUSIONsubindex",1),get_base1(asymDIFFUSIONsubindex,(si - 1),"asymDIFFUSIONsubindex",1)))))))) {

                                current_statement_begin__ = 1209;
                                stan::math::assign(sasymDIFFUSION, get_base1(asymDIFFUSION,get_base1(asymDIFFUSIONsubindex,si,"asymDIFFUSIONsubindex",1),"asymDIFFUSION",1));
                            }
                        }
                        current_statement_begin__ = 1213;
                        if (as_bool(logical_eq(ukf,1))) {

                            current_statement_begin__ = 1214;
                            stan::model::assign(etaprior, 
                                        stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                        rep_vector(0,nlatentpop), 
                                        "assigning variable etaprior");
                            current_statement_begin__ = 1215;
                            stan::math::assign(sigpoints, rep_matrix(0,nlatentpop,nlatentpop));
                            current_statement_begin__ = 1217;
                            if (as_bool(logical_eq(ukfpop,1))) {

                                current_statement_begin__ = 1218;
                                if (as_bool(logical_eq(ntipred,0))) {
                                    current_statement_begin__ = 1218;
                                    stan::model::assign(etaprior, 
                                                stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_min_max((nlatent + 1), nlatentpop), stan::model::nil_index_list())), 
                                                stan::model::rvalue(rawpopmeans, stan::model::cons_list(stan::model::index_multi(indvaryingindex), stan::model::nil_index_list()), "rawpopmeans"), 
                                                "assigning variable etaprior");
                                }
                                current_statement_begin__ = 1219;
                                if (as_bool(logical_gt(ntipred,0))) {
                                    current_statement_begin__ = 1219;
                                    stan::model::assign(etaprior, 
                                                stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_min_max((nlatent + 1), nlatentpop), stan::model::nil_index_list())), 
                                                add(stan::model::rvalue(rawpopmeans, stan::model::cons_list(stan::model::index_multi(indvaryingindex), stan::model::nil_index_list()), "rawpopmeans"),multiply(stan::model::rvalue(TIPREDEFFECT, stan::model::cons_list(stan::model::index_multi(indvaryingindex), stan::model::nil_index_list()), "TIPREDEFFECT"),transpose(get_base1(tipreds,si,"tipreds",1)))), 
                                                "assigning variable etaprior");
                                }
                                current_statement_begin__ = 1220;
                                stan::model::assign(sigpoints, 
                                            stan::model::cons_list(stan::model::index_min_max((nlatent + 1), nlatentpop), stan::model::cons_list(stan::model::index_min_max((nlatent + 1), nlatentpop), stan::model::nil_index_list())), 
                                            multiply(rawpopcovsqrt,sqrtukfadjust), 
                                            "assigning variable sigpoints");
                            }
                        }
                        current_statement_begin__ = 1224;
                        if (as_bool(logical_eq(ukf,0))) {

                            current_statement_begin__ = 1225;
                            if (as_bool(logical_eq(ntdpred,0))) {
                                current_statement_begin__ = 1225;
                                stan::math::assign(get_base1_lhs(etaprior,rowi,"etaprior",1), stan::model::rvalue(sT0MEANS, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sT0MEANS"));
                            }
                            current_statement_begin__ = 1226;
                            if (as_bool(logical_gt(ntdpred,0))) {
                                current_statement_begin__ = 1226;
                                stan::math::assign(get_base1_lhs(etaprior,rowi,"etaprior",1), add(multiply(get_base1(TDPREDEFFECT,get_base1(TDPREDEFFECTsubindex,si,"TDPREDEFFECTsubindex",1),"TDPREDEFFECT",1),get_base1(tdpreds,rowi,"tdpreds",1)),stan::model::rvalue(sT0MEANS, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sT0MEANS")));
                            }
                            current_statement_begin__ = 1227;
                            stan::math::assign(get_base1_lhs(etapriorcov,rowi,"etapriorcov",1), get_base1(T0VAR,get_base1(T0VARsubindex,si,"T0VARsubindex",1),"T0VAR",1));
                        }
                    }
                    current_statement_begin__ = 1232;
                    if (as_bool((primitive_value((primitive_value(logical_eq(lineardynamics,1)) && primitive_value(logical_eq(ukf,0)))) && primitive_value(logical_eq(get_base1(T0check,rowi,"T0check",1),0))))) {

                        current_statement_begin__ = 1234;
                        if (as_bool(logical_eq(continuoustime,1))) {
                            {
                            current_statement_begin__ = 1235;
                            int dtchange(0);
                            (void) dtchange;  // dummy to suppress unused var warning

                            stan::math::fill(dtchange, std::numeric_limits<int>::min());
                            stan::math::assign(dtchange,0);


                            current_statement_begin__ = 1236;
                            if (as_bool((primitive_value(logical_eq(si,1)) && primitive_value(logical_eq(get_base1(T0check,(rowi - 1),"T0check",1),1))))) {

                                current_statement_begin__ = 1237;
                                stan::math::assign(dtchange, 1);
                            } else if (as_bool((primitive_value(logical_eq(get_base1(T0check,(rowi - 1),"T0check",1),1)) && primitive_value(logical_neq(get_base1(dT,(rowi - 2),"dT",1),get_base1(dT,rowi,"dT",1)))))) {

                                current_statement_begin__ = 1239;
                                stan::math::assign(dtchange, 1);
                            } else if (as_bool((primitive_value(logical_eq(get_base1(T0check,(rowi - 1),"T0check",1),0)) && primitive_value(logical_neq(get_base1(dT,(rowi - 1),"dT",1),get_base1(dT,rowi,"dT",1)))))) {
                                current_statement_begin__ = 1240;
                                stan::math::assign(dtchange, 1);
                            }
                            current_statement_begin__ = 1242;
                            if (as_bool((primitive_value(logical_eq(dtchange,1)) || primitive_value((primitive_value(logical_eq(get_base1(T0check,(rowi - 1),"T0check",1),1)) && primitive_value(logical_lte(si,get_base1(DRIFTsubindex,si,"DRIFTsubindex",1)))))))) {

                                current_statement_begin__ = 1243;
                                if (as_bool(logical_eq(driftdiagonly,1))) {
                                    current_statement_begin__ = 1243;
                                    stan::math::assign(discreteDRIFT, matrix_diagexp(multiply(sDRIFT,get_base1(dT,rowi,"dT",1)), pstream__));
                                }
                                current_statement_begin__ = 1244;
                                if (as_bool(logical_eq(driftdiagonly,0))) {
                                    current_statement_begin__ = 1244;
                                    stan::math::assign(discreteDRIFT, matrix_exp(multiply(sDRIFT,get_base1(dT,rowi,"dT",1))));
                                }
                            }
                            current_statement_begin__ = 1246;
                            if (as_bool((primitive_value(logical_eq(dtchange,1)) || primitive_value((primitive_value(logical_eq(get_base1(T0check,(rowi - 1),"T0check",1),1)) && primitive_value((primitive_value(logical_lte(si,get_base1(CINTsubindex,si,"CINTsubindex",1))) || primitive_value(logical_lte(si,get_base1(DRIFTsubindex,si,"DRIFTsubindex",1)))))))))) {

                                current_statement_begin__ = 1247;
                                stan::math::assign(discreteCINT, multiply(mdivide_left(sDRIFT,subtract(discreteDRIFT,IIlatent)),stan::model::rvalue(sCINT, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sCINT")));
                            }
                            current_statement_begin__ = 1250;
                            if (as_bool((primitive_value(logical_eq(dtchange,1)) || primitive_value((primitive_value(logical_eq(get_base1(T0check,(rowi - 1),"T0check",1),1)) && primitive_value((primitive_value(logical_lte(si,get_base1(DIFFUSIONsubindex,si,"DIFFUSIONsubindex",1))) || primitive_value(logical_lte(si,get_base1(DRIFTsubindex,si,"DRIFTsubindex",1)))))))))) {

                                current_statement_begin__ = 1251;
                                stan::model::assign(discreteDIFFUSION, 
                                            stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list())), 
                                            subtract(stan::model::rvalue(sasymDIFFUSION, stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list())), "sasymDIFFUSION"),quad_form(stan::model::rvalue(sasymDIFFUSION, stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list())), "sasymDIFFUSION"),transpose(stan::model::rvalue(discreteDRIFT, stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list())), "discreteDRIFT")))), 
                                            "assigning variable discreteDIFFUSION");
                            }
                            }
                        }
                        current_statement_begin__ = 1257;
                        if (as_bool((primitive_value(logical_eq(continuoustime,0)) && primitive_value(logical_eq(get_base1(T0check,(rowi - 1),"T0check",1),1))))) {

                            current_statement_begin__ = 1258;
                            stan::math::assign(discreteDRIFT, sDRIFT);
                            current_statement_begin__ = 1259;
                            stan::math::assign(discreteCINT, stan::model::rvalue(sCINT, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sCINT"));
                            current_statement_begin__ = 1260;
                            stan::math::assign(discreteDIFFUSION, sDIFFUSION);
                        }
                        current_statement_begin__ = 1263;
                        stan::math::assign(get_base1_lhs(etaprior,rowi,"etaprior",1), add(multiply(discreteDRIFT,get_base1(etaupd,(rowi - 1),"etaupd",1)),discreteCINT));
                        current_statement_begin__ = 1264;
                        if (as_bool(logical_eq(intoverstates,1))) {

                            current_statement_begin__ = 1265;
                            if (as_bool(logical_eq(ndiffusion,0))) {
                                current_statement_begin__ = 1265;
                                stan::math::assign(get_base1_lhs(etapriorcov,rowi,"etapriorcov",1), quad_form(get_base1(etaupdcov,(rowi - 1),"etaupdcov",1),transpose(discreteDRIFT)));
                            }
                            current_statement_begin__ = 1266;
                            if (as_bool(logical_gt(ndiffusion,0))) {
                                current_statement_begin__ = 1266;
                                stan::math::assign(get_base1_lhs(etapriorcov,rowi,"etapriorcov",1), add(quad_form(get_base1(etaupdcov,(rowi - 1),"etaupdcov",1),transpose(discreteDRIFT)),discreteDIFFUSION));
                            }
                        }
                    }
                    current_statement_begin__ = 1270;
                    if (as_bool(logical_eq(ukf,1))) {

                        current_statement_begin__ = 1272;
                        if (as_bool(logical_eq(get_base1(T0check,rowi,"T0check",1),1))) {
                            current_statement_begin__ = 1272;
                            stan::math::assign(dynerror, sqrtukfadjust);
                        }
                        current_statement_begin__ = 1273;
                        if (as_bool((primitive_value(logical_eq(get_base1(T0check,rowi,"T0check",1),0)) && primitive_value(logical_eq(lineardynamics,0))))) {
                            current_statement_begin__ = 1273;
                            stan::math::assign(dynerror, (sqrtukfadjust / sqrt(get_base1(dT,rowi,"dT",1))));
                        }
                        current_statement_begin__ = 1275;
                        if (as_bool(logical_eq(get_base1(T0check,rowi,"T0check",1),0))) {

                            current_statement_begin__ = 1277;
                            stan::math::assign(sigpoints, multiply(chol(stan::model::rvalue(etaupdcov, stan::model::cons_list(stan::model::index_uni((rowi - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "etaupdcov"), pstream__),sqrtukfadjust));
                            current_statement_begin__ = 1278;
                            stan::model::assign(etaprior, 
                                        stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                        stan::model::rvalue(etaupd, stan::model::cons_list(stan::model::index_uni((rowi - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "etaupd"), 
                                        "assigning variable etaprior");
                        }
                        current_statement_begin__ = 1282;
                        for (int statei = 1; statei <= cols(ukfstates); ++statei) {

                            current_statement_begin__ = 1283;
                            if (as_bool((primitive_value(logical_gt(statei,(2 + nlatentpop))) && primitive_value(logical_lte(statei,(2 + (2 * nlatentpop))))))) {

                                current_statement_begin__ = 1284;
                                stan::model::assign(ukfstates, 
                                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(statei), stan::model::nil_index_list())), 
                                            subtract(stan::model::rvalue(etaprior, stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "etaprior"),stan::model::rvalue(sigpoints, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((statei - (2 + nlatentpop))), stan::model::nil_index_list())), "sigpoints")), 
                                            "assigning variable ukfstates");
                            } else if (as_bool((primitive_value(logical_gt(statei,2)) && primitive_value(logical_lte(statei,(2 + (2 * nlatentpop))))))) {

                                current_statement_begin__ = 1287;
                                stan::model::assign(ukfstates, 
                                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(statei), stan::model::nil_index_list())), 
                                            add(stan::model::rvalue(etaprior, stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "etaprior"),stan::model::rvalue(sigpoints, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((statei - 2)), stan::model::nil_index_list())), "sigpoints")), 
                                            "assigning variable ukfstates");
                            } else {
                                current_statement_begin__ = 1289;
                                stan::model::assign(ukfstates, 
                                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(statei), stan::model::nil_index_list())), 
                                            stan::model::rvalue(etaprior, stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "etaprior"), 
                                            "assigning variable ukfstates");
                            }
                        }
                        current_statement_begin__ = 1292;
                        for (int statei = 2; statei <= cols(ukfstates); ++statei) {

                            current_statement_begin__ = 1294;
                            if (as_bool(logical_eq(get_base1(T0check,rowi,"T0check",1),1))) {

                                current_statement_begin__ = 1296;
                                if (as_bool(logical_lte(statei,((2 + (2 * nlatentpop)) + 1)))) {

                                    current_statement_begin__ = 1298;
                                    if (as_bool(logical_eq(ukfpop,1))) {

                                        current_statement_begin__ = 1300;
                                        for (int ri = 1; ri <= size(T0MEANSsetup); ++ri) {

                                            current_statement_begin__ = 1301;
                                            if (as_bool(logical_gt(get_base1(get_base1(T0MEANSsetup,ri,"T0MEANSsetup",1),5,"T0MEANSsetup",2),0))) {

                                                current_statement_begin__ = 1302;
                                                stan::math::assign(get_base1_lhs(sT0MEANS,get_base1(get_base1(T0MEANSsetup,ri,"T0MEANSsetup",1),1,"T0MEANSsetup",2),get_base1(get_base1(T0MEANSsetup,ri,"T0MEANSsetup",1),2,"T0MEANSsetup",2),"sT0MEANS",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(T0MEANSsetup,ri,"T0MEANSsetup",1),5,"T0MEANSsetup",2)),statei,"ukfstates",1),get_base1(get_base1(T0MEANSsetup,ri,"T0MEANSsetup",1),4,"T0MEANSsetup",2),get_base1(T0MEANSvalues,ri,2,"T0MEANSvalues",1),get_base1(T0MEANSvalues,ri,3,"T0MEANSvalues",1),get_base1(T0MEANSvalues,ri,4,"T0MEANSvalues",1), pstream__));
                                            }
                                        }
                                        current_statement_begin__ = 1306;
                                        for (int ri = 1; ri <= size(T0VARsetup); ++ri) {

                                            current_statement_begin__ = 1307;
                                            if (as_bool(logical_gt(get_base1(get_base1(T0VARsetup,ri,"T0VARsetup",1),5,"T0VARsetup",2),0))) {

                                                current_statement_begin__ = 1308;
                                                stan::math::assign(get_base1_lhs(sT0VAR,get_base1(get_base1(T0VARsetup,ri,"T0VARsetup",1),1,"T0VARsetup",2),get_base1(get_base1(T0VARsetup,ri,"T0VARsetup",1),2,"T0VARsetup",2),"sT0VAR",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(T0VARsetup,ri,"T0VARsetup",1),5,"T0VARsetup",2)),statei,"ukfstates",1),get_base1(get_base1(T0VARsetup,ri,"T0VARsetup",1),4,"T0VARsetup",2),get_base1(T0VARvalues,ri,2,"T0VARvalues",1),get_base1(T0VARvalues,ri,3,"T0VARvalues",1),get_base1(T0VARvalues,ri,4,"T0VARvalues",1), pstream__));
                                            }
                                        }
                                    }
                                }
                                current_statement_begin__ = 1313;
                                stan::math::assign(state, stan::model::rvalue(sT0MEANS, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sT0MEANS"));
                                current_statement_begin__ = 1314;
                                if (as_bool(logical_gt(statei,((2 + (2 * nlatentpop)) + ndynerror)))) {

                                    current_statement_begin__ = 1315;
                                    stan::math::assign(state, add(state, multiply(minus(stan::model::rvalue(sT0VAR, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((statei - ((2 + (2 * nlatentpop)) + ndynerror))), stan::model::nil_index_list())), "sT0VAR")),dynerror)));
                                } else if (as_bool(logical_gt(statei,(2 + (2 * nlatentpop))))) {
                                    current_statement_begin__ = 1317;
                                    stan::math::assign(state, add(state, multiply(stan::model::rvalue(sT0VAR, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((statei - (2 + (2 * nlatentpop)))), stan::model::nil_index_list())), "sT0VAR"),dynerror)));
                                }
                            }
                            current_statement_begin__ = 1321;
                            if (as_bool(logical_eq(get_base1(T0check,rowi,"T0check",1),0))) {

                                current_statement_begin__ = 1322;
                                stan::math::assign(state, stan::model::rvalue(ukfstates, stan::model::cons_list(stan::model::index_min_max(1, nlatent), stan::model::cons_list(stan::model::index_uni(statei), stan::model::nil_index_list())), "ukfstates"));
                                current_statement_begin__ = 1324;
                                if (as_bool(logical_eq(lineardynamics,0))) {

                                    current_statement_begin__ = 1325;
                                    for (int stepi = 1; stepi <= get_base1(integrationsteps,rowi,"integrationsteps",1); ++stepi) {

                                        current_statement_begin__ = 1326;
                                        stan::math::assign(get_base1_lhs(rkstates,5,"rkstates",1), state);
                                        current_statement_begin__ = 1328;
                                        for (int ki = 1; ki <= 4; ++ki) {

                                            current_statement_begin__ = 1329;
                                            if (as_bool((primitive_value(logical_eq(ki,2)) || primitive_value(logical_eq(ki,3))))) {
                                                current_statement_begin__ = 1329;
                                                stan::math::assign(state, add(get_base1(rkstates,5,"rkstates",1),multiply((get_base1(dTsmall,rowi,"dTsmall",1) / 2),get_base1(rkstates,(ki - 1),"rkstates",1))));
                                            }
                                            current_statement_begin__ = 1330;
                                            if (as_bool(logical_eq(ki,4))) {
                                                current_statement_begin__ = 1330;
                                                stan::math::assign(state, add(get_base1(rkstates,5,"rkstates",1),multiply(get_base1(dTsmall,rowi,"dTsmall",1),get_base1(rkstates,3,"rkstates",1))));
                                            }
                                            current_statement_begin__ = 1332;
                                            if (as_bool(logical_eq(ukfpop,1))) {

                                                current_statement_begin__ = 1334;
                                                for (int ri = 1; ri <= size(DRIFTsetup); ++ri) {

                                                    current_statement_begin__ = 1335;
                                                    if (as_bool(logical_gt(get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),5,"DRIFTsetup",2),0))) {

                                                        current_statement_begin__ = 1336;
                                                        stan::math::assign(get_base1_lhs(sDRIFT,get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),1,"DRIFTsetup",2),get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),2,"DRIFTsetup",2),"sDRIFT",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),5,"DRIFTsetup",2)),statei,"ukfstates",1),get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),4,"DRIFTsetup",2),get_base1(DRIFTvalues,ri,2,"DRIFTvalues",1),get_base1(DRIFTvalues,ri,3,"DRIFTvalues",1),get_base1(DRIFTvalues,ri,4,"DRIFTvalues",1), pstream__));
                                                    }
                                                }
                                                current_statement_begin__ = 1341;
                                                for (int ri = 1; ri <= size(DIFFUSIONsetup); ++ri) {

                                                    current_statement_begin__ = 1342;
                                                    if (as_bool(logical_gt(get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),5,"DIFFUSIONsetup",2),0))) {

                                                        current_statement_begin__ = 1343;
                                                        stan::math::assign(get_base1_lhs(sDIFFUSION,get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),1,"DIFFUSIONsetup",2),get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),2,"DIFFUSIONsetup",2),"sDIFFUSION",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),5,"DIFFUSIONsetup",2)),statei,"ukfstates",1),get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),4,"DIFFUSIONsetup",2),get_base1(DIFFUSIONvalues,ri,2,"DIFFUSIONvalues",1),get_base1(DIFFUSIONvalues,ri,3,"DIFFUSIONvalues",1),get_base1(DIFFUSIONvalues,ri,4,"DIFFUSIONvalues",1), pstream__));
                                                    }
                                                }
                                                current_statement_begin__ = 1348;
                                                for (int ri = 1; ri <= size(CINTsetup); ++ri) {

                                                    current_statement_begin__ = 1349;
                                                    if (as_bool(logical_gt(get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),5,"CINTsetup",2),0))) {

                                                        current_statement_begin__ = 1350;
                                                        stan::math::assign(get_base1_lhs(sCINT,get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),1,"CINTsetup",2),get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),2,"CINTsetup",2),"sCINT",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),5,"CINTsetup",2)),statei,"ukfstates",1),get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),4,"CINTsetup",2),get_base1(CINTvalues,ri,2,"CINTvalues",1),get_base1(CINTvalues,ri,3,"CINTvalues",1),get_base1(CINTvalues,ri,4,"CINTvalues",1), pstream__));
                                                    }
                                                }
                                                current_statement_begin__ = 1355;
                                                for (int ri = 1; ri <= size(TDPREDEFFECTsetup); ++ri) {

                                                    current_statement_begin__ = 1356;
                                                    if (as_bool(logical_gt(get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),5,"TDPREDEFFECTsetup",2),0))) {

                                                        current_statement_begin__ = 1357;
                                                        stan::math::assign(get_base1_lhs(sTDPREDEFFECT,get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),1,"TDPREDEFFECTsetup",2),get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),2,"TDPREDEFFECTsetup",2),"sTDPREDEFFECT",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),5,"TDPREDEFFECTsetup",2)),statei,"ukfstates",1),get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),4,"TDPREDEFFECTsetup",2),get_base1(TDPREDEFFECTvalues,ri,2,"TDPREDEFFECTvalues",1),get_base1(TDPREDEFFECTvalues,ri,3,"TDPREDEFFECTvalues",1),get_base1(TDPREDEFFECTvalues,ri,4,"TDPREDEFFECTvalues",1), pstream__));
                                                    }
                                                }
                                                current_statement_begin__ = 1362;
                                                for (int ri = 1; ri <= size(PARSsetup); ++ri) {

                                                    current_statement_begin__ = 1363;
                                                    if (as_bool(logical_gt(get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),5,"PARSsetup",2),0))) {

                                                        current_statement_begin__ = 1364;
                                                        stan::math::assign(get_base1_lhs(sPARS,get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),1,"PARSsetup",2),get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),2,"PARSsetup",2),"sPARS",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),5,"PARSsetup",2)),statei,"ukfstates",1),get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),4,"PARSsetup",2),get_base1(PARSvalues,ri,2,"PARSvalues",1),get_base1(PARSvalues,ri,3,"PARSvalues",1),get_base1(PARSvalues,ri,4,"PARSvalues",1), pstream__));
                                                    }
                                                }
                                            }
                                            current_statement_begin__ = 1369;
                                            if (as_bool(logical_lte(statei,(2 + (2 * nlatentpop))))) {

                                                current_statement_begin__ = 1370;
                                                stan::math::assign(get_base1_lhs(rkstates,ki,"rkstates",1), add(multiply(sDRIFT,state),stan::model::rvalue(sCINT, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sCINT")));
                                            } else if (as_bool(logical_lte(statei,((2 + (2 * nlatentpop)) + ndynerror)))) {

                                                current_statement_begin__ = 1372;
                                                stan::math::assign(get_base1_lhs(rkstates,ki,"rkstates",1), add(add(multiply(sDRIFT,state),stan::model::rvalue(sCINT, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sCINT")),multiply(stan::model::rvalue(sDIFFUSION, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(derrind,(statei - (2 + (2 * nlatentpop))),"derrind",1)), stan::model::nil_index_list())), "sDIFFUSION"),dynerror)));
                                            } else {
                                                current_statement_begin__ = 1373;
                                                stan::math::assign(get_base1_lhs(rkstates,ki,"rkstates",1), subtract(add(multiply(sDRIFT,state),stan::model::rvalue(sCINT, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sCINT")),multiply(stan::model::rvalue(sDIFFUSION, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(derrind,(statei - ((2 + (2 * nlatentpop)) + ndynerror)),"derrind",1)), stan::model::nil_index_list())), "sDIFFUSION"),dynerror)));
                                            }
                                        }
                                        current_statement_begin__ = 1376;
                                        stan::math::assign(state, add(get_base1(rkstates,5,"rkstates",1),multiply((get_base1(dTsmall,rowi,"dTsmall",1) / 6),add(add(add(get_base1(rkstates,1,"rkstates",1),multiply(2,get_base1(rkstates,2,"rkstates",1))),multiply(2,get_base1(rkstates,3,"rkstates",1))),get_base1(rkstates,4,"rkstates",1)))));
                                    }
                                }
                                current_statement_begin__ = 1381;
                                if (as_bool(logical_eq(lineardynamics,1))) {

                                    current_statement_begin__ = 1383;
                                    if (as_bool(logical_eq(ukfpop,1))) {

                                        current_statement_begin__ = 1385;
                                        for (int ri = 1; ri <= size(DRIFTsetup); ++ri) {

                                            current_statement_begin__ = 1386;
                                            if (as_bool(logical_gt(get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),5,"DRIFTsetup",2),0))) {

                                                current_statement_begin__ = 1387;
                                                stan::math::assign(get_base1_lhs(sDRIFT,get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),1,"DRIFTsetup",2),get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),2,"DRIFTsetup",2),"sDRIFT",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),5,"DRIFTsetup",2)),statei,"ukfstates",1),get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),4,"DRIFTsetup",2),get_base1(DRIFTvalues,ri,2,"DRIFTvalues",1),get_base1(DRIFTvalues,ri,3,"DRIFTvalues",1),get_base1(DRIFTvalues,ri,4,"DRIFTvalues",1), pstream__));
                                            }
                                        }
                                        current_statement_begin__ = 1392;
                                        for (int ri = 1; ri <= size(DIFFUSIONsetup); ++ri) {

                                            current_statement_begin__ = 1393;
                                            if (as_bool(logical_gt(get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),5,"DIFFUSIONsetup",2),0))) {

                                                current_statement_begin__ = 1394;
                                                stan::math::assign(get_base1_lhs(sDIFFUSION,get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),1,"DIFFUSIONsetup",2),get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),2,"DIFFUSIONsetup",2),"sDIFFUSION",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),5,"DIFFUSIONsetup",2)),statei,"ukfstates",1),get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),4,"DIFFUSIONsetup",2),get_base1(DIFFUSIONvalues,ri,2,"DIFFUSIONvalues",1),get_base1(DIFFUSIONvalues,ri,3,"DIFFUSIONvalues",1),get_base1(DIFFUSIONvalues,ri,4,"DIFFUSIONvalues",1), pstream__));
                                            }
                                        }
                                        current_statement_begin__ = 1399;
                                        for (int ri = 1; ri <= size(CINTsetup); ++ri) {

                                            current_statement_begin__ = 1400;
                                            if (as_bool(logical_gt(get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),5,"CINTsetup",2),0))) {

                                                current_statement_begin__ = 1401;
                                                stan::math::assign(get_base1_lhs(sCINT,get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),1,"CINTsetup",2),get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),2,"CINTsetup",2),"sCINT",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),5,"CINTsetup",2)),statei,"ukfstates",1),get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),4,"CINTsetup",2),get_base1(CINTvalues,ri,2,"CINTvalues",1),get_base1(CINTvalues,ri,3,"CINTvalues",1),get_base1(CINTvalues,ri,4,"CINTvalues",1), pstream__));
                                            }
                                        }
                                        current_statement_begin__ = 1406;
                                        for (int ri = 1; ri <= size(TDPREDEFFECTsetup); ++ri) {

                                            current_statement_begin__ = 1407;
                                            if (as_bool(logical_gt(get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),5,"TDPREDEFFECTsetup",2),0))) {

                                                current_statement_begin__ = 1408;
                                                stan::math::assign(get_base1_lhs(sTDPREDEFFECT,get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),1,"TDPREDEFFECTsetup",2),get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),2,"TDPREDEFFECTsetup",2),"sTDPREDEFFECT",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),5,"TDPREDEFFECTsetup",2)),statei,"ukfstates",1),get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),4,"TDPREDEFFECTsetup",2),get_base1(TDPREDEFFECTvalues,ri,2,"TDPREDEFFECTvalues",1),get_base1(TDPREDEFFECTvalues,ri,3,"TDPREDEFFECTvalues",1),get_base1(TDPREDEFFECTvalues,ri,4,"TDPREDEFFECTvalues",1), pstream__));
                                            }
                                        }
                                        current_statement_begin__ = 1413;
                                        for (int ri = 1; ri <= size(PARSsetup); ++ri) {

                                            current_statement_begin__ = 1414;
                                            if (as_bool(logical_gt(get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),5,"PARSsetup",2),0))) {

                                                current_statement_begin__ = 1415;
                                                stan::math::assign(get_base1_lhs(sPARS,get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),1,"PARSsetup",2),get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),2,"PARSsetup",2),"sPARS",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),5,"PARSsetup",2)),statei,"ukfstates",1),get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),4,"PARSsetup",2),get_base1(PARSvalues,ri,2,"PARSvalues",1),get_base1(PARSvalues,ri,3,"PARSvalues",1),get_base1(PARSvalues,ri,4,"PARSvalues",1), pstream__));
                                            }
                                        }
                                    }
                                    current_statement_begin__ = 1419;
                                    if (as_bool(logical_lte(statei,((2 + (2 * nlatentpop)) + 1)))) {

                                        current_statement_begin__ = 1420;
                                        if (as_bool(logical_eq(continuoustime,1))) {

                                            current_statement_begin__ = 1421;
                                            if (as_bool(logical_eq(driftdiagonly,1))) {
                                                current_statement_begin__ = 1421;
                                                stan::math::assign(discreteDRIFT, matrix_diagexp(multiply(sDRIFT,get_base1(dT,rowi,"dT",1)), pstream__));
                                            }
                                            current_statement_begin__ = 1422;
                                            if (as_bool(logical_eq(driftdiagonly,0))) {
                                                current_statement_begin__ = 1422;
                                                stan::math::assign(discreteDRIFT, matrix_exp(multiply(sDRIFT,get_base1(dT,rowi,"dT",1))));
                                            }
                                            current_statement_begin__ = 1423;
                                            stan::math::assign(discreteCINT, multiply(mdivide_left(sDRIFT,subtract(discreteDRIFT,IIlatent)),stan::model::rvalue(sCINT, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sCINT")));
                                            current_statement_begin__ = 1426;
                                            stan::model::assign(discreteDIFFUSION, 
                                                        stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list())), 
                                                        discreteDIFFUSIONcalc(stan::model::rvalue(sDRIFT, stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list())), "sDRIFT"),stan::model::rvalue(sDIFFUSION, stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list())), "sDIFFUSION"),get_base1(dT,rowi,"dT",1), pstream__), 
                                                        "assigning variable discreteDIFFUSION");
                                        }
                                        current_statement_begin__ = 1428;
                                        if (as_bool(logical_eq(continuoustime,0))) {

                                            current_statement_begin__ = 1429;
                                            stan::math::assign(discreteDRIFT, sDRIFT);
                                            current_statement_begin__ = 1430;
                                            stan::math::assign(discreteCINT, stan::model::rvalue(sCINT, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sCINT"));
                                            current_statement_begin__ = 1431;
                                            stan::math::assign(discreteDIFFUSION, sDIFFUSION);
                                        }
                                    }
                                    current_statement_begin__ = 1434;
                                    stan::math::assign(state, add(multiply(discreteDRIFT,state),discreteCINT));
                                    current_statement_begin__ = 1435;
                                    if (as_bool((primitive_value(logical_gt(statei,(2 + (2 * nlatentpop)))) && primitive_value(logical_lte(statei,((2 + (2 * nlatentpop)) + ndynerror)))))) {
                                        current_statement_begin__ = 1435;
                                        stan::math::assign(state, add(state, multiply(stan::model::rvalue(discreteDIFFUSION, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(derrind,(statei - (2 + (2 * nlatentpop))),"derrind",1)), stan::model::nil_index_list())), "discreteDIFFUSION"),dynerror)));
                                    }
                                    current_statement_begin__ = 1436;
                                    if (as_bool(logical_gt(statei,((2 + (2 * nlatentpop)) + ndynerror)))) {
                                        current_statement_begin__ = 1436;
                                        stan::math::assign(state, add(state, multiply(minus(stan::model::rvalue(discreteDIFFUSION, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(derrind,(statei - ((2 + (2 * nlatentpop)) + ndynerror)),"derrind",1)), stan::model::nil_index_list())), "discreteDIFFUSION")),dynerror)));
                                    }
                                }
                            }
                            current_statement_begin__ = 1441;
                            if (as_bool(logical_eq(ukfpop,1))) {

                                current_statement_begin__ = 1443;
                                for (int ri = 1; ri <= size(DRIFTsetup); ++ri) {

                                    current_statement_begin__ = 1444;
                                    if (as_bool(logical_gt(get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),5,"DRIFTsetup",2),0))) {

                                        current_statement_begin__ = 1445;
                                        stan::math::assign(get_base1_lhs(sDRIFT,get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),1,"DRIFTsetup",2),get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),2,"DRIFTsetup",2),"sDRIFT",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),5,"DRIFTsetup",2)),statei,"ukfstates",1),get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),4,"DRIFTsetup",2),get_base1(DRIFTvalues,ri,2,"DRIFTvalues",1),get_base1(DRIFTvalues,ri,3,"DRIFTvalues",1),get_base1(DRIFTvalues,ri,4,"DRIFTvalues",1), pstream__));
                                    }
                                }
                                current_statement_begin__ = 1450;
                                for (int ri = 1; ri <= size(DIFFUSIONsetup); ++ri) {

                                    current_statement_begin__ = 1451;
                                    if (as_bool(logical_gt(get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),5,"DIFFUSIONsetup",2),0))) {

                                        current_statement_begin__ = 1452;
                                        stan::math::assign(get_base1_lhs(sDIFFUSION,get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),1,"DIFFUSIONsetup",2),get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),2,"DIFFUSIONsetup",2),"sDIFFUSION",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),5,"DIFFUSIONsetup",2)),statei,"ukfstates",1),get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),4,"DIFFUSIONsetup",2),get_base1(DIFFUSIONvalues,ri,2,"DIFFUSIONvalues",1),get_base1(DIFFUSIONvalues,ri,3,"DIFFUSIONvalues",1),get_base1(DIFFUSIONvalues,ri,4,"DIFFUSIONvalues",1), pstream__));
                                    }
                                }
                                current_statement_begin__ = 1457;
                                for (int ri = 1; ri <= size(CINTsetup); ++ri) {

                                    current_statement_begin__ = 1458;
                                    if (as_bool(logical_gt(get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),5,"CINTsetup",2),0))) {

                                        current_statement_begin__ = 1459;
                                        stan::math::assign(get_base1_lhs(sCINT,get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),1,"CINTsetup",2),get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),2,"CINTsetup",2),"sCINT",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),5,"CINTsetup",2)),statei,"ukfstates",1),get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),4,"CINTsetup",2),get_base1(CINTvalues,ri,2,"CINTvalues",1),get_base1(CINTvalues,ri,3,"CINTvalues",1),get_base1(CINTvalues,ri,4,"CINTvalues",1), pstream__));
                                    }
                                }
                                current_statement_begin__ = 1464;
                                for (int ri = 1; ri <= size(TDPREDEFFECTsetup); ++ri) {

                                    current_statement_begin__ = 1465;
                                    if (as_bool(logical_gt(get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),5,"TDPREDEFFECTsetup",2),0))) {

                                        current_statement_begin__ = 1466;
                                        stan::math::assign(get_base1_lhs(sTDPREDEFFECT,get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),1,"TDPREDEFFECTsetup",2),get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),2,"TDPREDEFFECTsetup",2),"sTDPREDEFFECT",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),5,"TDPREDEFFECTsetup",2)),statei,"ukfstates",1),get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),4,"TDPREDEFFECTsetup",2),get_base1(TDPREDEFFECTvalues,ri,2,"TDPREDEFFECTvalues",1),get_base1(TDPREDEFFECTvalues,ri,3,"TDPREDEFFECTvalues",1),get_base1(TDPREDEFFECTvalues,ri,4,"TDPREDEFFECTvalues",1), pstream__));
                                    }
                                }
                                current_statement_begin__ = 1471;
                                for (int ri = 1; ri <= size(PARSsetup); ++ri) {

                                    current_statement_begin__ = 1472;
                                    if (as_bool(logical_gt(get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),5,"PARSsetup",2),0))) {

                                        current_statement_begin__ = 1473;
                                        stan::math::assign(get_base1_lhs(sPARS,get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),1,"PARSsetup",2),get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),2,"PARSsetup",2),"sPARS",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),5,"PARSsetup",2)),statei,"ukfstates",1),get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),4,"PARSsetup",2),get_base1(PARSvalues,ri,2,"PARSvalues",1),get_base1(PARSvalues,ri,3,"PARSvalues",1),get_base1(PARSvalues,ri,4,"PARSvalues",1), pstream__));
                                    }
                                }
                            }
                            current_statement_begin__ = 1477;
                            if (as_bool(logical_gt(ntdpred,0))) {
                                current_statement_begin__ = 1477;
                                stan::math::assign(state, add(state, multiply(sTDPREDEFFECT,get_base1(tdpreds,rowi,"tdpreds",1))));
                            }
                            current_statement_begin__ = 1478;
                            stan::model::assign(ukfstates, 
                                        stan::model::cons_list(stan::model::index_min_max(1, nlatent), stan::model::cons_list(stan::model::index_uni(statei), stan::model::nil_index_list())), 
                                        state, 
                                        "assigning variable ukfstates");
                            current_statement_begin__ = 1479;
                            if (as_bool(logical_eq(statei,2))) {
                                current_statement_begin__ = 1479;
                                stan::model::assign(ukfstates, 
                                            stan::model::cons_list(stan::model::index_min_max(1, nlatent), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                                            state, 
                                            "assigning variable ukfstates");
                            }
                        }
                        current_statement_begin__ = 1482;
                        stan::math::assign(get_base1_lhs(etaprior,rowi,"etaprior",1), colMeans(transpose(ukfstates), pstream__));
                        current_statement_begin__ = 1483;
                        stan::math::assign(get_base1_lhs(etapriorcov,rowi,"etapriorcov",1), divide(cov_of_matrix(transpose(ukfstates), pstream__),asquared));
                    }
                    current_statement_begin__ = 1486;
                    if (as_bool((primitive_value(logical_eq(intoverstates,0)) && primitive_value(logical_eq(lineardynamics,1))))) {

                        current_statement_begin__ = 1487;
                        if (as_bool(logical_eq(get_base1(T0check,rowi,"T0check",1),1))) {
                            current_statement_begin__ = 1487;
                            stan::math::assign(get_base1_lhs(etaupd,rowi,"etaupd",1), add(get_base1(etaprior,rowi,"etaprior",1),multiply(sT0VAR,stan::model::rvalue(etaupdbasestates, stan::model::cons_list(stan::model::index_min_max((1 + ((rowi - 1) * nlatent)), (rowi * nlatent)), stan::model::nil_index_list()), "etaupdbasestates"))));
                        }
                        current_statement_begin__ = 1488;
                        if (as_bool(logical_eq(get_base1(T0check,rowi,"T0check",1),0))) {
                            current_statement_begin__ = 1488;
                            stan::math::assign(get_base1_lhs(etaupd,rowi,"etaupd",1), add(get_base1(etaprior,rowi,"etaprior",1),multiply(sDIFFUSION,stan::model::rvalue(etaupdbasestates, stan::model::cons_list(stan::model::index_min_max((1 + ((rowi - 1) * nlatent)), (rowi * nlatent)), stan::model::nil_index_list()), "etaupdbasestates"))));
                        }
                    }
                    current_statement_begin__ = 1491;
                    if (as_bool((primitive_value(logical_eq(nobsi,0)) && primitive_value(logical_eq(intoverstates,1))))) {

                        current_statement_begin__ = 1492;
                        stan::math::assign(get_base1_lhs(etaupdcov,rowi,"etaupdcov",1), get_base1(etapriorcov,rowi,"etapriorcov",1));
                        current_statement_begin__ = 1493;
                        stan::math::assign(get_base1_lhs(etaupd,rowi,"etaupd",1), get_base1(etaprior,rowi,"etaprior",1));
                    }
                    current_statement_begin__ = 1496;
                    if (as_bool(logical_gt(nobsi,0))) {
                        {
                        current_statement_begin__ = 1498;
                        validate_non_negative_index("cindex", "(intoverstates ? nobsi : get_base1(ncont_y,rowi,\"ncont_y\",1) )", (intoverstates ? nobsi : get_base1(ncont_y,rowi,"ncont_y",1) ));
                        vector<int> cindex((intoverstates ? nobsi : get_base1(ncont_y,rowi,"ncont_y",1) ), 0);
                        stan::math::fill(cindex, std::numeric_limits<int>::min());


                        current_statement_begin__ = 1500;
                        if (as_bool(logical_eq(intoverstates,0))) {
                            current_statement_begin__ = 1500;
                            stan::math::assign(cindex, o0);
                        }
                        current_statement_begin__ = 1501;
                        if (as_bool(logical_eq(intoverstates,1))) {
                            current_statement_begin__ = 1501;
                            stan::math::assign(cindex, o);
                        }
                        current_statement_begin__ = 1503;
                        if (as_bool(logical_eq(ukf,0))) {

                            current_statement_begin__ = 1504;
                            if (as_bool(logical_eq(intoverstates,1))) {

                                current_statement_begin__ = 1505;
                                stan::model::assign(ypred, 
                                            stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list()), 
                                            add(stan::model::rvalue(sMANIFESTMEANS, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sMANIFESTMEANS"),multiply(stan::model::rvalue(sLAMBDA, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sLAMBDA"),get_base1(etaprior,rowi,"etaprior",1))), 
                                            "assigning variable ypred");
                                current_statement_begin__ = 1506;
                                stan::model::assign(ypredcov, 
                                            stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), 
                                            add(quad_form(get_base1(etapriorcov,rowi,"etapriorcov",1),transpose(stan::model::rvalue(sLAMBDA, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sLAMBDA"))),stan::model::rvalue(sMANIFESTVAR, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), "sMANIFESTVAR")), 
                                            "assigning variable ypredcov");
                                current_statement_begin__ = 1507;
                                for (int wi = 1; wi <= nmanifest; ++wi) {

                                    current_statement_begin__ = 1508;
                                    if (as_bool((primitive_value(logical_eq(get_base1(manifesttype,wi,"manifesttype",1),1)) && primitive_value(logical_neq(get_base1(get_base1(Y,rowi,"Y",1),wi,"Y",2),99999))))) {
                                        current_statement_begin__ = 1508;
                                        stan::math::assign(get_base1_lhs(ypredcov,wi,wi,"ypredcov",1), (get_base1(ypredcov,wi,wi,"ypredcov",1) + fabs(((get_base1(ypred,wi,"ypred",1) - 1) * get_base1(ypred,wi,"ypred",1)))));
                                    }
                                }
                                current_statement_begin__ = 1510;
                                stan::model::assign(K, 
                                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), 
                                            mdivide_right(multiply(get_base1(etapriorcov,rowi,"etapriorcov",1),transpose(stan::model::rvalue(sLAMBDA, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sLAMBDA"))),stan::model::rvalue(ypredcov, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), "ypredcov")), 
                                            "assigning variable K");
                                current_statement_begin__ = 1511;
                                stan::math::assign(get_base1_lhs(etaupdcov,rowi,"etaupdcov",1), multiply(subtract(IIlatent,multiply(stan::model::rvalue(K, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), "K"),stan::model::rvalue(sLAMBDA, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sLAMBDA"))),get_base1(etapriorcov,rowi,"etapriorcov",1)));
                            }
                            current_statement_begin__ = 1513;
                            if (as_bool(logical_eq(intoverstates,0))) {

                                current_statement_begin__ = 1514;
                                if (as_bool(logical_gt(get_base1(ncont_y,rowi,"ncont_y",1),0))) {
                                    current_statement_begin__ = 1514;
                                    stan::model::assign(ypred, 
                                                stan::model::cons_list(stan::model::index_multi(o0), stan::model::nil_index_list()), 
                                                add(stan::model::rvalue(sMANIFESTMEANS, stan::model::cons_list(stan::model::index_multi(o0), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sMANIFESTMEANS"),multiply(stan::model::rvalue(sLAMBDA, stan::model::cons_list(stan::model::index_multi(o0), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sLAMBDA"),get_base1(etaupd,rowi,"etaupd",1))), 
                                                "assigning variable ypred");
                                }
                                current_statement_begin__ = 1515;
                                if (as_bool(logical_gt(get_base1(nbinary_y,rowi,"nbinary_y",1),0))) {
                                    current_statement_begin__ = 1515;
                                    stan::model::assign(ypred, 
                                                stan::model::cons_list(stan::model::index_multi(o1), stan::model::nil_index_list()), 
                                                to_vector(inv_logit(to_array_1d(add(stan::model::rvalue(sMANIFESTMEANS, stan::model::cons_list(stan::model::index_multi(o1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sMANIFESTMEANS"),multiply(stan::model::rvalue(sLAMBDA, stan::model::cons_list(stan::model::index_multi(o1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sLAMBDA"),get_base1(etaupd,rowi,"etaupd",1)))))), 
                                                "assigning variable ypred");
                                }
                                current_statement_begin__ = 1516;
                                stan::model::assign(ypredcov, 
                                            stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), 
                                            stan::model::rvalue(sMANIFESTVAR, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), "sMANIFESTVAR"), 
                                            "assigning variable ypredcov");
                            }
                        }
                        current_statement_begin__ = 1521;
                        if (as_bool(logical_eq(ukf,1))) {

                            current_statement_begin__ = 1522;
                            for (int statei = 2; statei <= cols(ukfmeasures); ++statei) {

                                current_statement_begin__ = 1523;
                                stan::math::assign(state, stan::model::rvalue(ukfstates, stan::model::cons_list(stan::model::index_min_max(1, nlatent), stan::model::cons_list(stan::model::index_uni(statei), stan::model::nil_index_list())), "ukfstates"));
                                current_statement_begin__ = 1525;
                                if (as_bool(logical_eq(ukfpop,1))) {

                                    current_statement_begin__ = 1527;
                                    for (int ri = 1; ri <= size(LAMBDAsetup); ++ri) {

                                        current_statement_begin__ = 1528;
                                        if (as_bool(logical_gt(get_base1(get_base1(LAMBDAsetup,ri,"LAMBDAsetup",1),5,"LAMBDAsetup",2),0))) {

                                            current_statement_begin__ = 1529;
                                            stan::math::assign(get_base1_lhs(sLAMBDA,get_base1(get_base1(LAMBDAsetup,ri,"LAMBDAsetup",1),1,"LAMBDAsetup",2),get_base1(get_base1(LAMBDAsetup,ri,"LAMBDAsetup",1),2,"LAMBDAsetup",2),"sLAMBDA",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(LAMBDAsetup,ri,"LAMBDAsetup",1),5,"LAMBDAsetup",2)),statei,"ukfstates",1),get_base1(get_base1(LAMBDAsetup,ri,"LAMBDAsetup",1),4,"LAMBDAsetup",2),get_base1(LAMBDAvalues,ri,2,"LAMBDAvalues",1),get_base1(LAMBDAvalues,ri,3,"LAMBDAvalues",1),get_base1(LAMBDAvalues,ri,4,"LAMBDAvalues",1), pstream__));
                                        }
                                    }
                                    current_statement_begin__ = 1533;
                                    for (int ri = 1; ri <= size(MANIFESTMEANSsetup); ++ri) {

                                        current_statement_begin__ = 1534;
                                        if (as_bool(logical_gt(get_base1(get_base1(MANIFESTMEANSsetup,ri,"MANIFESTMEANSsetup",1),5,"MANIFESTMEANSsetup",2),0))) {

                                            current_statement_begin__ = 1535;
                                            stan::math::assign(get_base1_lhs(sMANIFESTMEANS,get_base1(get_base1(MANIFESTMEANSsetup,ri,"MANIFESTMEANSsetup",1),1,"MANIFESTMEANSsetup",2),get_base1(get_base1(MANIFESTMEANSsetup,ri,"MANIFESTMEANSsetup",1),2,"MANIFESTMEANSsetup",2),"sMANIFESTMEANS",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(MANIFESTMEANSsetup,ri,"MANIFESTMEANSsetup",1),5,"MANIFESTMEANSsetup",2)),statei,"ukfstates",1),get_base1(get_base1(MANIFESTMEANSsetup,ri,"MANIFESTMEANSsetup",1),4,"MANIFESTMEANSsetup",2),get_base1(MANIFESTMEANSvalues,ri,2,"MANIFESTMEANSvalues",1),get_base1(MANIFESTMEANSvalues,ri,3,"MANIFESTMEANSvalues",1),get_base1(MANIFESTMEANSvalues,ri,4,"MANIFESTMEANSvalues",1), pstream__));
                                        }
                                    }
                                    current_statement_begin__ = 1539;
                                    for (int ri = 1; ri <= size(MANIFESTVARsetup); ++ri) {

                                        current_statement_begin__ = 1540;
                                        if (as_bool(logical_gt(get_base1(get_base1(MANIFESTVARsetup,ri,"MANIFESTVARsetup",1),5,"MANIFESTVARsetup",2),0))) {

                                            current_statement_begin__ = 1541;
                                            stan::math::assign(get_base1_lhs(sMANIFESTVAR,get_base1(get_base1(MANIFESTVARsetup,ri,"MANIFESTVARsetup",1),1,"MANIFESTVARsetup",2),get_base1(get_base1(MANIFESTVARsetup,ri,"MANIFESTVARsetup",1),2,"MANIFESTVARsetup",2),"sMANIFESTVAR",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(MANIFESTVARsetup,ri,"MANIFESTVARsetup",1),5,"MANIFESTVARsetup",2)),statei,"ukfstates",1),get_base1(get_base1(MANIFESTVARsetup,ri,"MANIFESTVARsetup",1),4,"MANIFESTVARsetup",2),get_base1(MANIFESTVARvalues,ri,2,"MANIFESTVARvalues",1),get_base1(MANIFESTVARvalues,ri,3,"MANIFESTVARvalues",1),get_base1(MANIFESTVARvalues,ri,4,"MANIFESTVARvalues",1), pstream__));
                                        }
                                    }
                                    current_statement_begin__ = 1545;
                                    for (int ri = 1; ri <= size(PARSsetup); ++ri) {

                                        current_statement_begin__ = 1546;
                                        if (as_bool(logical_gt(get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),5,"PARSsetup",2),0))) {

                                            current_statement_begin__ = 1547;
                                            stan::math::assign(get_base1_lhs(sPARS,get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),1,"PARSsetup",2),get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),2,"PARSsetup",2),"sPARS",1), tform(get_base1(ukfstates,(nlatent + get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),5,"PARSsetup",2)),statei,"ukfstates",1),get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),4,"PARSsetup",2),get_base1(PARSvalues,ri,2,"PARSvalues",1),get_base1(PARSvalues,ri,3,"PARSvalues",1),get_base1(PARSvalues,ri,4,"PARSvalues",1), pstream__));
                                        }
                                    }
                                }
                                current_statement_begin__ = 1552;
                                if (as_bool(logical_gt(get_base1(ncont_y,rowi,"ncont_y",1),0))) {
                                    current_statement_begin__ = 1552;
                                    stan::model::assign(ukfmeasures, 
                                                stan::model::cons_list(stan::model::index_multi(o0), stan::model::cons_list(stan::model::index_uni(statei), stan::model::nil_index_list())), 
                                                add(stan::model::rvalue(sMANIFESTMEANS, stan::model::cons_list(stan::model::index_multi(o0), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sMANIFESTMEANS"),multiply(stan::model::rvalue(sLAMBDA, stan::model::cons_list(stan::model::index_multi(o0), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sLAMBDA"),state)), 
                                                "assigning variable ukfmeasures");
                                }
                                current_statement_begin__ = 1553;
                                if (as_bool(logical_gt(get_base1(nbinary_y,rowi,"nbinary_y",1),0))) {

                                    current_statement_begin__ = 1554;
                                    stan::model::assign(ukfmeasures, 
                                                stan::model::cons_list(stan::model::index_multi(o1), stan::model::cons_list(stan::model::index_uni(statei), stan::model::nil_index_list())), 
                                                to_vector(inv_logit(to_array_1d(add(stan::model::rvalue(sMANIFESTMEANS, stan::model::cons_list(stan::model::index_multi(o1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sMANIFESTMEANS"),multiply(stan::model::rvalue(sLAMBDA, stan::model::cons_list(stan::model::index_multi(o1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sLAMBDA"),state))))), 
                                                "assigning variable ukfmeasures");
                                }
                                current_statement_begin__ = 1556;
                                if (as_bool(logical_eq(statei,2))) {

                                    current_statement_begin__ = 1557;
                                    if (as_bool(logical_gt(get_base1(ncont_y,rowi,"ncont_y",1),0))) {
                                        current_statement_begin__ = 1557;
                                        stan::model::assign(ukfmeasures, 
                                                    stan::model::cons_list(stan::model::index_multi(o0), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                                                    add(stan::model::rvalue(sMANIFESTMEANS, stan::model::cons_list(stan::model::index_multi(o0), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sMANIFESTMEANS"),multiply(stan::model::rvalue(sLAMBDA, stan::model::cons_list(stan::model::index_multi(o0), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sLAMBDA"),state)), 
                                                    "assigning variable ukfmeasures");
                                    }
                                    current_statement_begin__ = 1558;
                                    if (as_bool(logical_gt(get_base1(nbinary_y,rowi,"nbinary_y",1),0))) {

                                        current_statement_begin__ = 1559;
                                        stan::model::assign(ukfmeasures, 
                                                    stan::model::cons_list(stan::model::index_multi(o1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                                                    to_vector(inv_logit(to_array_1d(add(stan::model::rvalue(sMANIFESTMEANS, stan::model::cons_list(stan::model::index_multi(o1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "sMANIFESTMEANS"),multiply(stan::model::rvalue(sLAMBDA, stan::model::cons_list(stan::model::index_multi(o1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sLAMBDA"),state))))), 
                                                    "assigning variable ukfmeasures");
                                    }
                                }
                            }
                            current_statement_begin__ = 1564;
                            stan::model::assign(ypred, 
                                        stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list()), 
                                        colMeans(transpose(stan::model::rvalue(ukfmeasures, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "ukfmeasures")), pstream__), 
                                        "assigning variable ypred");
                            current_statement_begin__ = 1565;
                            stan::model::assign(ypredcov, 
                                        stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), 
                                        add(divide(cov_of_matrix(transpose(stan::model::rvalue(ukfmeasures, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "ukfmeasures")), pstream__),asquared),stan::model::rvalue(sMANIFESTVAR, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), "sMANIFESTVAR")), 
                                        "assigning variable ypredcov");
                            current_statement_begin__ = 1566;
                            for (int wi = 1; wi <= nmanifest; ++wi) {

                                current_statement_begin__ = 1567;
                                if (as_bool((primitive_value(logical_eq(get_base1(manifesttype,wi,"manifesttype",1),1)) && primitive_value(logical_neq(get_base1(get_base1(Y,rowi,"Y",1),wi,"Y",2),99999))))) {
                                    current_statement_begin__ = 1567;
                                    stan::math::assign(get_base1_lhs(ypredcov,wi,wi,"ypredcov",1), (get_base1(ypredcov,wi,wi,"ypredcov",1) + fabs(((get_base1(ypred,wi,"ypred",1) - 1) * get_base1(ypred,wi,"ypred",1)))));
                                }
                            }
                            current_statement_begin__ = 1569;
                            stan::model::assign(K, 
                                        stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), 
                                        mdivide_right(divide(crosscov(transpose(ukfstates),transpose(stan::model::rvalue(ukfmeasures, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "ukfmeasures")), pstream__),asquared),stan::model::rvalue(ypredcov, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), "ypredcov")), 
                                        "assigning variable K");
                            current_statement_begin__ = 1570;
                            stan::math::assign(get_base1_lhs(etaupdcov,rowi,"etaupdcov",1), subtract(get_base1(etapriorcov,rowi,"etapriorcov",1),quad_form(stan::model::rvalue(ypredcov, stan::model::cons_list(stan::model::index_multi(o), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), "ypredcov"),transpose(stan::model::rvalue(K, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), "K")))));
                        }
                        current_statement_begin__ = 1574;
                        if (as_bool(logical_gt(verbose,1))) {

                            current_statement_begin__ = 1575;
                            if (pstream__) {
                                stan_print(pstream__,"rowi ");
                                stan_print(pstream__,rowi);
                                stan_print(pstream__,"  si ");
                                stan_print(pstream__,si);
                                stan_print(pstream__,"  etaprior[rowi] ");
                                stan_print(pstream__,get_base1(etaprior,rowi,"etaprior",1));
                                stan_print(pstream__,"  etapriorcov[rowi] ");
                                stan_print(pstream__,get_base1(etapriorcov,rowi,"etapriorcov",1));
                                stan_print(pstream__,"  etaupd[rowi] ");
                                stan_print(pstream__,get_base1(etaupd,rowi,"etaupd",1));
                                stan_print(pstream__,"  etaupdcov[rowi] ");
                                stan_print(pstream__,get_base1(etaupdcov,rowi,"etaupdcov",1));
                                stan_print(pstream__,"  ypred ");
                                stan_print(pstream__,ypred);
                                stan_print(pstream__,"  ypredcov ");
                                stan_print(pstream__,ypredcov);
                                stan_print(pstream__,"  K ");
                                stan_print(pstream__,K);
                                stan_print(pstream__,"  sDRIFT ");
                                stan_print(pstream__,sDRIFT);
                                stan_print(pstream__," sDIFFUSION ");
                                stan_print(pstream__,sDIFFUSION);
                                stan_print(pstream__," sCINT ");
                                stan_print(pstream__,sCINT);
                                stan_print(pstream__,"  sMANIFESTVAR ");
                                stan_print(pstream__,diagonal(sMANIFESTVAR));
                                stan_print(pstream__,"  sMANIFESTMEANS ");
                                stan_print(pstream__,sMANIFESTMEANS);
                                stan_print(pstream__,"  sT0VAR");
                                stan_print(pstream__,sT0VAR);
                                stan_print(pstream__,"  rawpopsd ");
                                stan_print(pstream__,rawpopsd);
                                stan_print(pstream__,"  rawpopsdbase ");
                                stan_print(pstream__,rawpopsdbase);
                                stan_print(pstream__,"  rawpopmeans ");
                                stan_print(pstream__,rawpopmeans);
                                *pstream__ << std::endl;
                            }
                            current_statement_begin__ = 1580;
                            if (as_bool(logical_eq(lineardynamics,1))) {
                                current_statement_begin__ = 1580;
                                if (pstream__) {
                                    stan_print(pstream__,"discreteDRIFT ");
                                    stan_print(pstream__,discreteDRIFT);
                                    stan_print(pstream__,"  discreteCINT ");
                                    stan_print(pstream__,discreteCINT);
                                    stan_print(pstream__,"  discreteDIFFUSION ");
                                    stan_print(pstream__,discreteDIFFUSION);
                                    *pstream__ << std::endl;
                                }
                            }
                        }
                        current_statement_begin__ = 1582;
                        if (as_bool(logical_gt(verbose,2))) {
                            current_statement_begin__ = 1582;
                            if (pstream__) {
                                stan_print(pstream__,"ukfstates ");
                                stan_print(pstream__,ukfstates);
                                stan_print(pstream__,"  ukfmeasures ");
                                stan_print(pstream__,ukfmeasures);
                                *pstream__ << std::endl;
                            }
                        }
                        current_statement_begin__ = 1590;
                        stan::model::assign(ypredcov_sqrt, 
                                    stan::model::cons_list(stan::model::index_multi(cindex), stan::model::cons_list(stan::model::index_multi(cindex), stan::model::nil_index_list())), 
                                    chol(stan::model::rvalue(ypredcov, stan::model::cons_list(stan::model::index_multi(cindex), stan::model::cons_list(stan::model::index_multi(cindex), stan::model::nil_index_list())), "ypredcov"), pstream__), 
                                    "assigning variable ypredcov_sqrt");
                        current_statement_begin__ = 1591;
                        for (int vi = 1; vi <= nmanifest; ++vi) {

                            current_statement_begin__ = 1592;
                            if (as_bool(logical_gt(fabs(get_base1(ypred,vi,"ypred",1)),10000000000.0))) {
                                current_statement_begin__ = 1592;
                                stan::math::assign(get_base1_lhs(ypred,vi,"ypred",1), -(99999));
                            }
                            current_statement_begin__ = 1593;
                            if (as_bool(is_nan(get_base1(ypred,vi,"ypred",1)))) {
                                current_statement_begin__ = 1593;
                                stan::math::assign(get_base1_lhs(ypred,vi,"ypred",1), -(99999));
                            }
                            current_statement_begin__ = 1594;
                            if (as_bool(is_inf(get_base1(ypred,vi,"ypred",1)))) {
                                current_statement_begin__ = 1594;
                                stan::math::assign(get_base1_lhs(ypred,vi,"ypred",1), -(99999));
                            }
                        }
                        current_statement_begin__ = 1597;
                        if (as_bool(logical_gt(get_base1(ncont_y,rowi,"ncont_y",1),0))) {
                            current_statement_begin__ = 1597;
                            stan::model::assign(Ygen, 
                                        stan::model::cons_list(stan::model::index_uni(geni), stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_multi(o0), stan::model::nil_index_list()))), 
                                        multi_normal_cholesky_rng(stan::model::rvalue(ypred, stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list()), "ypred"),stan::model::rvalue(ypredcov_sqrt, stan::model::cons_list(stan::model::index_multi(o0), stan::model::cons_list(stan::model::index_multi(o0), stan::model::nil_index_list())), "ypredcov_sqrt"), base_rng__), 
                                        "assigning variable Ygen");
                        }
                        current_statement_begin__ = 1598;
                        if (as_bool(logical_gt(get_base1(nbinary_y,rowi,"nbinary_y",1),0))) {
                            current_statement_begin__ = 1598;
                            for (int obsi = 1; obsi <= size(o1); ++obsi) {
                                current_statement_begin__ = 1598;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(Ygen,geni,"Ygen",1),rowi,"Ygen",2),get_base1(o1,obsi,"o1",1),"Ygen",3), bernoulli_rng(get_base1(ypred,get_base1(o1,obsi,"o1",1),"ypred",1), base_rng__));
                            }
                        }
                        current_statement_begin__ = 1599;
                        for (int vi = 1; vi <= nmanifest; ++vi) {
                            current_statement_begin__ = 1599;
                            if (as_bool(is_nan(get_base1(get_base1(get_base1(Ygen,geni,"Ygen",1),rowi,"Ygen",2),vi,"Ygen",3)))) {
                                current_statement_begin__ = 1599;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(Ygen,geni,"Ygen",1),rowi,"Ygen",2),vi,"Ygen",3), -(99999));
                            }
                        }
                        current_statement_begin__ = 1604;
                        stan::model::assign(err, 
                                    stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list()), 
                                    subtract(stan::model::rvalue(Ygen, stan::model::cons_list(stan::model::index_uni(geni), stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list()))), "Ygen"),stan::model::rvalue(ypred, stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list()), "ypred")), 
                                    "assigning variable err");
                        current_statement_begin__ = 1605;
                        if (as_bool(logical_eq(intoverstates,1))) {
                            current_statement_begin__ = 1605;
                            stan::model::assign(etaupd, 
                                        stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                        add(stan::model::rvalue(etaprior, stan::model::cons_list(stan::model::index_uni(rowi), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "etaprior"),multiply(stan::model::rvalue(K, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list())), "K"),stan::model::rvalue(err, stan::model::cons_list(stan::model::index_multi(o), stan::model::nil_index_list()), "err"))), 
                                        "assigning variable etaupd");
                        }
                        }
                    }
                    }
                }
                }
            }
            {
            current_statement_begin__ = 1616;
            validate_non_negative_index("rawindparams", "nparams", nparams);
            vector_d rawindparams(static_cast<Eigen::VectorXd::Index>(nparams));
            (void) rawindparams;  // dummy to suppress unused var warning

            stan::math::initialize(rawindparams, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(rawindparams,DUMMY_VAR__);
            current_statement_begin__ = 1617;
            validate_non_negative_index("tipredaddition", "nparams", nparams);
            vector_d tipredaddition(static_cast<Eigen::VectorXd::Index>(nparams));
            (void) tipredaddition;  // dummy to suppress unused var warning

            stan::math::initialize(tipredaddition, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(tipredaddition,DUMMY_VAR__);
            current_statement_begin__ = 1618;
            validate_non_negative_index("indvaraddition", "nparams", nparams);
            vector_d indvaraddition(static_cast<Eigen::VectorXd::Index>(nparams));
            (void) indvaraddition;  // dummy to suppress unused var warning

            stan::math::initialize(indvaraddition, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(indvaraddition,DUMMY_VAR__);


            current_statement_begin__ = 1619;
            stan::math::assign(rawindparams, rawpopmeans);
            current_statement_begin__ = 1620;
            stan::math::assign(tipredaddition, rep_vector(0,nparams));
            current_statement_begin__ = 1621;
            stan::math::assign(indvaraddition, rep_vector(0,nparams));
            current_statement_begin__ = 1623;
            for (int si = 1; si <= 1; ++si) {

                current_statement_begin__ = 1626;
                if (as_bool(logical_lte(si,get_base1(T0MEANSsubindex,1,"T0MEANSsubindex",1)))) {

                    current_statement_begin__ = 1627;
                    for (int ri = 1; ri <= size(T0MEANSsetup); ++ri) {

                        current_statement_begin__ = 1628;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(pop_T0MEANS,si,"pop_T0MEANS",1),get_base1(get_base1(T0MEANSsetup,ri,"T0MEANSsetup",1),1,"T0MEANSsetup",2),get_base1(get_base1(T0MEANSsetup,ri,"T0MEANSsetup",1),2,"T0MEANSsetup",2),"pop_T0MEANS",2), (get_base1(get_base1(T0MEANSsetup,ri,"T0MEANSsetup",1),3,"T0MEANSsetup",2) ? stan::math::promote_scalar<double>(tform(get_base1(rawindparams,get_base1(get_base1(T0MEANSsetup,ri,"T0MEANSsetup",1),3,"T0MEANSsetup",2),"rawindparams",1),get_base1(get_base1(T0MEANSsetup,ri,"T0MEANSsetup",1),4,"T0MEANSsetup",2),get_base1(T0MEANSvalues,ri,2,"T0MEANSvalues",1),get_base1(T0MEANSvalues,ri,3,"T0MEANSvalues",1),get_base1(T0MEANSvalues,ri,4,"T0MEANSvalues",1), pstream__)) : stan::math::promote_scalar<double>(get_base1(T0MEANSvalues,ri,1,"T0MEANSvalues",1)) ));
                    }
                }
                current_statement_begin__ = 1633;
                if (as_bool(logical_lte(si,get_base1(LAMBDAsubindex,1,"LAMBDAsubindex",1)))) {

                    current_statement_begin__ = 1634;
                    for (int ri = 1; ri <= size(LAMBDAsetup); ++ri) {

                        current_statement_begin__ = 1635;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(pop_LAMBDA,si,"pop_LAMBDA",1),get_base1(get_base1(LAMBDAsetup,ri,"LAMBDAsetup",1),1,"LAMBDAsetup",2),get_base1(get_base1(LAMBDAsetup,ri,"LAMBDAsetup",1),2,"LAMBDAsetup",2),"pop_LAMBDA",2), (get_base1(get_base1(LAMBDAsetup,ri,"LAMBDAsetup",1),3,"LAMBDAsetup",2) ? stan::math::promote_scalar<double>(tform(get_base1(rawindparams,get_base1(get_base1(LAMBDAsetup,ri,"LAMBDAsetup",1),3,"LAMBDAsetup",2),"rawindparams",1),get_base1(get_base1(LAMBDAsetup,ri,"LAMBDAsetup",1),4,"LAMBDAsetup",2),get_base1(LAMBDAvalues,ri,2,"LAMBDAvalues",1),get_base1(LAMBDAvalues,ri,3,"LAMBDAvalues",1),get_base1(LAMBDAvalues,ri,4,"LAMBDAvalues",1), pstream__)) : stan::math::promote_scalar<double>(get_base1(LAMBDAvalues,ri,1,"LAMBDAvalues",1)) ));
                    }
                }
                current_statement_begin__ = 1640;
                if (as_bool(logical_lte(si,get_base1(DRIFTsubindex,1,"DRIFTsubindex",1)))) {

                    current_statement_begin__ = 1641;
                    for (int ri = 1; ri <= size(DRIFTsetup); ++ri) {

                        current_statement_begin__ = 1642;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(pop_DRIFT,si,"pop_DRIFT",1),get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),1,"DRIFTsetup",2),get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),2,"DRIFTsetup",2),"pop_DRIFT",2), (get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),3,"DRIFTsetup",2) ? stan::math::promote_scalar<double>(tform(get_base1(rawindparams,get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),3,"DRIFTsetup",2),"rawindparams",1),get_base1(get_base1(DRIFTsetup,ri,"DRIFTsetup",1),4,"DRIFTsetup",2),get_base1(DRIFTvalues,ri,2,"DRIFTvalues",1),get_base1(DRIFTvalues,ri,3,"DRIFTvalues",1),get_base1(DRIFTvalues,ri,4,"DRIFTvalues",1), pstream__)) : stan::math::promote_scalar<double>(get_base1(DRIFTvalues,ri,1,"DRIFTvalues",1)) ));
                    }
                }
                current_statement_begin__ = 1647;
                if (as_bool(logical_lte(si,get_base1(DIFFUSIONsubindex,1,"DIFFUSIONsubindex",1)))) {

                    current_statement_begin__ = 1648;
                    for (int ri = 1; ri <= size(DIFFUSIONsetup); ++ri) {

                        current_statement_begin__ = 1649;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(pop_DIFFUSION,si,"pop_DIFFUSION",1),get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),1,"DIFFUSIONsetup",2),get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),2,"DIFFUSIONsetup",2),"pop_DIFFUSION",2), (get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),3,"DIFFUSIONsetup",2) ? stan::math::promote_scalar<double>(tform(get_base1(rawindparams,get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),3,"DIFFUSIONsetup",2),"rawindparams",1),get_base1(get_base1(DIFFUSIONsetup,ri,"DIFFUSIONsetup",1),4,"DIFFUSIONsetup",2),get_base1(DIFFUSIONvalues,ri,2,"DIFFUSIONvalues",1),get_base1(DIFFUSIONvalues,ri,3,"DIFFUSIONvalues",1),get_base1(DIFFUSIONvalues,ri,4,"DIFFUSIONvalues",1), pstream__)) : stan::math::promote_scalar<double>(get_base1(DIFFUSIONvalues,ri,1,"DIFFUSIONvalues",1)) ));
                    }
                }
                current_statement_begin__ = 1654;
                if (as_bool(logical_lte(si,get_base1(MANIFESTVARsubindex,1,"MANIFESTVARsubindex",1)))) {

                    current_statement_begin__ = 1655;
                    for (int ri = 1; ri <= size(MANIFESTVARsetup); ++ri) {

                        current_statement_begin__ = 1656;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(pop_MANIFESTVAR,si,"pop_MANIFESTVAR",1),get_base1(get_base1(MANIFESTVARsetup,ri,"MANIFESTVARsetup",1),1,"MANIFESTVARsetup",2),get_base1(get_base1(MANIFESTVARsetup,ri,"MANIFESTVARsetup",1),2,"MANIFESTVARsetup",2),"pop_MANIFESTVAR",2), (get_base1(get_base1(MANIFESTVARsetup,ri,"MANIFESTVARsetup",1),3,"MANIFESTVARsetup",2) ? stan::math::promote_scalar<double>(tform(get_base1(rawindparams,get_base1(get_base1(MANIFESTVARsetup,ri,"MANIFESTVARsetup",1),3,"MANIFESTVARsetup",2),"rawindparams",1),get_base1(get_base1(MANIFESTVARsetup,ri,"MANIFESTVARsetup",1),4,"MANIFESTVARsetup",2),get_base1(MANIFESTVARvalues,ri,2,"MANIFESTVARvalues",1),get_base1(MANIFESTVARvalues,ri,3,"MANIFESTVARvalues",1),get_base1(MANIFESTVARvalues,ri,4,"MANIFESTVARvalues",1), pstream__)) : stan::math::promote_scalar<double>(get_base1(MANIFESTVARvalues,ri,1,"MANIFESTVARvalues",1)) ));
                    }
                }
                current_statement_begin__ = 1661;
                if (as_bool(logical_lte(si,get_base1(MANIFESTMEANSsubindex,1,"MANIFESTMEANSsubindex",1)))) {

                    current_statement_begin__ = 1662;
                    for (int ri = 1; ri <= size(MANIFESTMEANSsetup); ++ri) {

                        current_statement_begin__ = 1663;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(pop_MANIFESTMEANS,si,"pop_MANIFESTMEANS",1),get_base1(get_base1(MANIFESTMEANSsetup,ri,"MANIFESTMEANSsetup",1),1,"MANIFESTMEANSsetup",2),get_base1(get_base1(MANIFESTMEANSsetup,ri,"MANIFESTMEANSsetup",1),2,"MANIFESTMEANSsetup",2),"pop_MANIFESTMEANS",2), (get_base1(get_base1(MANIFESTMEANSsetup,ri,"MANIFESTMEANSsetup",1),3,"MANIFESTMEANSsetup",2) ? stan::math::promote_scalar<double>(tform(get_base1(rawindparams,get_base1(get_base1(MANIFESTMEANSsetup,ri,"MANIFESTMEANSsetup",1),3,"MANIFESTMEANSsetup",2),"rawindparams",1),get_base1(get_base1(MANIFESTMEANSsetup,ri,"MANIFESTMEANSsetup",1),4,"MANIFESTMEANSsetup",2),get_base1(MANIFESTMEANSvalues,ri,2,"MANIFESTMEANSvalues",1),get_base1(MANIFESTMEANSvalues,ri,3,"MANIFESTMEANSvalues",1),get_base1(MANIFESTMEANSvalues,ri,4,"MANIFESTMEANSvalues",1), pstream__)) : stan::math::promote_scalar<double>(get_base1(MANIFESTMEANSvalues,ri,1,"MANIFESTMEANSvalues",1)) ));
                    }
                }
                current_statement_begin__ = 1668;
                if (as_bool(logical_lte(si,get_base1(CINTsubindex,1,"CINTsubindex",1)))) {

                    current_statement_begin__ = 1669;
                    for (int ri = 1; ri <= size(CINTsetup); ++ri) {

                        current_statement_begin__ = 1670;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(pop_CINT,si,"pop_CINT",1),get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),1,"CINTsetup",2),get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),2,"CINTsetup",2),"pop_CINT",2), (get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),3,"CINTsetup",2) ? stan::math::promote_scalar<double>(tform(get_base1(rawindparams,get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),3,"CINTsetup",2),"rawindparams",1),get_base1(get_base1(CINTsetup,ri,"CINTsetup",1),4,"CINTsetup",2),get_base1(CINTvalues,ri,2,"CINTvalues",1),get_base1(CINTvalues,ri,3,"CINTvalues",1),get_base1(CINTvalues,ri,4,"CINTvalues",1), pstream__)) : stan::math::promote_scalar<double>(get_base1(CINTvalues,ri,1,"CINTvalues",1)) ));
                    }
                }
                current_statement_begin__ = 1675;
                if (as_bool(logical_lte(si,get_base1(T0VARsubindex,1,"T0VARsubindex",1)))) {

                    current_statement_begin__ = 1676;
                    for (int ri = 1; ri <= size(T0VARsetup); ++ri) {

                        current_statement_begin__ = 1677;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(pop_T0VAR,si,"pop_T0VAR",1),get_base1(get_base1(T0VARsetup,ri,"T0VARsetup",1),1,"T0VARsetup",2),get_base1(get_base1(T0VARsetup,ri,"T0VARsetup",1),2,"T0VARsetup",2),"pop_T0VAR",2), (get_base1(get_base1(T0VARsetup,ri,"T0VARsetup",1),3,"T0VARsetup",2) ? stan::math::promote_scalar<double>(tform(get_base1(rawindparams,get_base1(get_base1(T0VARsetup,ri,"T0VARsetup",1),3,"T0VARsetup",2),"rawindparams",1),get_base1(get_base1(T0VARsetup,ri,"T0VARsetup",1),4,"T0VARsetup",2),get_base1(T0VARvalues,ri,2,"T0VARvalues",1),get_base1(T0VARvalues,ri,3,"T0VARvalues",1),get_base1(T0VARvalues,ri,4,"T0VARvalues",1), pstream__)) : stan::math::promote_scalar<double>(get_base1(T0VARvalues,ri,1,"T0VARvalues",1)) ));
                    }
                }
                current_statement_begin__ = 1682;
                if (as_bool(logical_lte(si,get_base1(TDPREDEFFECTsubindex,1,"TDPREDEFFECTsubindex",1)))) {

                    current_statement_begin__ = 1683;
                    for (int ri = 1; ri <= size(TDPREDEFFECTsetup); ++ri) {

                        current_statement_begin__ = 1684;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(pop_TDPREDEFFECT,si,"pop_TDPREDEFFECT",1),get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),1,"TDPREDEFFECTsetup",2),get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),2,"TDPREDEFFECTsetup",2),"pop_TDPREDEFFECT",2), (get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),3,"TDPREDEFFECTsetup",2) ? stan::math::promote_scalar<double>(tform(get_base1(rawindparams,get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),3,"TDPREDEFFECTsetup",2),"rawindparams",1),get_base1(get_base1(TDPREDEFFECTsetup,ri,"TDPREDEFFECTsetup",1),4,"TDPREDEFFECTsetup",2),get_base1(TDPREDEFFECTvalues,ri,2,"TDPREDEFFECTvalues",1),get_base1(TDPREDEFFECTvalues,ri,3,"TDPREDEFFECTvalues",1),get_base1(TDPREDEFFECTvalues,ri,4,"TDPREDEFFECTvalues",1), pstream__)) : stan::math::promote_scalar<double>(get_base1(TDPREDEFFECTvalues,ri,1,"TDPREDEFFECTvalues",1)) ));
                    }
                }
                current_statement_begin__ = 1689;
                if (as_bool(logical_lte(si,get_base1(PARSsubindex,1,"PARSsubindex",1)))) {

                    current_statement_begin__ = 1690;
                    for (int ri = 1; ri <= size(PARSsetup); ++ri) {

                        current_statement_begin__ = 1691;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(pop_PARS,si,"pop_PARS",1),get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),1,"PARSsetup",2),get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),2,"PARSsetup",2),"pop_PARS",2), (get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),3,"PARSsetup",2) ? stan::math::promote_scalar<double>(tform(get_base1(rawindparams,get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),3,"PARSsetup",2),"rawindparams",1),get_base1(get_base1(PARSsetup,ri,"PARSsetup",1),4,"PARSsetup",2),get_base1(PARSvalues,ri,2,"PARSvalues",1),get_base1(PARSvalues,ri,3,"PARSvalues",1),get_base1(PARSvalues,ri,4,"PARSvalues",1), pstream__)) : stan::math::promote_scalar<double>(get_base1(PARSvalues,ri,1,"PARSvalues",1)) ));
                    }
                }
                current_statement_begin__ = 1699;
                if (as_bool((primitive_value(logical_lte(si,get_base1(DIFFUSIONsubindex,1,"DIFFUSIONsubindex",1))) && primitive_value(logical_neq((lineardynamics * intoverstates),0))))) {
                    current_statement_begin__ = 1699;
                    stan::math::assign(get_base1_lhs(pop_DIFFUSION,si,"pop_DIFFUSION",1), sdcovsqrt2cov(get_base1(pop_DIFFUSION,si,"pop_DIFFUSION",1),0, pstream__));
                }
                current_statement_begin__ = 1701;
                if (as_bool(logical_lte(si,get_base1(asymDIFFUSIONsubindex,1,"asymDIFFUSIONsubindex",1)))) {

                    current_statement_begin__ = 1702;
                    if (as_bool(logical_lt(ndiffusion,nlatent))) {
                        current_statement_begin__ = 1702;
                        stan::math::assign(get_base1_lhs(asympop_DIFFUSION,si,"asympop_DIFFUSION",1), to_matrix(rep_vector(0,(nlatent * nlatent)),nlatent,nlatent));
                    }
                    current_statement_begin__ = 1704;
                    if (as_bool(logical_eq(continuoustime,1))) {
                        current_statement_begin__ = 1704;
                        stan::model::assign(asympop_DIFFUSION, 
                                    stan::model::cons_list(stan::model::index_uni(si), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list()))), 
                                    to_matrix(mdivide_left(minus(add(kron_prod(stan::model::rvalue(pop_DRIFT, stan::model::cons_list(stan::model::index_uni(get_base1(DRIFTsubindex,si,"DRIFTsubindex",1)), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list()))), "pop_DRIFT"),stan::model::rvalue(IIlatent, stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list())), "IIlatent"), pstream__),kron_prod(stan::model::rvalue(IIlatent, stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list())), "IIlatent"),stan::model::rvalue(pop_DRIFT, stan::model::cons_list(stan::model::index_uni(get_base1(DRIFTsubindex,si,"DRIFTsubindex",1)), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list()))), "pop_DRIFT"), pstream__))),to_vector(stan::model::rvalue(pop_DIFFUSION, stan::model::cons_list(stan::model::index_uni(get_base1(DIFFUSIONsubindex,si,"DIFFUSIONsubindex",1)), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list()))), "pop_DIFFUSION"))),ndiffusion,ndiffusion), 
                                    "assigning variable asympop_DIFFUSION");
                    }
                    current_statement_begin__ = 1709;
                    if (as_bool(logical_eq(continuoustime,0))) {
                        current_statement_begin__ = 1709;
                        stan::model::assign(asympop_DIFFUSION, 
                                    stan::model::cons_list(stan::model::index_uni(si), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list()))), 
                                    to_matrix(multiply(subtract(stan::model::rvalue(IIlatent2, stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list())), "IIlatent2"),kron_prod(stan::model::rvalue(pop_DRIFT, stan::model::cons_list(stan::model::index_uni(get_base1(DRIFTsubindex,si,"DRIFTsubindex",1)), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list()))), "pop_DRIFT"),stan::model::rvalue(pop_DRIFT, stan::model::cons_list(stan::model::index_uni(get_base1(DRIFTsubindex,si,"DRIFTsubindex",1)), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list()))), "pop_DRIFT"), pstream__)),to_vector(stan::model::rvalue(pop_DIFFUSION, stan::model::cons_list(stan::model::index_uni(get_base1(DIFFUSIONsubindex,si,"DIFFUSIONsubindex",1)), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::cons_list(stan::model::index_multi(derrind), stan::model::nil_index_list()))), "pop_DIFFUSION"))),ndiffusion,ndiffusion), 
                                    "assigning variable asympop_DIFFUSION");
                    }
                }
                current_statement_begin__ = 1715;
                if (as_bool(logical_gt(nt0meansstationary,0))) {

                    current_statement_begin__ = 1716;
                    if (as_bool(logical_lte(si,get_base1(asymCINTsubindex,1,"asymCINTsubindex",1)))) {

                        current_statement_begin__ = 1717;
                        if (as_bool(logical_eq(continuoustime,1))) {
                            current_statement_begin__ = 1717;
                            stan::math::assign(get_base1_lhs(asympop_CINT,si,"asympop_CINT",1), mdivide_left(minus(get_base1(pop_DRIFT,get_base1(DRIFTsubindex,si,"DRIFTsubindex",1),"pop_DRIFT",1)),stan::model::rvalue(pop_CINT, stan::model::cons_list(stan::model::index_uni(get_base1(CINTsubindex,si,"CINTsubindex",1)), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), "pop_CINT")));
                        }
                        current_statement_begin__ = 1718;
                        if (as_bool(logical_eq(continuoustime,0))) {
                            current_statement_begin__ = 1718;
                            stan::math::assign(get_base1_lhs(asympop_CINT,si,"asympop_CINT",1), mdivide_left(subtract(IIlatent,get_base1(pop_DRIFT,get_base1(DRIFTsubindex,si,"DRIFTsubindex",1),"pop_DRIFT",1)),stan::model::rvalue(pop_CINT, stan::model::cons_list(stan::model::index_uni(get_base1(CINTsubindex,si,"CINTsubindex",1)), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), "pop_CINT")));
                        }
                    }
                }
                current_statement_begin__ = 1723;
                if (as_bool(logical_eq(binomial,0))) {

                    current_statement_begin__ = 1724;
                    if (as_bool(logical_lte(si,get_base1(MANIFESTVARsubindex,1,"MANIFESTVARsubindex",1)))) {

                        current_statement_begin__ = 1725;
                        for (int ri = 1; ri <= nmanifest; ++ri) {
                            current_statement_begin__ = 1725;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(pop_MANIFESTVAR,si,"pop_MANIFESTVAR",1),ri,ri,"pop_MANIFESTVAR",2), square(get_base1(get_base1(pop_MANIFESTVAR,si,"pop_MANIFESTVAR",1),ri,ri,"pop_MANIFESTVAR",2)));
                        }
                    }
                }
                current_statement_begin__ = 1730;
                if (as_bool(logical_lte(si,get_base1(T0VARsubindex,1,"T0VARsubindex",1)))) {

                    current_statement_begin__ = 1731;
                    if (as_bool(logical_neq((lineardynamics * intoverstates),0))) {
                        current_statement_begin__ = 1731;
                        stan::math::assign(get_base1_lhs(pop_T0VAR,si,"pop_T0VAR",1), sdcovsqrt2cov(get_base1(pop_T0VAR,si,"pop_T0VAR",1),0, pstream__));
                    }
                    current_statement_begin__ = 1732;
                    if (as_bool(logical_gt(nt0varstationary,0))) {
                        current_statement_begin__ = 1732;
                        for (int rowi = 1; rowi <= nt0varstationary; ++rowi) {

                            current_statement_begin__ = 1733;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(pop_T0VAR,si,"pop_T0VAR",1),get_base1(get_base1(t0varstationary,rowi,"t0varstationary",1),1,"t0varstationary",2),get_base1(get_base1(t0varstationary,rowi,"t0varstationary",1),2,"t0varstationary",2),"pop_T0VAR",2), get_base1(get_base1(asympop_DIFFUSION,si,"asympop_DIFFUSION",1),get_base1(get_base1(t0varstationary,rowi,"t0varstationary",1),1,"t0varstationary",2),get_base1(get_base1(t0varstationary,rowi,"t0varstationary",1),2,"t0varstationary",2),"asympop_DIFFUSION",2));
                            current_statement_begin__ = 1735;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(pop_T0VAR,si,"pop_T0VAR",1),get_base1(get_base1(t0varstationary,rowi,"t0varstationary",1),2,"t0varstationary",2),get_base1(get_base1(t0varstationary,rowi,"t0varstationary",1),1,"t0varstationary",2),"pop_T0VAR",2), get_base1(get_base1(asympop_DIFFUSION,si,"asympop_DIFFUSION",1),get_base1(get_base1(t0varstationary,rowi,"t0varstationary",1),2,"t0varstationary",2),get_base1(get_base1(t0varstationary,rowi,"t0varstationary",1),1,"t0varstationary",2),"asympop_DIFFUSION",2));
                        }
                    }
                }
                current_statement_begin__ = 1741;
                if (as_bool(logical_gt(nt0meansstationary,0))) {

                    current_statement_begin__ = 1742;
                    if (as_bool(logical_lte(si,get_base1(T0MEANSsubindex,1,"T0MEANSsubindex",1)))) {

                        current_statement_begin__ = 1743;
                        for (int rowi = 1; rowi <= nt0meansstationary; ++rowi) {

                            current_statement_begin__ = 1744;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(pop_T0MEANS,si,"pop_T0MEANS",1),get_base1(get_base1(t0meansstationary,rowi,"t0meansstationary",1),1,"t0meansstationary",2),1,"pop_T0MEANS",2), get_base1(get_base1(asympop_CINT,get_base1(asymCINTsubindex,si,"asymCINTsubindex",1),"asympop_CINT",1),get_base1(get_base1(t0meansstationary,rowi,"t0meansstationary",1),1,"t0meansstationary",2),"asympop_CINT",2));
                        }
                    }
                }
            }
            }
            current_statement_begin__ = 1753;
            stan::math::assign(rawpopcorr, tcrossprod(rawpopcorrsqrt));
            current_statement_begin__ = 1754;
            stan::math::assign(rawpopcov, tcrossprod(rawpopcovsqrt));
            current_statement_begin__ = 1756;
            stan::math::assign(popsd, rep_vector(0,nparams));
            current_statement_begin__ = 1757;
            stan::model::assign(popsd, 
                        stan::model::cons_list(stan::model::index_multi(indvaryingindex), stan::model::nil_index_list()), 
                        rawpopsd, 
                        "assigning variable popsd");
            current_statement_begin__ = 1759;
            for (int ri = 1; ri <= get_base1(dims(popsetup),1,"dims(popsetup)",1); ++ri) {

                current_statement_begin__ = 1760;
                if (as_bool(logical_neq(get_base1(get_base1(popsetup,ri,"popsetup",1),3,"popsetup",2),0))) {

                    current_statement_begin__ = 1762;
                    stan::math::assign(get_base1_lhs(popmeans,get_base1(get_base1(popsetup,ri,"popsetup",1),3,"popsetup",2),"popmeans",1), tform(get_base1(rawpopmeans,get_base1(get_base1(popsetup,ri,"popsetup",1),3,"popsetup",2),"rawpopmeans",1),get_base1(get_base1(popsetup,ri,"popsetup",1),4,"popsetup",2),get_base1(get_base1(popvalues,ri,"popvalues",1),2,"popvalues",2),get_base1(get_base1(popvalues,ri,"popvalues",1),3,"popvalues",2),get_base1(get_base1(popvalues,ri,"popvalues",1),4,"popvalues",2), pstream__));
                    current_statement_begin__ = 1764;
                    stan::math::assign(get_base1_lhs(popsd,get_base1(get_base1(popsetup,ri,"popsetup",1),3,"popsetup",2),"popsd",1), (get_base1(get_base1(popsetup,ri,"popsetup",1),5,"popsetup",2) ? stan::math::promote_scalar<double>((fabs((tform((get_base1(rawpopmeans,get_base1(get_base1(popsetup,ri,"popsetup",1),3,"popsetup",2),"rawpopmeans",1) + get_base1(popsd,get_base1(get_base1(popsetup,ri,"popsetup",1),3,"popsetup",2),"popsd",1)),get_base1(get_base1(popsetup,ri,"popsetup",1),4,"popsetup",2),get_base1(get_base1(popvalues,ri,"popvalues",1),2,"popvalues",2),get_base1(get_base1(popvalues,ri,"popvalues",1),3,"popvalues",2),get_base1(get_base1(popvalues,ri,"popvalues",1),4,"popvalues",2), pstream__) - tform((get_base1(rawpopmeans,get_base1(get_base1(popsetup,ri,"popsetup",1),3,"popsetup",2),"rawpopmeans",1) - get_base1(popsd,get_base1(get_base1(popsetup,ri,"popsetup",1),3,"popsetup",2),"popsd",1)),get_base1(get_base1(popsetup,ri,"popsetup",1),4,"popsetup",2),get_base1(get_base1(popvalues,ri,"popvalues",1),2,"popvalues",2),get_base1(get_base1(popvalues,ri,"popvalues",1),3,"popvalues",2),(get_base1(get_base1(popvalues,ri,"popvalues",1),4,"popvalues",2) - get_base1(popsd,get_base1(get_base1(popsetup,ri,"popsetup",1),3,"popsetup",2),"popsd",1)), pstream__))) / 2)) : stan::math::promote_scalar<double>(0) ));
                    current_statement_begin__ = 1771;
                    if (as_bool(logical_gt(ntipred,0))) {

                        current_statement_begin__ = 1772;
                        for (int tij = 1; tij <= ntipred; ++tij) {

                            current_statement_begin__ = 1773;
                            if (as_bool(logical_eq(get_base1(get_base1(TIPREDEFFECTsetup,get_base1(get_base1(popsetup,ri,"popsetup",1),3,"popsetup",2),"TIPREDEFFECTsetup",1),tij,"TIPREDEFFECTsetup",2),0))) {

                                current_statement_begin__ = 1774;
                                stan::math::assign(get_base1_lhs(linearTIPREDEFFECT,get_base1(get_base1(popsetup,ri,"popsetup",1),3,"popsetup",2),tij,"linearTIPREDEFFECT",1), 0);
                            } else {

                                current_statement_begin__ = 1776;
                                stan::math::assign(get_base1_lhs(linearTIPREDEFFECT,get_base1(get_base1(popsetup,ri,"popsetup",1),3,"popsetup",2),tij,"linearTIPREDEFFECT",1), (((tform((get_base1(rawpopmeans,get_base1(get_base1(popsetup,ri,"popsetup",1),3,"popsetup",2),"rawpopmeans",1) + (get_base1(TIPREDEFFECT,get_base1(get_base1(popsetup,ri,"popsetup",1),3,"popsetup",2),tij,"TIPREDEFFECT",1) * 0.01)),get_base1(get_base1(popsetup,ri,"popsetup",1),4,"popsetup",2),get_base1(get_base1(popvalues,ri,"popvalues",1),2,"popvalues",2),get_base1(get_base1(popvalues,ri,"popvalues",1),3,"popvalues",2),get_base1(get_base1(popvalues,ri,"popvalues",1),4,"popvalues",2), pstream__) - tform((get_base1(rawpopmeans,get_base1(get_base1(popsetup,ri,"popsetup",1),3,"popsetup",2),"rawpopmeans",1) - (get_base1(TIPREDEFFECT,get_base1(get_base1(popsetup,ri,"popsetup",1),3,"popsetup",2),tij,"TIPREDEFFECT",1) * 0.01)),get_base1(get_base1(popsetup,ri,"popsetup",1),4,"popsetup",2),get_base1(get_base1(popvalues,ri,"popvalues",1),2,"popvalues",2),get_base1(get_base1(popvalues,ri,"popvalues",1),3,"popvalues",2),get_base1(get_base1(popvalues,ri,"popvalues",1),4,"popvalues",2), pstream__)) / 2) * 100));
                            }
                        }
                    }
                }
            }

            // validate generated quantities
            current_statement_begin__ = 1085;
            current_statement_begin__ = 1086;
            current_statement_begin__ = 1087;
            current_statement_begin__ = 1088;
            current_statement_begin__ = 1089;
            current_statement_begin__ = 1090;
            current_statement_begin__ = 1091;
            current_statement_begin__ = 1092;
            current_statement_begin__ = 1093;
            current_statement_begin__ = 1094;
            current_statement_begin__ = 1095;
            current_statement_begin__ = 1096;
            current_statement_begin__ = 1097;
            current_statement_begin__ = 1098;
            current_statement_begin__ = 1099;
            current_statement_begin__ = 1101;
            current_statement_begin__ = 1102;
            current_statement_begin__ = 1105;

            // write generated quantities
            for (int k_0__ = 0; k_0__ < nparams; ++k_0__) {
            vars__.push_back(popmeans[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nparams; ++k_0__) {
            vars__.push_back(popsd[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < nindvarying; ++k_1__) {
                for (int k_0__ = 0; k_0__ < nindvarying; ++k_0__) {
                vars__.push_back(rawpopcov(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < nindvarying; ++k_1__) {
                for (int k_0__ = 0; k_0__ < nindvarying; ++k_0__) {
                vars__.push_back(rawpopcorr(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < ntipred; ++k_1__) {
                for (int k_0__ = 0; k_0__ < nparams; ++k_0__) {
                vars__.push_back(linearTIPREDEFFECT(k_0__, k_1__));
                }
            }
            for (int k_2__ = 0; k_2__ < (T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 ); ++k_2__) {
                for (int k_1__ = 0; k_1__ < (T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 ); ++k_1__) {
                    for (int k_0__ = 0; k_0__ < get_base1(T0MEANSsubindex,1,"T0MEANSsubindex",1); ++k_0__) {
                    vars__.push_back(pop_T0MEANS[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < (LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 ); ++k_2__) {
                for (int k_1__ = 0; k_1__ < (LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 ); ++k_1__) {
                    for (int k_0__ = 0; k_0__ < get_base1(LAMBDAsubindex,1,"LAMBDAsubindex",1); ++k_0__) {
                    vars__.push_back(pop_LAMBDA[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < (DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DRIFTsetup")) : 0 ); ++k_2__) {
                for (int k_1__ = 0; k_1__ < (DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DRIFTsetup")) : 0 ); ++k_1__) {
                    for (int k_0__ = 0; k_0__ < get_base1(DRIFTsubindex,1,"DRIFTsubindex",1); ++k_0__) {
                    vars__.push_back(pop_DRIFT[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < (DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 ); ++k_2__) {
                for (int k_1__ = 0; k_1__ < (DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 ); ++k_1__) {
                    for (int k_0__ = 0; k_0__ < get_base1(DIFFUSIONsubindex,1,"DIFFUSIONsubindex",1); ++k_0__) {
                    vars__.push_back(pop_DIFFUSION[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < (MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 ); ++k_2__) {
                for (int k_1__ = 0; k_1__ < (MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 ); ++k_1__) {
                    for (int k_0__ = 0; k_0__ < get_base1(MANIFESTVARsubindex,1,"MANIFESTVARsubindex",1); ++k_0__) {
                    vars__.push_back(pop_MANIFESTVAR[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < (MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 ); ++k_2__) {
                for (int k_1__ = 0; k_1__ < (MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 ); ++k_1__) {
                    for (int k_0__ = 0; k_0__ < get_base1(MANIFESTMEANSsubindex,1,"MANIFESTMEANSsubindex",1); ++k_0__) {
                    vars__.push_back(pop_MANIFESTMEANS[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < (CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "CINTsetup")) : 0 ); ++k_2__) {
                for (int k_1__ = 0; k_1__ < (CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "CINTsetup")) : 0 ); ++k_1__) {
                    for (int k_0__ = 0; k_0__ < get_base1(CINTsubindex,1,"CINTsubindex",1); ++k_0__) {
                    vars__.push_back(pop_CINT[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < (T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0VARsetup")) : 0 ); ++k_2__) {
                for (int k_1__ = 0; k_1__ < (T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0VARsetup")) : 0 ); ++k_1__) {
                    for (int k_0__ = 0; k_0__ < get_base1(T0VARsubindex,1,"T0VARsubindex",1); ++k_0__) {
                    vars__.push_back(pop_T0VAR[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < (TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 ); ++k_2__) {
                for (int k_1__ = 0; k_1__ < (TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 ); ++k_1__) {
                    for (int k_0__ = 0; k_0__ < get_base1(TDPREDEFFECTsubindex,1,"TDPREDEFFECTsubindex",1); ++k_0__) {
                    vars__.push_back(pop_TDPREDEFFECT[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < (PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "PARSsetup")) : 0 ); ++k_2__) {
                for (int k_1__ = 0; k_1__ < (PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "PARSsetup")) : 0 ); ++k_1__) {
                    for (int k_0__ = 0; k_0__ < get_base1(PARSsubindex,1,"PARSsubindex",1); ++k_0__) {
                    vars__.push_back(pop_PARS[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < nlatent; ++k_2__) {
                for (int k_1__ = 0; k_1__ < nlatent; ++k_1__) {
                    for (int k_0__ = 0; k_0__ < get_base1(asymDIFFUSIONsubindex,1,"asymDIFFUSIONsubindex",1); ++k_0__) {
                    vars__.push_back(asympop_DIFFUSION[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_1__ = 0; k_1__ < (nt0meansstationary ? nlatent : 0 ); ++k_1__) {
                for (int k_0__ = 0; k_0__ < get_base1(asymCINTsubindex,1,"asymCINTsubindex",1); ++k_0__) {
                vars__.push_back(asympop_CINT[k_0__][k_1__]);
                }
            }
            for (int k_2__ = 0; k_2__ < nmanifest; ++k_2__) {
                for (int k_1__ = 0; k_1__ < ndatapoints; ++k_1__) {
                    for (int k_0__ = 0; k_0__ < ngenerations; ++k_0__) {
                    vars__.push_back(Ygen[k_0__][k_1__][k_2__]);
                    }
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_ctsm";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= nparams; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rawpopmeans" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nindvarying; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rawpopsdbase" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nindvaryingoffdiagonals; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sqrtpcov" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (ukfpop ? 0 : (nindvarying * nsubjects) ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "baseindparams" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ntipredeffects; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tipredeffectparams" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nmissingtipreds; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tipredsimputed" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (intoverstates ? 0 : (nlatent * ndatapoints) ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "etaupdbasestates" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= nindvarying; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rawpopsd" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= nindvarying; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nindvarying; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rawpopcorrsqrt" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= nindvarying; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nindvarying; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rawpopcovsqrt" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_2__ = 1; k_2__ <= (T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(T0MEANSsubindex,nsubjects,"T0MEANSsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "T0MEANS" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(LAMBDAsubindex,nsubjects,"LAMBDAsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "LAMBDA" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DRIFTsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DRIFTsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(DRIFTsubindex,nsubjects,"DRIFTsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "DRIFT" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(DIFFUSIONsubindex,nsubjects,"DIFFUSIONsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "DIFFUSION" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(MANIFESTVARsubindex,nsubjects,"MANIFESTVARsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "MANIFESTVAR" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(MANIFESTMEANSsubindex,nsubjects,"MANIFESTMEANSsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "MANIFESTMEANS" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "CINTsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "CINTsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(CINTsubindex,nsubjects,"CINTsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "CINT" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0VARsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0VARsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(T0VARsubindex,nsubjects,"T0VARsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "T0VAR" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(TDPREDEFFECTsubindex,nsubjects,"TDPREDEFFECTsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "TDPREDEFFECT" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "PARSsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "PARSsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(PARSsubindex,nsubjects,"PARSsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "PARS" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= nlatent; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= nlatent; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(asymDIFFUSIONsubindex,nsubjects,"asymDIFFUSIONsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "asymDIFFUSION" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_1__ = 1; k_1__ <= (nt0meansstationary ? nlatent : 0 ); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= get_base1(asymCINTsubindex,nsubjects,"asymCINTsubindex",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "asymCINT" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= (ntipred ? ntipred : 0 ); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (ntipred ? nsubjects : 0 ); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tipreds" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= ntipred; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nparams; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "TIPREDEFFECT" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= nparams; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "popmeans" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nparams; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "popsd" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= nindvarying; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nindvarying; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rawpopcov" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= nindvarying; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nindvarying; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rawpopcorr" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= ntipred; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nparams; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "linearTIPREDEFFECT" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_2__ = 1; k_2__ <= (T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(T0MEANSsubindex,1,"T0MEANSsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pop_T0MEANS" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(LAMBDAsubindex,1,"LAMBDAsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pop_LAMBDA" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DRIFTsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DRIFTsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(DRIFTsubindex,1,"DRIFTsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pop_DRIFT" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(DIFFUSIONsubindex,1,"DIFFUSIONsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pop_DIFFUSION" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(MANIFESTVARsubindex,1,"MANIFESTVARsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pop_MANIFESTVAR" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(MANIFESTMEANSsubindex,1,"MANIFESTMEANSsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pop_MANIFESTMEANS" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "CINTsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "CINTsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(CINTsubindex,1,"CINTsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pop_CINT" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0VARsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0VARsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(T0VARsubindex,1,"T0VARsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pop_T0VAR" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(TDPREDEFFECTsubindex,1,"TDPREDEFFECTsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pop_TDPREDEFFECT" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "PARSsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "PARSsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(PARSsubindex,1,"PARSsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pop_PARS" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= nlatent; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= nlatent; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(asymDIFFUSIONsubindex,1,"asymDIFFUSIONsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "asympop_DIFFUSION" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_1__ = 1; k_1__ <= (nt0meansstationary ? nlatent : 0 ); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= get_base1(asymCINTsubindex,1,"asymCINTsubindex",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "asympop_CINT" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_2__ = 1; k_2__ <= nmanifest; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= ndatapoints; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= ngenerations; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Ygen" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= nparams; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rawpopmeans" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nindvarying; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rawpopsdbase" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nindvaryingoffdiagonals; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sqrtpcov" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (ukfpop ? 0 : (nindvarying * nsubjects) ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "baseindparams" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ntipredeffects; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tipredeffectparams" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nmissingtipreds; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tipredsimputed" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (intoverstates ? 0 : (nlatent * ndatapoints) ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "etaupdbasestates" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= nindvarying; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rawpopsd" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= nindvarying; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nindvarying; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rawpopcorrsqrt" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= nindvarying; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nindvarying; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rawpopcovsqrt" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_2__ = 1; k_2__ <= (T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(T0MEANSsubindex,nsubjects,"T0MEANSsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "T0MEANS" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(LAMBDAsubindex,nsubjects,"LAMBDAsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "LAMBDA" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DRIFTsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DRIFTsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(DRIFTsubindex,nsubjects,"DRIFTsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "DRIFT" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(DIFFUSIONsubindex,nsubjects,"DIFFUSIONsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "DIFFUSION" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(MANIFESTVARsubindex,nsubjects,"MANIFESTVARsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "MANIFESTVAR" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(MANIFESTMEANSsubindex,nsubjects,"MANIFESTMEANSsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "MANIFESTMEANS" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "CINTsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "CINTsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(CINTsubindex,nsubjects,"CINTsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "CINT" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0VARsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0VARsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(T0VARsubindex,nsubjects,"T0VARsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "T0VAR" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(TDPREDEFFECTsubindex,nsubjects,"TDPREDEFFECTsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "TDPREDEFFECT" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "PARSsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "PARSsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(PARSsubindex,nsubjects,"PARSsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "PARS" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= nlatent; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= nlatent; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(asymDIFFUSIONsubindex,nsubjects,"asymDIFFUSIONsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "asymDIFFUSION" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_1__ = 1; k_1__ <= (nt0meansstationary ? nlatent : 0 ); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= get_base1(asymCINTsubindex,nsubjects,"asymCINTsubindex",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "asymCINT" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= (ntipred ? ntipred : 0 ); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (ntipred ? nsubjects : 0 ); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tipreds" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= ntipred; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nparams; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "TIPREDEFFECT" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= nparams; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "popmeans" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nparams; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "popsd" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= nindvarying; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nindvarying; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rawpopcov" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= nindvarying; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nindvarying; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rawpopcorr" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= ntipred; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nparams; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "linearTIPREDEFFECT" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_2__ = 1; k_2__ <= (T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (T0MEANSsetup_rowcount ? max(stan::model::rvalue(T0MEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0MEANSsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(T0MEANSsubindex,1,"T0MEANSsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pop_T0MEANS" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (LAMBDAsetup_rowcount ? max(stan::model::rvalue(LAMBDAsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "LAMBDAsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(LAMBDAsubindex,1,"LAMBDAsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pop_LAMBDA" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DRIFTsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (DRIFTsetup_rowcount ? max(stan::model::rvalue(DRIFTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DRIFTsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(DRIFTsubindex,1,"DRIFTsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pop_DRIFT" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (DIFFUSIONsetup_rowcount ? max(stan::model::rvalue(DIFFUSIONsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "DIFFUSIONsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(DIFFUSIONsubindex,1,"DIFFUSIONsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pop_DIFFUSION" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (MANIFESTVARsetup_rowcount ? max(stan::model::rvalue(MANIFESTVARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTVARsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(MANIFESTVARsubindex,1,"MANIFESTVARsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pop_MANIFESTVAR" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (MANIFESTMEANSsetup_rowcount ? max(stan::model::rvalue(MANIFESTMEANSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "MANIFESTMEANSsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(MANIFESTMEANSsubindex,1,"MANIFESTMEANSsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pop_MANIFESTMEANS" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "CINTsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (CINTsetup_rowcount ? max(stan::model::rvalue(CINTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "CINTsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(CINTsubindex,1,"CINTsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pop_CINT" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "T0VARsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (T0VARsetup_rowcount ? max(stan::model::rvalue(T0VARsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "T0VARsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(T0VARsubindex,1,"T0VARsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pop_T0VAR" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (TDPREDEFFECTsetup_rowcount ? max(stan::model::rvalue(TDPREDEFFECTsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "TDPREDEFFECTsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(TDPREDEFFECTsubindex,1,"TDPREDEFFECTsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pop_TDPREDEFFECT" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "PARSsetup")) : 0 ); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (PARSsetup_rowcount ? max(stan::model::rvalue(PARSsetup, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "PARSsetup")) : 0 ); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(PARSsubindex,1,"PARSsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pop_PARS" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= nlatent; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= nlatent; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= get_base1(asymDIFFUSIONsubindex,1,"asymDIFFUSIONsubindex",1); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "asympop_DIFFUSION" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_1__ = 1; k_1__ <= (nt0meansstationary ? nlatent : 0 ); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= get_base1(asymCINTsubindex,1,"asymCINTsubindex",1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "asympop_CINT" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_2__ = 1; k_2__ <= nmanifest; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= ndatapoints; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= ngenerations; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Ygen" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
    }

}; // model

}

typedef model_ctsm_namespace::model_ctsm stan_model;


#endif
